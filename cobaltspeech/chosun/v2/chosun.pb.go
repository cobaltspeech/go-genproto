// Copyright (2021) Cobalt Speech and Language Inc.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        (unknown)
// source: cobaltspeech/chosun/v2/chosun.proto

package chosunv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The top-level message sent by the client for the `Version` method.
type VersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_chosun_v2_chosun_proto_rawDescGZIP(), []int{0}
}

// Lists the Chosun version.
type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chosun string `protobuf:"bytes,1,opt,name=chosun,proto3" json:"chosun,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_chosun_v2_chosun_proto_rawDescGZIP(), []int{1}
}

func (x *VersionResponse) GetChosun() string {
	if x != nil {
		return x.Chosun
	}
	return ""
}

// The top-level message sent by the client for the `ListModels` method.
type ListModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListModelsRequest) Reset() {
	*x = ListModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsRequest) ProtoMessage() {}

func (x *ListModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsRequest.ProtoReflect.Descriptor instead.
func (*ListModelsRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_chosun_v2_chosun_proto_rawDescGZIP(), []int{2}
}

// A list of models available on the Chosun server.
type ListModelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainSets []*DomainInfo `protobuf:"bytes,1,rep,name=domain_sets,json=domainSets,proto3" json:"domain_sets,omitempty"`
	Models     []*ModelInfo  `protobuf:"bytes,2,rep,name=models,proto3" json:"models,omitempty"`
}

func (x *ListModelsResponse) Reset() {
	*x = ListModelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsResponse) ProtoMessage() {}

func (x *ListModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsResponse.ProtoReflect.Descriptor instead.
func (*ListModelsResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_chosun_v2_chosun_proto_rawDescGZIP(), []int{3}
}

func (x *ListModelsResponse) GetDomainSets() []*DomainInfo {
	if x != nil {
		return x.DomainSets
	}
	return nil
}

func (x *ListModelsResponse) GetModels() []*ModelInfo {
	if x != nil {
		return x.Models
	}
	return nil
}

// Information about a domain set.
type DomainInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chosun domain ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Pretty domain name, which may be used for display purposes.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Mapping from domain labels to the ID of the Chosun model representing
	// the domain.
	Domains map[string]string `protobuf:"bytes,3,rep,name=domains,proto3" json:"domains,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DomainInfo) Reset() {
	*x = DomainInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainInfo) ProtoMessage() {}

func (x *DomainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainInfo.ProtoReflect.Descriptor instead.
func (*DomainInfo) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_chosun_v2_chosun_proto_rawDescGZIP(), []int{4}
}

func (x *DomainInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DomainInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainInfo) GetDomains() map[string]string {
	if x != nil {
		return x.Domains
	}
	return nil
}

// Information about a single Chosun model.
type ModelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chosun model ID, which is used to parse NLU input.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Pretty model name, which may be used for display purposes.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ModelInfo) Reset() {
	*x = ModelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInfo) ProtoMessage() {}

func (x *ModelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInfo.ProtoReflect.Descriptor instead.
func (*ModelInfo) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_chosun_v2_chosun_proto_rawDescGZIP(), []int{5}
}

func (x *ModelInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModelInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Data input for the Parse method.
type ParseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID for the model Chosun should use during processing.
	ModelId string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// The domain to use in a domain set. If this is set, domain classification
	// is skipped and the model corresponding to the domain is queried. This
	// should not be set for models other than domain sets.
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	// The query to process.
	//
	// Types that are assignable to Query:
	//
	//	*ParseRequest_Text
	//	*ParseRequest_Nbest
	//	*ParseRequest_Cnet
	//	*ParseRequest_NbestTokens
	Query isParseRequest_Query `protobuf_oneof:"query"`
	// Contextual features to use in the query.
	ContextFeatures map[string]float32 `protobuf:"bytes,7,rep,name=context_features,json=contextFeatures,proto3" json:"context_features,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	// List of whitelisted intents. If the list is empty, all intents will be
	// considered.
	IntentWhitelist []string `protobuf:"bytes,8,rep,name=intent_whitelist,json=intentWhitelist,proto3" json:"intent_whitelist,omitempty"`
}

func (x *ParseRequest) Reset() {
	*x = ParseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseRequest) ProtoMessage() {}

func (x *ParseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseRequest.ProtoReflect.Descriptor instead.
func (*ParseRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_chosun_v2_chosun_proto_rawDescGZIP(), []int{6}
}

func (x *ParseRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *ParseRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (m *ParseRequest) GetQuery() isParseRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *ParseRequest) GetText() string {
	if x, ok := x.GetQuery().(*ParseRequest_Text); ok {
		return x.Text
	}
	return ""
}

func (x *ParseRequest) GetNbest() *NBest {
	if x, ok := x.GetQuery().(*ParseRequest_Nbest); ok {
		return x.Nbest
	}
	return nil
}

func (x *ParseRequest) GetCnet() *CNet {
	if x, ok := x.GetQuery().(*ParseRequest_Cnet); ok {
		return x.Cnet
	}
	return nil
}

func (x *ParseRequest) GetNbestTokens() *NBestTokens {
	if x, ok := x.GetQuery().(*ParseRequest_NbestTokens); ok {
		return x.NbestTokens
	}
	return nil
}

func (x *ParseRequest) GetContextFeatures() map[string]float32 {
	if x != nil {
		return x.ContextFeatures
	}
	return nil
}

func (x *ParseRequest) GetIntentWhitelist() []string {
	if x != nil {
		return x.IntentWhitelist
	}
	return nil
}

type isParseRequest_Query interface {
	isParseRequest_Query()
}

type ParseRequest_Text struct {
	// A 1-best query.
	Text string `protobuf:"bytes,3,opt,name=text,proto3,oneof"`
}

type ParseRequest_Nbest struct {
	// An n-best query. The hypotheses should be sorted in order of
	// decreasing confidence.
	Nbest *NBest `protobuf:"bytes,4,opt,name=nbest,proto3,oneof"`
}

type ParseRequest_Cnet struct {
	// A confusion network query.
	Cnet *CNet `protobuf:"bytes,5,opt,name=cnet,proto3,oneof"`
}

type ParseRequest_NbestTokens struct {
	// An n-best query broken into tokens with per-word confidences.
	// Like the n-best above, the hypotheses should be sorted.
	NbestTokens *NBestTokens `protobuf:"bytes,6,opt,name=nbest_tokens,json=nbestTokens,proto3,oneof"`
}

func (*ParseRequest_Text) isParseRequest_Query() {}

func (*ParseRequest_Nbest) isParseRequest_Query() {}

func (*ParseRequest_Cnet) isParseRequest_Query() {}

func (*ParseRequest_NbestTokens) isParseRequest_Query() {}

type NBest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hypotheses []*Hypothesis `protobuf:"bytes,1,rep,name=hypotheses,proto3" json:"hypotheses,omitempty"`
}

func (x *NBest) Reset() {
	*x = NBest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NBest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NBest) ProtoMessage() {}

func (x *NBest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NBest.ProtoReflect.Descriptor instead.
func (*NBest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_chosun_v2_chosun_proto_rawDescGZIP(), []int{7}
}

func (x *NBest) GetHypotheses() []*Hypothesis {
	if x != nil {
		return x.Hypotheses
	}
	return nil
}

// Hypothesis holds the text of a possible transcript in a query.
type Hypothesis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text of the hypothesis.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// The confidence measure for the hypothesis from the model that generated
	// the hypothesis.
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *Hypothesis) Reset() {
	*x = Hypothesis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hypothesis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hypothesis) ProtoMessage() {}

func (x *Hypothesis) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hypothesis.ProtoReflect.Descriptor instead.
func (*Hypothesis) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_chosun_v2_chosun_proto_rawDescGZIP(), []int{8}
}

func (x *Hypothesis) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Hypothesis) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

// An n-best list where the hypotheses are broken into tokens with token-level
// confidences.
type NBestTokens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hypotheses []*TokenHypothesis `protobuf:"bytes,1,rep,name=hypotheses,proto3" json:"hypotheses,omitempty"`
}

func (x *NBestTokens) Reset() {
	*x = NBestTokens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NBestTokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NBestTokens) ProtoMessage() {}

func (x *NBestTokens) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NBestTokens.ProtoReflect.Descriptor instead.
func (*NBestTokens) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_chosun_v2_chosun_proto_rawDescGZIP(), []int{9}
}

func (x *NBestTokens) GetHypotheses() []*TokenHypothesis {
	if x != nil {
		return x.Hypotheses
	}
	return nil
}

type TokenHypothesis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tokens in the hypothesis with text and confidence scores.
	Tokens []*CNetArc `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	// The utterance-level confidence.
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *TokenHypothesis) Reset() {
	*x = TokenHypothesis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenHypothesis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenHypothesis) ProtoMessage() {}

func (x *TokenHypothesis) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenHypothesis.ProtoReflect.Descriptor instead.
func (*TokenHypothesis) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_chosun_v2_chosun_proto_rawDescGZIP(), []int{10}
}

func (x *TokenHypothesis) GetTokens() []*CNetArc {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *TokenHypothesis) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

type CNet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Links []*CNetLink `protobuf:"bytes,1,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *CNet) Reset() {
	*x = CNet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNet) ProtoMessage() {}

func (x *CNet) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNet.ProtoReflect.Descriptor instead.
func (*CNet) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_chosun_v2_chosun_proto_rawDescGZIP(), []int{11}
}

func (x *CNet) GetLinks() []*CNetLink {
	if x != nil {
		return x.Links
	}
	return nil
}

// A segment of time for a confusion network.
type CNetLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arcs []*CNetArc `protobuf:"bytes,1,rep,name=arcs,proto3" json:"arcs,omitempty"`
}

func (x *CNetLink) Reset() {
	*x = CNetLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNetLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNetLink) ProtoMessage() {}

func (x *CNetLink) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNetLink.ProtoReflect.Descriptor instead.
func (*CNetLink) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_chosun_v2_chosun_proto_rawDescGZIP(), []int{12}
}

func (x *CNetLink) GetArcs() []*CNetArc {
	if x != nil {
		return x.Arcs
	}
	return nil
}

// A candidate word within a confusion network link.
type CNetArc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Word       string  `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *CNetArc) Reset() {
	*x = CNetArc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNetArc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNetArc) ProtoMessage() {}

func (x *CNetArc) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNetArc.ProtoReflect.Descriptor instead.
func (*CNetArc) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_chosun_v2_chosun_proto_rawDescGZIP(), []int{13}
}

func (x *CNetArc) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *CNetArc) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

// Data returned from the Parse method.
type ParseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of recognized intents, sorted by confidence.
	Intents []*Intent `protobuf:"bytes,1,rep,name=intents,proto3" json:"intents,omitempty"`
}

func (x *ParseResponse) Reset() {
	*x = ParseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseResponse) ProtoMessage() {}

func (x *ParseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseResponse.ProtoReflect.Descriptor instead.
func (*ParseResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_chosun_v2_chosun_proto_rawDescGZIP(), []int{14}
}

func (x *ParseResponse) GetIntents() []*Intent {
	if x != nil {
		return x.Intents
	}
	return nil
}

// An intent recognized from the input text.
type Intent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The domain recognized for the query. If a Chosun model was queried
	// directly, this will be an empty string.
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// The name of the intent.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Confidence estimate between 0 and 1. A higher number
	// represents a higher likelihood of the output being
	// correct.
	Confidence float64 `protobuf:"fixed64,3,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// The list of entities recognized with this intent.
	Entities []*Entity `protobuf:"bytes,4,rep,name=entities,proto3" json:"entities,omitempty"`
	// The text of the query. This is helpful when an n-best list is provided.
	Text string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Intent) Reset() {
	*x = Intent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Intent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Intent) ProtoMessage() {}

func (x *Intent) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Intent.ProtoReflect.Descriptor instead.
func (*Intent) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_chosun_v2_chosun_proto_rawDescGZIP(), []int{15}
}

func (x *Intent) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Intent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Intent) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *Intent) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *Intent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// An entity recognized from the input text.
type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the entity.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The value of the entity based on the input text. Depending on the
	// Chosun model, this might not be the same as what was given in
	// the input string, especially if a synonym replacement occurred.
	// To find the original value as it was given in the input, use the
	// start and end index of the entity.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// The index in the original text string where the entity value begins.
	Start uint32 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	// The index in the original text string where the entity value ends.
	// Note that this index will be one past the last character of the
	// entity value.
	End uint32 `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	// confidence is the confidence value between 0 and 1 for the given entity.
	Confidence float64 `protobuf:"fixed64,5,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_chosun_v2_chosun_proto_rawDescGZIP(), []int{16}
}

func (x *Entity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Entity) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Entity) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Entity) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Entity) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

var File_cobaltspeech_chosun_v2_chosun_proto protoreflect.FileDescriptor

var file_cobaltspeech_chosun_v2_chosun_proto_rawDesc = []byte{
	0x0a, 0x23, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2f, 0x63,
	0x68, 0x6f, 0x73, 0x75, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x22, 0x10, 0x0a,
	0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x29, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x94, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x6f, 0x73, 0x75,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x6f, 0x73, 0x75,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x62,
	0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x2f, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xea, 0x03, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x6e,
	0x62, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x62,
	0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x42, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x62, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6e, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e,
	0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x4e, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x63, 0x6e, 0x65, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x6e, 0x62, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x6f, 0x73,
	0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x42, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x62, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x12, 0x64, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x62,
	0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x1a, 0x42, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x4b,
	0x0a, 0x05, 0x4e, 0x42, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x68, 0x79, 0x70, 0x6f, 0x74,
	0x68, 0x65, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x6f, 0x73, 0x75,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x52,
	0x0a, 0x68, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x0a, 0x48,
	0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x56, 0x0a,
	0x0b, 0x4e, 0x42, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x0a,
	0x68, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e,
	0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48,
	0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x52, 0x0a, 0x68, 0x79, 0x70, 0x6f, 0x74,
	0x68, 0x65, 0x73, 0x65, 0x73, 0x22, 0x6a, 0x0a, 0x0f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x79,
	0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x4e, 0x65, 0x74, 0x41, 0x72, 0x63, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x3e, 0x0a, 0x04, 0x43, 0x4e, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x22, 0x3f, 0x0a, 0x08, 0x43, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x33, 0x0a,
	0x04, 0x61, 0x72, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x6f, 0x73, 0x75,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x4e, 0x65, 0x74, 0x41, 0x72, 0x63, 0x52, 0x04, 0x61, 0x72,
	0x63, 0x73, 0x22, 0x3d, 0x0a, 0x07, 0x43, 0x4e, 0x65, 0x74, 0x41, 0x72, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x49, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa0, 0x01, 0x0a,
	0x06, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x2e, 0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x76, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x32, 0xac, 0x02, 0x0a, 0x0d, 0x43, 0x68, 0x6f, 0x73,
	0x75, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x6f, 0x73,
	0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e,
	0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x05, 0x50, 0x61, 0x72, 0x73, 0x65, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x6f,
	0x73, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xe8, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x6f, 0x73,
	0x75, 0x6e, 0x2e, 0x76, 0x32, 0x42, 0x0b, 0x43, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2f, 0x67, 0x6f,
	0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2f, 0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x2f, 0x76, 0x32,
	0x3b, 0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x43, 0x43, 0x58, 0xaa,
	0x02, 0x16, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x43,
	0x68, 0x6f, 0x73, 0x75, 0x6e, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x16, 0x43, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5c, 0x43, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x5c, 0x56,
	0x32, 0xe2, 0x02, 0x22, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x5c, 0x43, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x18, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x3a, 0x3a, 0x43, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x3a, 0x3a, 0x56,
	0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cobaltspeech_chosun_v2_chosun_proto_rawDescOnce sync.Once
	file_cobaltspeech_chosun_v2_chosun_proto_rawDescData = file_cobaltspeech_chosun_v2_chosun_proto_rawDesc
)

func file_cobaltspeech_chosun_v2_chosun_proto_rawDescGZIP() []byte {
	file_cobaltspeech_chosun_v2_chosun_proto_rawDescOnce.Do(func() {
		file_cobaltspeech_chosun_v2_chosun_proto_rawDescData = protoimpl.X.CompressGZIP(file_cobaltspeech_chosun_v2_chosun_proto_rawDescData)
	})
	return file_cobaltspeech_chosun_v2_chosun_proto_rawDescData
}

var file_cobaltspeech_chosun_v2_chosun_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_cobaltspeech_chosun_v2_chosun_proto_goTypes = []interface{}{
	(*VersionRequest)(nil),     // 0: cobaltspeech.chosun.v2.VersionRequest
	(*VersionResponse)(nil),    // 1: cobaltspeech.chosun.v2.VersionResponse
	(*ListModelsRequest)(nil),  // 2: cobaltspeech.chosun.v2.ListModelsRequest
	(*ListModelsResponse)(nil), // 3: cobaltspeech.chosun.v2.ListModelsResponse
	(*DomainInfo)(nil),         // 4: cobaltspeech.chosun.v2.DomainInfo
	(*ModelInfo)(nil),          // 5: cobaltspeech.chosun.v2.ModelInfo
	(*ParseRequest)(nil),       // 6: cobaltspeech.chosun.v2.ParseRequest
	(*NBest)(nil),              // 7: cobaltspeech.chosun.v2.NBest
	(*Hypothesis)(nil),         // 8: cobaltspeech.chosun.v2.Hypothesis
	(*NBestTokens)(nil),        // 9: cobaltspeech.chosun.v2.NBestTokens
	(*TokenHypothesis)(nil),    // 10: cobaltspeech.chosun.v2.TokenHypothesis
	(*CNet)(nil),               // 11: cobaltspeech.chosun.v2.CNet
	(*CNetLink)(nil),           // 12: cobaltspeech.chosun.v2.CNetLink
	(*CNetArc)(nil),            // 13: cobaltspeech.chosun.v2.CNetArc
	(*ParseResponse)(nil),      // 14: cobaltspeech.chosun.v2.ParseResponse
	(*Intent)(nil),             // 15: cobaltspeech.chosun.v2.Intent
	(*Entity)(nil),             // 16: cobaltspeech.chosun.v2.Entity
	nil,                        // 17: cobaltspeech.chosun.v2.DomainInfo.DomainsEntry
	nil,                        // 18: cobaltspeech.chosun.v2.ParseRequest.ContextFeaturesEntry
}
var file_cobaltspeech_chosun_v2_chosun_proto_depIdxs = []int32{
	4,  // 0: cobaltspeech.chosun.v2.ListModelsResponse.domain_sets:type_name -> cobaltspeech.chosun.v2.DomainInfo
	5,  // 1: cobaltspeech.chosun.v2.ListModelsResponse.models:type_name -> cobaltspeech.chosun.v2.ModelInfo
	17, // 2: cobaltspeech.chosun.v2.DomainInfo.domains:type_name -> cobaltspeech.chosun.v2.DomainInfo.DomainsEntry
	7,  // 3: cobaltspeech.chosun.v2.ParseRequest.nbest:type_name -> cobaltspeech.chosun.v2.NBest
	11, // 4: cobaltspeech.chosun.v2.ParseRequest.cnet:type_name -> cobaltspeech.chosun.v2.CNet
	9,  // 5: cobaltspeech.chosun.v2.ParseRequest.nbest_tokens:type_name -> cobaltspeech.chosun.v2.NBestTokens
	18, // 6: cobaltspeech.chosun.v2.ParseRequest.context_features:type_name -> cobaltspeech.chosun.v2.ParseRequest.ContextFeaturesEntry
	8,  // 7: cobaltspeech.chosun.v2.NBest.hypotheses:type_name -> cobaltspeech.chosun.v2.Hypothesis
	10, // 8: cobaltspeech.chosun.v2.NBestTokens.hypotheses:type_name -> cobaltspeech.chosun.v2.TokenHypothesis
	13, // 9: cobaltspeech.chosun.v2.TokenHypothesis.tokens:type_name -> cobaltspeech.chosun.v2.CNetArc
	12, // 10: cobaltspeech.chosun.v2.CNet.links:type_name -> cobaltspeech.chosun.v2.CNetLink
	13, // 11: cobaltspeech.chosun.v2.CNetLink.arcs:type_name -> cobaltspeech.chosun.v2.CNetArc
	15, // 12: cobaltspeech.chosun.v2.ParseResponse.intents:type_name -> cobaltspeech.chosun.v2.Intent
	16, // 13: cobaltspeech.chosun.v2.Intent.entities:type_name -> cobaltspeech.chosun.v2.Entity
	0,  // 14: cobaltspeech.chosun.v2.ChosunService.Version:input_type -> cobaltspeech.chosun.v2.VersionRequest
	2,  // 15: cobaltspeech.chosun.v2.ChosunService.ListModels:input_type -> cobaltspeech.chosun.v2.ListModelsRequest
	6,  // 16: cobaltspeech.chosun.v2.ChosunService.Parse:input_type -> cobaltspeech.chosun.v2.ParseRequest
	1,  // 17: cobaltspeech.chosun.v2.ChosunService.Version:output_type -> cobaltspeech.chosun.v2.VersionResponse
	3,  // 18: cobaltspeech.chosun.v2.ChosunService.ListModels:output_type -> cobaltspeech.chosun.v2.ListModelsResponse
	14, // 19: cobaltspeech.chosun.v2.ChosunService.Parse:output_type -> cobaltspeech.chosun.v2.ParseResponse
	17, // [17:20] is the sub-list for method output_type
	14, // [14:17] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_cobaltspeech_chosun_v2_chosun_proto_init() }
func file_cobaltspeech_chosun_v2_chosun_proto_init() {
	if File_cobaltspeech_chosun_v2_chosun_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NBest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hypothesis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NBestTokens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenHypothesis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNetLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNetArc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Intent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cobaltspeech_chosun_v2_chosun_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ParseRequest_Text)(nil),
		(*ParseRequest_Nbest)(nil),
		(*ParseRequest_Cnet)(nil),
		(*ParseRequest_NbestTokens)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cobaltspeech_chosun_v2_chosun_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cobaltspeech_chosun_v2_chosun_proto_goTypes,
		DependencyIndexes: file_cobaltspeech_chosun_v2_chosun_proto_depIdxs,
		MessageInfos:      file_cobaltspeech_chosun_v2_chosun_proto_msgTypes,
	}.Build()
	File_cobaltspeech_chosun_v2_chosun_proto = out.File
	file_cobaltspeech_chosun_v2_chosun_proto_rawDesc = nil
	file_cobaltspeech_chosun_v2_chosun_proto_goTypes = nil
	file_cobaltspeech_chosun_v2_chosun_proto_depIdxs = nil
}
