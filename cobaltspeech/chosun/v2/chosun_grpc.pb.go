// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: cobaltspeech/chosun/v2/chosun.proto

package chosunv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChosunServiceClient is the client API for ChosunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChosunServiceClient interface {
	// Returns server version information.
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	// ListModels returns information about the Chosun models
	// the server can access.
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	// Process text and return the recognized intents and entity values.
	Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseResponse, error)
}

type chosunServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChosunServiceClient(cc grpc.ClientConnInterface) ChosunServiceClient {
	return &chosunServiceClient{cc}
}

func (c *chosunServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/cobaltspeech.chosun.v2.ChosunService/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chosunServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, "/cobaltspeech.chosun.v2.ChosunService/ListModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chosunServiceClient) Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseResponse, error) {
	out := new(ParseResponse)
	err := c.cc.Invoke(ctx, "/cobaltspeech.chosun.v2.ChosunService/Parse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChosunServiceServer is the server API for ChosunService service.
// All implementations must embed UnimplementedChosunServiceServer
// for forward compatibility
type ChosunServiceServer interface {
	// Returns server version information.
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	// ListModels returns information about the Chosun models
	// the server can access.
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// Process text and return the recognized intents and entity values.
	Parse(context.Context, *ParseRequest) (*ParseResponse, error)
	mustEmbedUnimplementedChosunServiceServer()
}

// UnimplementedChosunServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChosunServiceServer struct {
}

func (UnimplementedChosunServiceServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedChosunServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedChosunServiceServer) Parse(context.Context, *ParseRequest) (*ParseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Parse not implemented")
}
func (UnimplementedChosunServiceServer) mustEmbedUnimplementedChosunServiceServer() {}

// UnsafeChosunServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChosunServiceServer will
// result in compilation errors.
type UnsafeChosunServiceServer interface {
	mustEmbedUnimplementedChosunServiceServer()
}

func RegisterChosunServiceServer(s grpc.ServiceRegistrar, srv ChosunServiceServer) {
	s.RegisterService(&ChosunService_ServiceDesc, srv)
}

func _ChosunService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChosunServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cobaltspeech.chosun.v2.ChosunService/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChosunServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChosunService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChosunServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cobaltspeech.chosun.v2.ChosunService/ListModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChosunServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChosunService_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChosunServiceServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cobaltspeech.chosun.v2.ChosunService/Parse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChosunServiceServer).Parse(ctx, req.(*ParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChosunService_ServiceDesc is the grpc.ServiceDesc for ChosunService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChosunService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cobaltspeech.chosun.v2.ChosunService",
	HandlerType: (*ChosunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _ChosunService_Version_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _ChosunService_ListModels_Handler,
		},
		{
			MethodName: "Parse",
			Handler:    _ChosunService_Parse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cobaltspeech/chosun/v2/chosun.proto",
}
