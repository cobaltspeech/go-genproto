// Copyright (2023--present) Cobalt Speech and Language Inc.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cobaltspeech/voicegen/v1/voicegen.proto

package voicegenv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VoiceGenService_Version_FullMethodName             = "/cobaltspeech.voicegen.v1.VoiceGenService/Version"
	VoiceGenService_ListModels_FullMethodName          = "/cobaltspeech.voicegen.v1.VoiceGenService/ListModels"
	VoiceGenService_StreamingSynthesize_FullMethodName = "/cobaltspeech.voicegen.v1.VoiceGenService/StreamingSynthesize"
)

// VoiceGenServiceClient is the client API for VoiceGenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service that implements the Cobalt VoiceGen API.
type VoiceGenServiceClient interface {
	// Returns version information from the server.
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	// ListModels returns information about the models the server can access.
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	// Performs text to speech synthesis and stream synthesized audio. This
	// method is only available via GRPC and not via HTTP+JSON. However, a
	// web browser may use websockets to use this service.
	StreamingSynthesize(ctx context.Context, in *StreamingSynthesizeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamingSynthesizeResponse], error)
}

type voiceGenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVoiceGenServiceClient(cc grpc.ClientConnInterface) VoiceGenServiceClient {
	return &voiceGenServiceClient{cc}
}

func (c *voiceGenServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, VoiceGenService_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceGenServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, VoiceGenService_ListModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceGenServiceClient) StreamingSynthesize(ctx context.Context, in *StreamingSynthesizeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamingSynthesizeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VoiceGenService_ServiceDesc.Streams[0], VoiceGenService_StreamingSynthesize_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamingSynthesizeRequest, StreamingSynthesizeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VoiceGenService_StreamingSynthesizeClient = grpc.ServerStreamingClient[StreamingSynthesizeResponse]

// VoiceGenServiceServer is the server API for VoiceGenService service.
// All implementations must embed UnimplementedVoiceGenServiceServer
// for forward compatibility.
//
// Service that implements the Cobalt VoiceGen API.
type VoiceGenServiceServer interface {
	// Returns version information from the server.
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	// ListModels returns information about the models the server can access.
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// Performs text to speech synthesis and stream synthesized audio. This
	// method is only available via GRPC and not via HTTP+JSON. However, a
	// web browser may use websockets to use this service.
	StreamingSynthesize(*StreamingSynthesizeRequest, grpc.ServerStreamingServer[StreamingSynthesizeResponse]) error
	mustEmbedUnimplementedVoiceGenServiceServer()
}

// UnimplementedVoiceGenServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVoiceGenServiceServer struct{}

func (UnimplementedVoiceGenServiceServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedVoiceGenServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedVoiceGenServiceServer) StreamingSynthesize(*StreamingSynthesizeRequest, grpc.ServerStreamingServer[StreamingSynthesizeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamingSynthesize not implemented")
}
func (UnimplementedVoiceGenServiceServer) mustEmbedUnimplementedVoiceGenServiceServer() {}
func (UnimplementedVoiceGenServiceServer) testEmbeddedByValue()                         {}

// UnsafeVoiceGenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoiceGenServiceServer will
// result in compilation errors.
type UnsafeVoiceGenServiceServer interface {
	mustEmbedUnimplementedVoiceGenServiceServer()
}

func RegisterVoiceGenServiceServer(s grpc.ServiceRegistrar, srv VoiceGenServiceServer) {
	// If the following call pancis, it indicates UnimplementedVoiceGenServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VoiceGenService_ServiceDesc, srv)
}

func _VoiceGenService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceGenServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoiceGenService_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceGenServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceGenService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceGenServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoiceGenService_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceGenServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceGenService_StreamingSynthesize_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamingSynthesizeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VoiceGenServiceServer).StreamingSynthesize(m, &grpc.GenericServerStream[StreamingSynthesizeRequest, StreamingSynthesizeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VoiceGenService_StreamingSynthesizeServer = grpc.ServerStreamingServer[StreamingSynthesizeResponse]

// VoiceGenService_ServiceDesc is the grpc.ServiceDesc for VoiceGenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoiceGenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cobaltspeech.voicegen.v1.VoiceGenService",
	HandlerType: (*VoiceGenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _VoiceGenService_Version_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _VoiceGenService_ListModels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingSynthesize",
			Handler:       _VoiceGenService_StreamingSynthesize_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cobaltspeech/voicegen/v1/voicegen.proto",
}
