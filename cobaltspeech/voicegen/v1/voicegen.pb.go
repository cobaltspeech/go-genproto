// Copyright (2023--present) Cobalt Speech and Language Inc.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: cobaltspeech/voicegen/v1/voicegen.proto

package voicegenv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PhoneSet is a set of phonemes for words pronunciation.
type PhoneSet int32

const (
	// PHONE_SET_UNSPECIFIED is the default value of this type.
	PhoneSet_PHONE_SET_UNSPECIFIED PhoneSet = 0
	// IPA phoneme set
	PhoneSet_PHONE_SET_IPA PhoneSet = 1
	// X-SAMPA phoneme set
	PhoneSet_PHONE_SET_XSAMPA PhoneSet = 2
	// ARPAbet phoneme set
	PhoneSet_PHONE_SET_ARPABET PhoneSet = 3
)

// Enum value maps for PhoneSet.
var (
	PhoneSet_name = map[int32]string{
		0: "PHONE_SET_UNSPECIFIED",
		1: "PHONE_SET_IPA",
		2: "PHONE_SET_XSAMPA",
		3: "PHONE_SET_ARPABET",
	}
	PhoneSet_value = map[string]int32{
		"PHONE_SET_UNSPECIFIED": 0,
		"PHONE_SET_IPA":         1,
		"PHONE_SET_XSAMPA":      2,
		"PHONE_SET_ARPABET":     3,
	}
)

func (x PhoneSet) Enum() *PhoneSet {
	p := new(PhoneSet)
	*p = x
	return p
}

func (x PhoneSet) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhoneSet) Descriptor() protoreflect.EnumDescriptor {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_enumTypes[0].Descriptor()
}

func (PhoneSet) Type() protoreflect.EnumType {
	return &file_cobaltspeech_voicegen_v1_voicegen_proto_enumTypes[0]
}

func (x PhoneSet) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhoneSet.Descriptor instead.
func (PhoneSet) EnumDescriptor() ([]byte, []int) {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescGZIP(), []int{0}
}

// Byte order of multi-byte data
type ByteOrder int32

const (
	// BYTE_ORDER_UNSPECIFIED is the default value of this type.
	ByteOrder_BYTE_ORDER_UNSPECIFIED ByteOrder = 0
	// Little Endian byte order
	ByteOrder_BYTE_ORDER_LITTLE_ENDIAN ByteOrder = 1
	// Big Endian byte order
	ByteOrder_BYTE_ORDER_BIG_ENDIAN ByteOrder = 2
)

// Enum value maps for ByteOrder.
var (
	ByteOrder_name = map[int32]string{
		0: "BYTE_ORDER_UNSPECIFIED",
		1: "BYTE_ORDER_LITTLE_ENDIAN",
		2: "BYTE_ORDER_BIG_ENDIAN",
	}
	ByteOrder_value = map[string]int32{
		"BYTE_ORDER_UNSPECIFIED":   0,
		"BYTE_ORDER_LITTLE_ENDIAN": 1,
		"BYTE_ORDER_BIG_ENDIAN":    2,
	}
)

func (x ByteOrder) Enum() *ByteOrder {
	p := new(ByteOrder)
	*p = x
	return p
}

func (x ByteOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ByteOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_enumTypes[1].Descriptor()
}

func (ByteOrder) Type() protoreflect.EnumType {
	return &file_cobaltspeech_voicegen_v1_voicegen_proto_enumTypes[1]
}

func (x ByteOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ByteOrder.Descriptor instead.
func (ByteOrder) EnumDescriptor() ([]byte, []int) {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescGZIP(), []int{1}
}

// The encoding of the audio data to be sent for synthesis.
type AudioEncoding int32

const (
	// AUDIO_ENCODING_UNSPECIFIED is the default value of this type and will
	// result in an error.
	AudioEncoding_AUDIO_ENCODING_UNSPECIFIED AudioEncoding = 0
	// PCM signed-integer
	AudioEncoding_AUDIO_ENCODING_SIGNED AudioEncoding = 1
	// PCM unsigned-integer
	AudioEncoding_AUDIO_ENCODING_UNSIGNED AudioEncoding = 2
	// PCM IEEE-Float
	AudioEncoding_AUDIO_ENCODING_IEEE_FLOAT AudioEncoding = 3
	// G.711 mu-law
	AudioEncoding_AUDIO_ENCODING_ULAW AudioEncoding = 4
	// G.711 a-law
	AudioEncoding_AUDIO_ENCODING_ALAW AudioEncoding = 5
)

// Enum value maps for AudioEncoding.
var (
	AudioEncoding_name = map[int32]string{
		0: "AUDIO_ENCODING_UNSPECIFIED",
		1: "AUDIO_ENCODING_SIGNED",
		2: "AUDIO_ENCODING_UNSIGNED",
		3: "AUDIO_ENCODING_IEEE_FLOAT",
		4: "AUDIO_ENCODING_ULAW",
		5: "AUDIO_ENCODING_ALAW",
	}
	AudioEncoding_value = map[string]int32{
		"AUDIO_ENCODING_UNSPECIFIED": 0,
		"AUDIO_ENCODING_SIGNED":      1,
		"AUDIO_ENCODING_UNSIGNED":    2,
		"AUDIO_ENCODING_IEEE_FLOAT":  3,
		"AUDIO_ENCODING_ULAW":        4,
		"AUDIO_ENCODING_ALAW":        5,
	}
)

func (x AudioEncoding) Enum() *AudioEncoding {
	p := new(AudioEncoding)
	*p = x
	return p
}

func (x AudioEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_enumTypes[2].Descriptor()
}

func (AudioEncoding) Type() protoreflect.EnumType {
	return &file_cobaltspeech_voicegen_v1_voicegen_proto_enumTypes[2]
}

func (x AudioEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioEncoding.Descriptor instead.
func (AudioEncoding) EnumDescriptor() ([]byte, []int) {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescGZIP(), []int{2}
}

// The encoding of the audio data to be sent for synthesis.
type AudioCodec int32

const (
	// AUDIO_CODEC_UNSPECIFIED is the default value of this type.
	AudioCodec_AUDIO_CODEC_UNSPECIFIED AudioCodec = 0
	// Raw data without any headers
	AudioCodec_AUDIO_CODEC_RAW AudioCodec = 2
	// WAV with RIFF headers
	AudioCodec_AUDIO_CODEC_WAV AudioCodec = 1
)

// Enum value maps for AudioCodec.
var (
	AudioCodec_name = map[int32]string{
		0: "AUDIO_CODEC_UNSPECIFIED",
		2: "AUDIO_CODEC_RAW",
		1: "AUDIO_CODEC_WAV",
	}
	AudioCodec_value = map[string]int32{
		"AUDIO_CODEC_UNSPECIFIED": 0,
		"AUDIO_CODEC_RAW":         2,
		"AUDIO_CODEC_WAV":         1,
	}
)

func (x AudioCodec) Enum() *AudioCodec {
	p := new(AudioCodec)
	*p = x
	return p
}

func (x AudioCodec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioCodec) Descriptor() protoreflect.EnumDescriptor {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_enumTypes[3].Descriptor()
}

func (AudioCodec) Type() protoreflect.EnumType {
	return &file_cobaltspeech_voicegen_v1_voicegen_proto_enumTypes[3]
}

func (x AudioCodec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioCodec.Descriptor instead.
func (AudioCodec) EnumDescriptor() ([]byte, []int) {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescGZIP(), []int{3}
}

// The top-level message sent by the client for the `Version` method.
type VersionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescGZIP(), []int{0}
}

// The top-level message sent by the server for the `Version` method.
type VersionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version of the server handling these requests.
	Version       string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescGZIP(), []int{1}
}

func (x *VersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// The top-level message sent by the client for the `ListModels` method.
type ListModelsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListModelsRequest) Reset() {
	*x = ListModelsRequest{}
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsRequest) ProtoMessage() {}

func (x *ListModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsRequest.ProtoReflect.Descriptor instead.
func (*ListModelsRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescGZIP(), []int{2}
}

// The message returned to the client by the `ListModels` method.
type ListModelsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of models available for use on Privacy Screen server.
	Models        []*ModelInfo `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListModelsResponse) Reset() {
	*x = ListModelsResponse{}
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsResponse) ProtoMessage() {}

func (x *ListModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsResponse.ProtoReflect.Descriptor instead.
func (*ListModelsResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescGZIP(), []int{3}
}

func (x *ListModelsResponse) GetModels() []*ModelInfo {
	if x != nil {
		return x.Models
	}
	return nil
}

// The top-level messages sent by the client for the `StreamingSynthesize`
// method.
type StreamingSynthesizeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *SynthesisConfig       `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Text          *SynthesisText         `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamingSynthesizeRequest) Reset() {
	*x = StreamingSynthesizeRequest{}
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingSynthesizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingSynthesizeRequest) ProtoMessage() {}

func (x *StreamingSynthesizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingSynthesizeRequest.ProtoReflect.Descriptor instead.
func (*StreamingSynthesizeRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescGZIP(), []int{4}
}

func (x *StreamingSynthesizeRequest) GetConfig() *SynthesisConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *StreamingSynthesizeRequest) GetText() *SynthesisText {
	if x != nil {
		return x.Text
	}
	return nil
}

// The top-level message sent by the server for the `StreamingSynthesize`
// method. In this streaming call, multiple `StreamingSynthesizeResponse`
// messages contain `SynthesizedAudio`.
type StreamingSynthesizeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Audio         *SynthesizedAudio      `protobuf:"bytes,1,opt,name=audio,proto3" json:"audio,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamingSynthesizeResponse) Reset() {
	*x = StreamingSynthesizeResponse{}
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingSynthesizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingSynthesizeResponse) ProtoMessage() {}

func (x *StreamingSynthesizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingSynthesizeResponse.ProtoReflect.Descriptor instead.
func (*StreamingSynthesizeResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescGZIP(), []int{5}
}

func (x *StreamingSynthesizeResponse) GetAudio() *SynthesizedAudio {
	if x != nil {
		return x.Audio
	}
	return nil
}

// Description of a Cobalt VoiceGen Model
type ModelInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier of the model. This identifier is used to choose the model
	// that should be used for synthesis, and is specified in the
	// `SynthesisConfig` message.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Model name. This is a concise name describing the model, and may be
	// presented to the end-user, for example, to help choose which model to use
	// for their synthesis task.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Model attributes.
	Attributes    *ModelAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModelInfo) Reset() {
	*x = ModelInfo{}
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInfo) ProtoMessage() {}

func (x *ModelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInfo.ProtoReflect.Descriptor instead.
func (*ModelInfo) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescGZIP(), []int{6}
}

func (x *ModelInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModelInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelInfo) GetAttributes() *ModelAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Attributes of a VoiceGen Model
type ModelAttributes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Language of the model.
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	// The set of phonemes this model uses to represent how words should be pronounced.
	PhoneSet PhoneSet `protobuf:"varint,2,opt,name=phone_set,json=phoneSet,proto3,enum=cobaltspeech.voicegen.v1.PhoneSet" json:"phone_set,omitempty"`
	// Native audio format of the model. This will be use as default value if audio format
	// in `SynthesisConfig` is not specify.
	NativeAudioFormat *AudioFormat `protobuf:"bytes,3,opt,name=native_audio_format,json=nativeAudioFormat,proto3" json:"native_audio_format,omitempty"`
	// Supported model features.
	SupportedFeatures *ModelFeatures `protobuf:"bytes,4,opt,name=supported_features,json=supportedFeatures,proto3" json:"supported_features,omitempty"`
	// List of speaker available for use in this model.
	Speakers      []*SpeakerInfo `protobuf:"bytes,5,rep,name=speakers,proto3" json:"speakers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModelAttributes) Reset() {
	*x = ModelAttributes{}
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelAttributes) ProtoMessage() {}

func (x *ModelAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelAttributes.ProtoReflect.Descriptor instead.
func (*ModelAttributes) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescGZIP(), []int{7}
}

func (x *ModelAttributes) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ModelAttributes) GetPhoneSet() PhoneSet {
	if x != nil {
		return x.PhoneSet
	}
	return PhoneSet_PHONE_SET_UNSPECIFIED
}

func (x *ModelAttributes) GetNativeAudioFormat() *AudioFormat {
	if x != nil {
		return x.NativeAudioFormat
	}
	return nil
}

func (x *ModelAttributes) GetSupportedFeatures() *ModelFeatures {
	if x != nil {
		return x.SupportedFeatures
	}
	return nil
}

func (x *ModelAttributes) GetSpeakers() []*SpeakerInfo {
	if x != nil {
		return x.Speakers
	}
	return nil
}

type ModelFeatures struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This is set to true if the model can be configured to synthesize audio at different
	// talking speeds.
	SpeechRate bool `protobuf:"varint,1,opt,name=speech_rate,json=speechRate,proto3" json:"speech_rate,omitempty"`
	// This is set to true if the model can be configured to synthesize audio for a given
	// text input differently than usual by varying stresses, and emphasis on different
	// parts of the audio. This feature is useful for making the audio sound slightly
	// different each time to avoid making it feel monotonous.
	VariationScale bool `protobuf:"varint,2,opt,name=variation_scale,json=variationScale,proto3" json:"variation_scale,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ModelFeatures) Reset() {
	*x = ModelFeatures{}
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelFeatures) ProtoMessage() {}

func (x *ModelFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelFeatures.ProtoReflect.Descriptor instead.
func (*ModelFeatures) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescGZIP(), []int{8}
}

func (x *ModelFeatures) GetSpeechRate() bool {
	if x != nil {
		return x.SpeechRate
	}
	return false
}

func (x *ModelFeatures) GetVariationScale() bool {
	if x != nil {
		return x.VariationScale
	}
	return false
}

// Description of a speaker
type SpeakerInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier of the speaker. This identifier is used to choose the speaker
	// that should be used for synthesis, and is specified in the
	// `SynthesisConfig` message.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Speaker name. This is a concise name describing the speaker, and may be
	// presented to the end-user, for example, to help choose which speaker to use
	// for their synthesis task.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Speaker description. This is may be presented to the end-user, for example, to
	// help choose which speaker to use for their synthesis task.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Speaker attributes.
	Attributes    *SpeakerAttributes `protobuf:"bytes,4,opt,name=attributes,proto3" json:"attributes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpeakerInfo) Reset() {
	*x = SpeakerInfo{}
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpeakerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerInfo) ProtoMessage() {}

func (x *SpeakerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerInfo.ProtoReflect.Descriptor instead.
func (*SpeakerInfo) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescGZIP(), []int{9}
}

func (x *SpeakerInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SpeakerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpeakerInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SpeakerInfo) GetAttributes() *SpeakerAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Attributes of a speaker
type SpeakerAttributes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Language of the speaker. This can be different from model language.
	// E.g. an english model with different accents: en-US, en-GB, en-IN etc.
	Language      string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpeakerAttributes) Reset() {
	*x = SpeakerAttributes{}
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpeakerAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerAttributes) ProtoMessage() {}

func (x *SpeakerAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerAttributes.ProtoReflect.Descriptor instead.
func (*SpeakerAttributes) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescGZIP(), []int{10}
}

func (x *SpeakerAttributes) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

// Configuration for setting up a Synthesizer
type SynthesisConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier of the model to use, as obtained from a `ModelInfo` message.
	ModelId string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// Unique identifier of the speaker to use, as obtained from a `SpeakerInfo` message.
	SpeakerId string `protobuf:"bytes,2,opt,name=speaker_id,json=speakerId,proto3" json:"speaker_id,omitempty"`
	// Format of the audio to be sent for synthesis. If no value specify, default value
	// of native audio format of the specified model will be used. Native audio format
	// can be obtained from `ModelAttributes` message.
	AudioFormat *AudioFormat `protobuf:"bytes,3,opt,name=audio_format,json=audioFormat,proto3" json:"audio_format,omitempty"`
	// The speech rate for synthesized audio. If unset, then the default speech rate of
	// a given model is used. Otherwise a value > 0 should be used, with higher values
	// resulting in faster speech. This field only has an effect on the synthesized audio
	// if the model supports it, which can be ascertained from the
	// `ModelAttributes.supported_features`.
	SpeechRate float32 `protobuf:"fixed32,4,opt,name=speech_rate,json=speechRate,proto3" json:"speech_rate,omitempty"`
	// A scale with values > 0, to determine how much to randomly vary the synthesized
	// audio by altering stresses and emphasis on different parts of the audio. Higher
	// values correspond to greater variation. This field only has an affect on the
	// synthesized audio if the model supports it, which can be ascertained from the
	// `ModelAttributes.supported_features`.
	VariationScale float32 `protobuf:"fixed32,5,opt,name=variation_scale,json=variationScale,proto3" json:"variation_scale,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SynthesisConfig) Reset() {
	*x = SynthesisConfig{}
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SynthesisConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesisConfig) ProtoMessage() {}

func (x *SynthesisConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesisConfig.ProtoReflect.Descriptor instead.
func (*SynthesisConfig) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescGZIP(), []int{11}
}

func (x *SynthesisConfig) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *SynthesisConfig) GetSpeakerId() string {
	if x != nil {
		return x.SpeakerId
	}
	return ""
}

func (x *SynthesisConfig) GetAudioFormat() *AudioFormat {
	if x != nil {
		return x.AudioFormat
	}
	return nil
}

func (x *SynthesisConfig) GetSpeechRate() float32 {
	if x != nil {
		return x.SpeechRate
	}
	return 0
}

func (x *SynthesisConfig) GetVariationScale() float32 {
	if x != nil {
		return x.VariationScale
	}
	return 0
}

// Details of audio in format
type AudioFormat struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Sampling rate in Hz.
	SampleRate uint32 `protobuf:"varint,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	// Number of channels present in the audio. E.g.: 1 (mono), 2 (stereo), etc.
	Channels uint32 `protobuf:"varint,2,opt,name=channels,proto3" json:"channels,omitempty"`
	// Bit depth of each sample (e.g. 8, 16, 24, 32, etc.).
	BitDepth uint32 `protobuf:"varint,3,opt,name=bit_depth,json=bitDepth,proto3" json:"bit_depth,omitempty"`
	// Codec of the samples.
	Codec AudioCodec `protobuf:"varint,4,opt,name=codec,proto3,enum=cobaltspeech.voicegen.v1.AudioCodec" json:"codec,omitempty"`
	// Encoding of the samples.
	Encoding AudioEncoding `protobuf:"varint,5,opt,name=encoding,proto3,enum=cobaltspeech.voicegen.v1.AudioEncoding" json:"encoding,omitempty"`
	// Byte order of the samples. This field must be set to a value other than
	// `BYTE_ORDER_UNSPECIFIED` when the `bit_depth` is greater than 8.
	ByteOrder     ByteOrder `protobuf:"varint,6,opt,name=byte_order,json=byteOrder,proto3,enum=cobaltspeech.voicegen.v1.ByteOrder" json:"byte_order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioFormat) Reset() {
	*x = AudioFormat{}
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioFormat) ProtoMessage() {}

func (x *AudioFormat) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioFormat.ProtoReflect.Descriptor instead.
func (*AudioFormat) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescGZIP(), []int{12}
}

func (x *AudioFormat) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *AudioFormat) GetChannels() uint32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

func (x *AudioFormat) GetBitDepth() uint32 {
	if x != nil {
		return x.BitDepth
	}
	return 0
}

func (x *AudioFormat) GetCodec() AudioCodec {
	if x != nil {
		return x.Codec
	}
	return AudioCodec_AUDIO_CODEC_UNSPECIFIED
}

func (x *AudioFormat) GetEncoding() AudioEncoding {
	if x != nil {
		return x.Encoding
	}
	return AudioEncoding_AUDIO_ENCODING_UNSPECIFIED
}

func (x *AudioFormat) GetByteOrder() ByteOrder {
	if x != nil {
		return x.ByteOrder
	}
	return ByteOrder_BYTE_ORDER_UNSPECIFIED
}

// Text input to be sent to the synthesizer
type SynthesisText struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SynthesisText) Reset() {
	*x = SynthesisText{}
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SynthesisText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesisText) ProtoMessage() {}

func (x *SynthesisText) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesisText.ProtoReflect.Descriptor instead.
func (*SynthesisText) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescGZIP(), []int{13}
}

func (x *SynthesisText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Synthesize audio from the synthesizer
type SynthesizedAudio struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SynthesizedAudio) Reset() {
	*x = SynthesizedAudio{}
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SynthesizedAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesizedAudio) ProtoMessage() {}

func (x *SynthesizedAudio) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesizedAudio.ProtoReflect.Descriptor instead.
func (*SynthesizedAudio) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescGZIP(), []int{14}
}

func (x *SynthesizedAudio) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_cobaltspeech_voicegen_v1_voicegen_proto protoreflect.FileDescriptor

const file_cobaltspeech_voicegen_v1_voicegen_proto_rawDesc = "" +
	"\n" +
	"'cobaltspeech/voicegen/v1/voicegen.proto\x12\x18cobaltspeech.voicegen.v1\"\x10\n" +
	"\x0eVersionRequest\"+\n" +
	"\x0fVersionResponse\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\"\x13\n" +
	"\x11ListModelsRequest\"Q\n" +
	"\x12ListModelsResponse\x12;\n" +
	"\x06models\x18\x01 \x03(\v2#.cobaltspeech.voicegen.v1.ModelInfoR\x06models\"\x9c\x01\n" +
	"\x1aStreamingSynthesizeRequest\x12A\n" +
	"\x06config\x18\x01 \x01(\v2).cobaltspeech.voicegen.v1.SynthesisConfigR\x06config\x12;\n" +
	"\x04text\x18\x02 \x01(\v2'.cobaltspeech.voicegen.v1.SynthesisTextR\x04text\"_\n" +
	"\x1bStreamingSynthesizeResponse\x12@\n" +
	"\x05audio\x18\x01 \x01(\v2*.cobaltspeech.voicegen.v1.SynthesizedAudioR\x05audio\"z\n" +
	"\tModelInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12I\n" +
	"\n" +
	"attributes\x18\x03 \x01(\v2).cobaltspeech.voicegen.v1.ModelAttributesR\n" +
	"attributes\"\xe0\x02\n" +
	"\x0fModelAttributes\x12\x1a\n" +
	"\blanguage\x18\x01 \x01(\tR\blanguage\x12?\n" +
	"\tphone_set\x18\x02 \x01(\x0e2\".cobaltspeech.voicegen.v1.PhoneSetR\bphoneSet\x12U\n" +
	"\x13native_audio_format\x18\x03 \x01(\v2%.cobaltspeech.voicegen.v1.AudioFormatR\x11nativeAudioFormat\x12V\n" +
	"\x12supported_features\x18\x04 \x01(\v2'.cobaltspeech.voicegen.v1.ModelFeaturesR\x11supportedFeatures\x12A\n" +
	"\bspeakers\x18\x05 \x03(\v2%.cobaltspeech.voicegen.v1.SpeakerInfoR\bspeakers\"Y\n" +
	"\rModelFeatures\x12\x1f\n" +
	"\vspeech_rate\x18\x01 \x01(\bR\n" +
	"speechRate\x12'\n" +
	"\x0fvariation_scale\x18\x02 \x01(\bR\x0evariationScale\"\xa0\x01\n" +
	"\vSpeakerInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12K\n" +
	"\n" +
	"attributes\x18\x04 \x01(\v2+.cobaltspeech.voicegen.v1.SpeakerAttributesR\n" +
	"attributes\"/\n" +
	"\x11SpeakerAttributes\x12\x1a\n" +
	"\blanguage\x18\x01 \x01(\tR\blanguage\"\xdf\x01\n" +
	"\x0fSynthesisConfig\x12\x19\n" +
	"\bmodel_id\x18\x01 \x01(\tR\amodelId\x12\x1d\n" +
	"\n" +
	"speaker_id\x18\x02 \x01(\tR\tspeakerId\x12H\n" +
	"\faudio_format\x18\x03 \x01(\v2%.cobaltspeech.voicegen.v1.AudioFormatR\vaudioFormat\x12\x1f\n" +
	"\vspeech_rate\x18\x04 \x01(\x02R\n" +
	"speechRate\x12'\n" +
	"\x0fvariation_scale\x18\x05 \x01(\x02R\x0evariationScale\"\xac\x02\n" +
	"\vAudioFormat\x12\x1f\n" +
	"\vsample_rate\x18\x01 \x01(\rR\n" +
	"sampleRate\x12\x1a\n" +
	"\bchannels\x18\x02 \x01(\rR\bchannels\x12\x1b\n" +
	"\tbit_depth\x18\x03 \x01(\rR\bbitDepth\x12:\n" +
	"\x05codec\x18\x04 \x01(\x0e2$.cobaltspeech.voicegen.v1.AudioCodecR\x05codec\x12C\n" +
	"\bencoding\x18\x05 \x01(\x0e2'.cobaltspeech.voicegen.v1.AudioEncodingR\bencoding\x12B\n" +
	"\n" +
	"byte_order\x18\x06 \x01(\x0e2#.cobaltspeech.voicegen.v1.ByteOrderR\tbyteOrder\"#\n" +
	"\rSynthesisText\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\"&\n" +
	"\x10SynthesizedAudio\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data*e\n" +
	"\bPhoneSet\x12\x19\n" +
	"\x15PHONE_SET_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rPHONE_SET_IPA\x10\x01\x12\x14\n" +
	"\x10PHONE_SET_XSAMPA\x10\x02\x12\x15\n" +
	"\x11PHONE_SET_ARPABET\x10\x03*`\n" +
	"\tByteOrder\x12\x1a\n" +
	"\x16BYTE_ORDER_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18BYTE_ORDER_LITTLE_ENDIAN\x10\x01\x12\x19\n" +
	"\x15BYTE_ORDER_BIG_ENDIAN\x10\x02*\xb8\x01\n" +
	"\rAudioEncoding\x12\x1e\n" +
	"\x1aAUDIO_ENCODING_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15AUDIO_ENCODING_SIGNED\x10\x01\x12\x1b\n" +
	"\x17AUDIO_ENCODING_UNSIGNED\x10\x02\x12\x1d\n" +
	"\x19AUDIO_ENCODING_IEEE_FLOAT\x10\x03\x12\x17\n" +
	"\x13AUDIO_ENCODING_ULAW\x10\x04\x12\x17\n" +
	"\x13AUDIO_ENCODING_ALAW\x10\x05*S\n" +
	"\n" +
	"AudioCodec\x12\x1b\n" +
	"\x17AUDIO_CODEC_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fAUDIO_CODEC_RAW\x10\x02\x12\x13\n" +
	"\x0fAUDIO_CODEC_WAV\x10\x012\xe7\x02\n" +
	"\x0fVoiceGenService\x12`\n" +
	"\aVersion\x12(.cobaltspeech.voicegen.v1.VersionRequest\x1a).cobaltspeech.voicegen.v1.VersionResponse\"\x00\x12i\n" +
	"\n" +
	"ListModels\x12+.cobaltspeech.voicegen.v1.ListModelsRequest\x1a,.cobaltspeech.voicegen.v1.ListModelsResponse\"\x00\x12\x86\x01\n" +
	"\x13StreamingSynthesize\x124.cobaltspeech.voicegen.v1.StreamingSynthesizeRequest\x1a5.cobaltspeech.voicegen.v1.StreamingSynthesizeResponse\"\x000\x01B\xf8\x01\n" +
	"\x1ccom.cobaltspeech.voicegen.v1B\rVoicegenProtoP\x01ZGgithub.com/cobaltspeech/go-genproto/cobaltspeech/voicegen/v1;voicegenv1\xa2\x02\x03CVX\xaa\x02\x18Cobaltspeech.Voicegen.V1\xca\x02\x18Cobaltspeech\\Voicegen\\V1\xe2\x02$Cobaltspeech\\Voicegen\\V1\\GPBMetadata\xea\x02\x1aCobaltspeech::Voicegen::V1b\x06proto3"

var (
	file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescOnce sync.Once
	file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescData []byte
)

func file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescGZIP() []byte {
	file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescOnce.Do(func() {
		file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cobaltspeech_voicegen_v1_voicegen_proto_rawDesc), len(file_cobaltspeech_voicegen_v1_voicegen_proto_rawDesc)))
	})
	return file_cobaltspeech_voicegen_v1_voicegen_proto_rawDescData
}

var file_cobaltspeech_voicegen_v1_voicegen_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_cobaltspeech_voicegen_v1_voicegen_proto_goTypes = []any{
	(PhoneSet)(0),                       // 0: cobaltspeech.voicegen.v1.PhoneSet
	(ByteOrder)(0),                      // 1: cobaltspeech.voicegen.v1.ByteOrder
	(AudioEncoding)(0),                  // 2: cobaltspeech.voicegen.v1.AudioEncoding
	(AudioCodec)(0),                     // 3: cobaltspeech.voicegen.v1.AudioCodec
	(*VersionRequest)(nil),              // 4: cobaltspeech.voicegen.v1.VersionRequest
	(*VersionResponse)(nil),             // 5: cobaltspeech.voicegen.v1.VersionResponse
	(*ListModelsRequest)(nil),           // 6: cobaltspeech.voicegen.v1.ListModelsRequest
	(*ListModelsResponse)(nil),          // 7: cobaltspeech.voicegen.v1.ListModelsResponse
	(*StreamingSynthesizeRequest)(nil),  // 8: cobaltspeech.voicegen.v1.StreamingSynthesizeRequest
	(*StreamingSynthesizeResponse)(nil), // 9: cobaltspeech.voicegen.v1.StreamingSynthesizeResponse
	(*ModelInfo)(nil),                   // 10: cobaltspeech.voicegen.v1.ModelInfo
	(*ModelAttributes)(nil),             // 11: cobaltspeech.voicegen.v1.ModelAttributes
	(*ModelFeatures)(nil),               // 12: cobaltspeech.voicegen.v1.ModelFeatures
	(*SpeakerInfo)(nil),                 // 13: cobaltspeech.voicegen.v1.SpeakerInfo
	(*SpeakerAttributes)(nil),           // 14: cobaltspeech.voicegen.v1.SpeakerAttributes
	(*SynthesisConfig)(nil),             // 15: cobaltspeech.voicegen.v1.SynthesisConfig
	(*AudioFormat)(nil),                 // 16: cobaltspeech.voicegen.v1.AudioFormat
	(*SynthesisText)(nil),               // 17: cobaltspeech.voicegen.v1.SynthesisText
	(*SynthesizedAudio)(nil),            // 18: cobaltspeech.voicegen.v1.SynthesizedAudio
}
var file_cobaltspeech_voicegen_v1_voicegen_proto_depIdxs = []int32{
	10, // 0: cobaltspeech.voicegen.v1.ListModelsResponse.models:type_name -> cobaltspeech.voicegen.v1.ModelInfo
	15, // 1: cobaltspeech.voicegen.v1.StreamingSynthesizeRequest.config:type_name -> cobaltspeech.voicegen.v1.SynthesisConfig
	17, // 2: cobaltspeech.voicegen.v1.StreamingSynthesizeRequest.text:type_name -> cobaltspeech.voicegen.v1.SynthesisText
	18, // 3: cobaltspeech.voicegen.v1.StreamingSynthesizeResponse.audio:type_name -> cobaltspeech.voicegen.v1.SynthesizedAudio
	11, // 4: cobaltspeech.voicegen.v1.ModelInfo.attributes:type_name -> cobaltspeech.voicegen.v1.ModelAttributes
	0,  // 5: cobaltspeech.voicegen.v1.ModelAttributes.phone_set:type_name -> cobaltspeech.voicegen.v1.PhoneSet
	16, // 6: cobaltspeech.voicegen.v1.ModelAttributes.native_audio_format:type_name -> cobaltspeech.voicegen.v1.AudioFormat
	12, // 7: cobaltspeech.voicegen.v1.ModelAttributes.supported_features:type_name -> cobaltspeech.voicegen.v1.ModelFeatures
	13, // 8: cobaltspeech.voicegen.v1.ModelAttributes.speakers:type_name -> cobaltspeech.voicegen.v1.SpeakerInfo
	14, // 9: cobaltspeech.voicegen.v1.SpeakerInfo.attributes:type_name -> cobaltspeech.voicegen.v1.SpeakerAttributes
	16, // 10: cobaltspeech.voicegen.v1.SynthesisConfig.audio_format:type_name -> cobaltspeech.voicegen.v1.AudioFormat
	3,  // 11: cobaltspeech.voicegen.v1.AudioFormat.codec:type_name -> cobaltspeech.voicegen.v1.AudioCodec
	2,  // 12: cobaltspeech.voicegen.v1.AudioFormat.encoding:type_name -> cobaltspeech.voicegen.v1.AudioEncoding
	1,  // 13: cobaltspeech.voicegen.v1.AudioFormat.byte_order:type_name -> cobaltspeech.voicegen.v1.ByteOrder
	4,  // 14: cobaltspeech.voicegen.v1.VoiceGenService.Version:input_type -> cobaltspeech.voicegen.v1.VersionRequest
	6,  // 15: cobaltspeech.voicegen.v1.VoiceGenService.ListModels:input_type -> cobaltspeech.voicegen.v1.ListModelsRequest
	8,  // 16: cobaltspeech.voicegen.v1.VoiceGenService.StreamingSynthesize:input_type -> cobaltspeech.voicegen.v1.StreamingSynthesizeRequest
	5,  // 17: cobaltspeech.voicegen.v1.VoiceGenService.Version:output_type -> cobaltspeech.voicegen.v1.VersionResponse
	7,  // 18: cobaltspeech.voicegen.v1.VoiceGenService.ListModels:output_type -> cobaltspeech.voicegen.v1.ListModelsResponse
	9,  // 19: cobaltspeech.voicegen.v1.VoiceGenService.StreamingSynthesize:output_type -> cobaltspeech.voicegen.v1.StreamingSynthesizeResponse
	17, // [17:20] is the sub-list for method output_type
	14, // [14:17] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_cobaltspeech_voicegen_v1_voicegen_proto_init() }
func file_cobaltspeech_voicegen_v1_voicegen_proto_init() {
	if File_cobaltspeech_voicegen_v1_voicegen_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cobaltspeech_voicegen_v1_voicegen_proto_rawDesc), len(file_cobaltspeech_voicegen_v1_voicegen_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cobaltspeech_voicegen_v1_voicegen_proto_goTypes,
		DependencyIndexes: file_cobaltspeech_voicegen_v1_voicegen_proto_depIdxs,
		EnumInfos:         file_cobaltspeech_voicegen_v1_voicegen_proto_enumTypes,
		MessageInfos:      file_cobaltspeech_voicegen_v1_voicegen_proto_msgTypes,
	}.Build()
	File_cobaltspeech_voicegen_v1_voicegen_proto = out.File
	file_cobaltspeech_voicegen_v1_voicegen_proto_goTypes = nil
	file_cobaltspeech_voicegen_v1_voicegen_proto_depIdxs = nil
}
