// Copyright (2021) Cobalt Speech and Language Inc.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: cobaltspeech/diatheke/v3/diatheke.proto

package diathekev3

import (
	v2 "github.com/cobaltspeech/go-genproto/cobaltspeech/chosun/v2"
	v5 "github.com/cobaltspeech/go-genproto/cobaltspeech/cubic/v5"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Byte order of multi-byte data
type ByteOrder int32

const (
	// BYTE_ORDER_UNSPECIFIED is the default value of this type.
	ByteOrder_BYTE_ORDER_UNSPECIFIED ByteOrder = 0
	// Little Endian byte order
	ByteOrder_BYTE_ORDER_LITTLE_ENDIAN ByteOrder = 1
	// Big Endian byte order
	ByteOrder_BYTE_ORDER_BIG_ENDIAN ByteOrder = 2
)

// Enum value maps for ByteOrder.
var (
	ByteOrder_name = map[int32]string{
		0: "BYTE_ORDER_UNSPECIFIED",
		1: "BYTE_ORDER_LITTLE_ENDIAN",
		2: "BYTE_ORDER_BIG_ENDIAN",
	}
	ByteOrder_value = map[string]int32{
		"BYTE_ORDER_UNSPECIFIED":   0,
		"BYTE_ORDER_LITTLE_ENDIAN": 1,
		"BYTE_ORDER_BIG_ENDIAN":    2,
	}
)

func (x ByteOrder) Enum() *ByteOrder {
	p := new(ByteOrder)
	*p = x
	return p
}

func (x ByteOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ByteOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_enumTypes[0].Descriptor()
}

func (ByteOrder) Type() protoreflect.EnumType {
	return &file_cobaltspeech_diatheke_v3_diatheke_proto_enumTypes[0]
}

func (x ByteOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ByteOrder.Descriptor instead.
func (ByteOrder) EnumDescriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{0}
}

// The encoding of the audio data to be sent for synthesis.
type AudioEncoding int32

const (
	// AUDIO_ENCODING_UNSPECIFIED is the default value of this type and will
	// result in an error.
	AudioEncoding_AUDIO_ENCODING_UNSPECIFIED AudioEncoding = 0
	// PCM signed-integer
	AudioEncoding_AUDIO_ENCODING_SIGNED AudioEncoding = 1
	// PCM unsigned-integer
	AudioEncoding_AUDIO_ENCODING_UNSIGNED AudioEncoding = 2
	// PCM IEEE-Float
	AudioEncoding_AUDIO_ENCODING_IEEE_FLOAT AudioEncoding = 3
	// G.711 mu-law
	AudioEncoding_AUDIO_ENCODING_ULAW AudioEncoding = 4
	// G.711 a-law
	AudioEncoding_AUDIO_ENCODING_ALAW AudioEncoding = 5
)

// Enum value maps for AudioEncoding.
var (
	AudioEncoding_name = map[int32]string{
		0: "AUDIO_ENCODING_UNSPECIFIED",
		1: "AUDIO_ENCODING_SIGNED",
		2: "AUDIO_ENCODING_UNSIGNED",
		3: "AUDIO_ENCODING_IEEE_FLOAT",
		4: "AUDIO_ENCODING_ULAW",
		5: "AUDIO_ENCODING_ALAW",
	}
	AudioEncoding_value = map[string]int32{
		"AUDIO_ENCODING_UNSPECIFIED": 0,
		"AUDIO_ENCODING_SIGNED":      1,
		"AUDIO_ENCODING_UNSIGNED":    2,
		"AUDIO_ENCODING_IEEE_FLOAT":  3,
		"AUDIO_ENCODING_ULAW":        4,
		"AUDIO_ENCODING_ALAW":        5,
	}
)

func (x AudioEncoding) Enum() *AudioEncoding {
	p := new(AudioEncoding)
	*p = x
	return p
}

func (x AudioEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_enumTypes[1].Descriptor()
}

func (AudioEncoding) Type() protoreflect.EnumType {
	return &file_cobaltspeech_diatheke_v3_diatheke_proto_enumTypes[1]
}

func (x AudioEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioEncoding.Descriptor instead.
func (AudioEncoding) EnumDescriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{1}
}

// The encoding of the audio data to be sent for synthesis.
type AudioCodec int32

const (
	// AUDIO_CODEC_UNSPECIFIED is the default value of this type.
	AudioCodec_AUDIO_CODEC_UNSPECIFIED AudioCodec = 0
	// Raw data without any headers
	AudioCodec_AUDIO_CODEC_RAW AudioCodec = 1
	// WAV with RIFF headers
	AudioCodec_AUDIO_CODEC_WAV AudioCodec = 2
	// MP3 format with a valid frame header at the beginning of data
	AudioCodec_AUDIO_CODEC_MP3 AudioCodec = 3
	// FLAC format
	AudioCodec_AUDIO_CODEC_FLAC AudioCodec = 4
	// Opus format with OGG header
	AudioCodec_AUDIO_CODEC_OGG_OPUS AudioCodec = 5
)

// Enum value maps for AudioCodec.
var (
	AudioCodec_name = map[int32]string{
		0: "AUDIO_CODEC_UNSPECIFIED",
		1: "AUDIO_CODEC_RAW",
		2: "AUDIO_CODEC_WAV",
		3: "AUDIO_CODEC_MP3",
		4: "AUDIO_CODEC_FLAC",
		5: "AUDIO_CODEC_OGG_OPUS",
	}
	AudioCodec_value = map[string]int32{
		"AUDIO_CODEC_UNSPECIFIED": 0,
		"AUDIO_CODEC_RAW":         1,
		"AUDIO_CODEC_WAV":         2,
		"AUDIO_CODEC_MP3":         3,
		"AUDIO_CODEC_FLAC":        4,
		"AUDIO_CODEC_OGG_OPUS":    5,
	}
)

func (x AudioCodec) Enum() *AudioCodec {
	p := new(AudioCodec)
	*p = x
	return p
}

func (x AudioCodec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioCodec) Descriptor() protoreflect.EnumDescriptor {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_enumTypes[2].Descriptor()
}

func (AudioCodec) Type() protoreflect.EnumType {
	return &file_cobaltspeech_diatheke_v3_diatheke_proto_enumTypes[2]
}

func (x AudioCodec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioCodec.Descriptor instead.
func (AudioCodec) EnumDescriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{2}
}

// The top-level message sent by the client for the `Version` method.
type VersionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{0}
}

// Lists the version of Diatheke and the engines it uses.
type VersionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Dialog management engine
	Diatheke string `protobuf:"bytes,1,opt,name=diatheke,proto3" json:"diatheke,omitempty"`
	// NLU engine
	Chosun string `protobuf:"bytes,2,opt,name=chosun,proto3" json:"chosun,omitempty"`
	// ASR engine
	Cubic string `protobuf:"bytes,3,opt,name=cubic,proto3" json:"cubic,omitempty"`
	// TTS engine
	Luna          string `protobuf:"bytes,4,opt,name=luna,proto3" json:"luna,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{1}
}

func (x *VersionResponse) GetDiatheke() string {
	if x != nil {
		return x.Diatheke
	}
	return ""
}

func (x *VersionResponse) GetChosun() string {
	if x != nil {
		return x.Chosun
	}
	return ""
}

func (x *VersionResponse) GetCubic() string {
	if x != nil {
		return x.Cubic
	}
	return ""
}

func (x *VersionResponse) GetLuna() string {
	if x != nil {
		return x.Luna
	}
	return ""
}

// The top-level message sent by the client for the `ListModels` method.
type ListModelsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListModelsRequest) Reset() {
	*x = ListModelsRequest{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsRequest) ProtoMessage() {}

func (x *ListModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsRequest.ProtoReflect.Descriptor instead.
func (*ListModelsRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{2}
}

// A list of models available on the Diatheke server.
type ListModelsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Models        []*ModelInfo           `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListModelsResponse) Reset() {
	*x = ListModelsResponse{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsResponse) ProtoMessage() {}

func (x *ListModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsResponse.ProtoReflect.Descriptor instead.
func (*ListModelsResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{3}
}

func (x *ListModelsResponse) GetModels() []*ModelInfo {
	if x != nil {
		return x.Models
	}
	return nil
}

// The top-level message sent by the client for the `CreateSession` method.
type CreateSessionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies the Diatheke model ID to use for the session.
	ModelId string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// Specifies a custom wakeword to use for this session. The
	// wakeword must be enabled in the Diatheke model for this
	// to have any effect. It will override the default wakeword
	// specified in the model.
	Wakeword string `protobuf:"bytes,2,opt,name=wakeword,proto3" json:"wakeword,omitempty"`
	// This is an optional field to provide any metadata associated with the
	// session. The server may record this metadata when processing the
	// request. The server does not use this field for any other purpose.
	Metadata *SessionMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Format of the audio system expects to recieve. This is an optional
	// field, and if no value is specified, input will be assumed to be raw
	// bytes (PCM16SLE) at the sample rate that speech processing models
	// are configured to use on the server.
	InputAudioFormat *AudioFormat `protobuf:"bytes,4,opt,name=input_audio_format,json=inputAudioFormat,proto3" json:"input_audio_format,omitempty"`
	// Format of the audio client expects to recieve. This is an optional
	// field. If no value is specified, the output will be produced with a
	// native audio format that text-to-speech models are configured on
	// the server.
	OutputAudioFormat *AudioFormat `protobuf:"bytes,5,opt,name=output_audio_format,json=outputAudioFormat,proto3" json:"output_audio_format,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{4}
}

func (x *CreateSessionRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *CreateSessionRequest) GetWakeword() string {
	if x != nil {
		return x.Wakeword
	}
	return ""
}

func (x *CreateSessionRequest) GetMetadata() *SessionMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateSessionRequest) GetInputAudioFormat() *AudioFormat {
	if x != nil {
		return x.InputAudioFormat
	}
	return nil
}

func (x *CreateSessionRequest) GetOutputAudioFormat() *AudioFormat {
	if x != nil {
		return x.OutputAudioFormat
	}
	return nil
}

// The top-level message sent by the server for the `CreateSession` method.
type CreateSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionOutput *SessionOutput         `protobuf:"bytes,1,opt,name=session_output,json=sessionOutput,proto3" json:"session_output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{5}
}

func (x *CreateSessionResponse) GetSessionOutput() *SessionOutput {
	if x != nil {
		return x.SessionOutput
	}
	return nil
}

// The top-level message sent by the client for the `DeleteSession` method.
type DeleteSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TokenData     *TokenData             `protobuf:"bytes,1,opt,name=token_data,json=tokenData,proto3" json:"token_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSessionRequest) Reset() {
	*x = DeleteSessionRequest{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionRequest) ProtoMessage() {}

func (x *DeleteSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSessionRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteSessionRequest) GetTokenData() *TokenData {
	if x != nil {
		return x.TokenData
	}
	return nil
}

// The top-level message sent by the server for the `DeleteSession` method.
type DeleteSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSessionResponse) Reset() {
	*x = DeleteSessionResponse{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionResponse) ProtoMessage() {}

func (x *DeleteSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionResponse.ProtoReflect.Descriptor instead.
func (*DeleteSessionResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{7}
}

// The top-level message sent by the client for the `UpdateSession` method.
type UpdateSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionInput  *SessionInput          `protobuf:"bytes,1,opt,name=session_input,json=sessionInput,proto3" json:"session_input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSessionRequest) Reset() {
	*x = UpdateSessionRequest{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionRequest) ProtoMessage() {}

func (x *UpdateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSessionRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateSessionRequest) GetSessionInput() *SessionInput {
	if x != nil {
		return x.SessionInput
	}
	return nil
}

// The top-level message sent by the server for the `UpdateSession` method.
type UpdateSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionOutput *SessionOutput         `protobuf:"bytes,1,opt,name=session_output,json=sessionOutput,proto3" json:"session_output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSessionResponse) Reset() {
	*x = UpdateSessionResponse{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionResponse) ProtoMessage() {}

func (x *UpdateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionResponse.ProtoReflect.Descriptor instead.
func (*UpdateSessionResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateSessionResponse) GetSessionOutput() *SessionOutput {
	if x != nil {
		return x.SessionOutput
	}
	return nil
}

// The top-level message sent by the client for the `StreamTTS` method.
type StreamTTSRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Reply action contains reply text and model ID.
	ReplyAction *ReplyAction `protobuf:"bytes,1,opt,name=reply_action,json=replyAction,proto3" json:"reply_action,omitempty"`
	// Token data to provide session ID and other contextual information.
	Token         *TokenData `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamTTSRequest) Reset() {
	*x = StreamTTSRequest{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamTTSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTTSRequest) ProtoMessage() {}

func (x *StreamTTSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTTSRequest.ProtoReflect.Descriptor instead.
func (*StreamTTSRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{10}
}

func (x *StreamTTSRequest) GetReplyAction() *ReplyAction {
	if x != nil {
		return x.ReplyAction
	}
	return nil
}

func (x *StreamTTSRequest) GetToken() *TokenData {
	if x != nil {
		return x.Token
	}
	return nil
}

// The top-level message sent by the server for the `StreamTTS` method.
// Contains synthesized speech audio. The specific encoding
// is defined in the server config file.
type StreamTTSResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Audio         []byte                 `protobuf:"bytes,1,opt,name=audio,proto3" json:"audio,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamTTSResponse) Reset() {
	*x = StreamTTSResponse{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamTTSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTTSResponse) ProtoMessage() {}

func (x *StreamTTSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTTSResponse.ProtoReflect.Descriptor instead.
func (*StreamTTSResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{11}
}

func (x *StreamTTSResponse) GetAudio() []byte {
	if x != nil {
		return x.Audio
	}
	return nil
}

// Information about a single Diatheke model.
type ModelInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Diatheke model ID, which is used to create a new session.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Pretty model name, which may be used for display purposes.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Language code of the model.
	Language string `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	// The ASR audio sample rate, if ASR is enabled.
	AsrSampleRate uint32 `protobuf:"varint,4,opt,name=asr_sample_rate,json=asrSampleRate,proto3" json:"asr_sample_rate,omitempty"`
	// The TTS audio sample rate, if TTS is enabled.
	TtsSampleRate uint32 `protobuf:"varint,5,opt,name=tts_sample_rate,json=ttsSampleRate,proto3" json:"tts_sample_rate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModelInfo) Reset() {
	*x = ModelInfo{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInfo) ProtoMessage() {}

func (x *ModelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInfo.ProtoReflect.Descriptor instead.
func (*ModelInfo) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{12}
}

func (x *ModelInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModelInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelInfo) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ModelInfo) GetAsrSampleRate() uint32 {
	if x != nil {
		return x.AsrSampleRate
	}
	return 0
}

func (x *ModelInfo) GetTtsSampleRate() uint32 {
	if x != nil {
		return x.TtsSampleRate
	}
	return 0
}

// Used by Diatheke to update the session state.
type SessionInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The session token.
	Token *TokenData `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Types that are valid to be assigned to Input:
	//
	//	*SessionInput_Text
	//	*SessionInput_Asr
	//	*SessionInput_Cmd
	//	*SessionInput_Story
	Input         isSessionInput_Input `protobuf_oneof:"input"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionInput) Reset() {
	*x = SessionInput{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInput) ProtoMessage() {}

func (x *SessionInput) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInput.ProtoReflect.Descriptor instead.
func (*SessionInput) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{13}
}

func (x *SessionInput) GetToken() *TokenData {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *SessionInput) GetInput() isSessionInput_Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *SessionInput) GetText() *TextInput {
	if x != nil {
		if x, ok := x.Input.(*SessionInput_Text); ok {
			return x.Text
		}
	}
	return nil
}

func (x *SessionInput) GetAsr() *ASRResult {
	if x != nil {
		if x, ok := x.Input.(*SessionInput_Asr); ok {
			return x.Asr
		}
	}
	return nil
}

func (x *SessionInput) GetCmd() *CommandResult {
	if x != nil {
		if x, ok := x.Input.(*SessionInput_Cmd); ok {
			return x.Cmd
		}
	}
	return nil
}

func (x *SessionInput) GetStory() *SetStory {
	if x != nil {
		if x, ok := x.Input.(*SessionInput_Story); ok {
			return x.Story
		}
	}
	return nil
}

type isSessionInput_Input interface {
	isSessionInput_Input()
}

type SessionInput_Text struct {
	// Process the user supplied text.
	Text *TextInput `protobuf:"bytes,2,opt,name=text,proto3,oneof"`
}

type SessionInput_Asr struct {
	// Process an ASR result.
	Asr *ASRResult `protobuf:"bytes,3,opt,name=asr,proto3,oneof"`
}

type SessionInput_Cmd struct {
	// Process the result of a completed command.
	Cmd *CommandResult `protobuf:"bytes,4,opt,name=cmd,proto3,oneof"`
}

type SessionInput_Story struct {
	// Change the current session state.
	Story *SetStory `protobuf:"bytes,5,opt,name=story,proto3,oneof"`
}

func (*SessionInput_Text) isSessionInput_Input() {}

func (*SessionInput_Asr) isSessionInput_Input() {}

func (*SessionInput_Cmd) isSessionInput_Input() {}

func (*SessionInput_Story) isSessionInput_Input() {}

// A token that represents a single Diatheke session and its
// current state.
type TokenData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Data  []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Session ID, useful for correlating logging between a
	// client and the server.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional data supplied by the client app, which will
	// be logged with other session info by the server.
	Metadata      string `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenData) Reset() {
	*x = TokenData{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenData) ProtoMessage() {}

func (x *TokenData) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenData.ProtoReflect.Descriptor instead.
func (*TokenData) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{14}
}

func (x *TokenData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TokenData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TokenData) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

// User supplied text to send to Diatheke for processing.
type TextInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextInput) Reset() {
	*x = TextInput{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextInput) ProtoMessage() {}

func (x *TextInput) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextInput.ProtoReflect.Descriptor instead.
func (*TextInput) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{15}
}

func (x *TextInput) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// The result of executing a command.
type CommandResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The command ID, as given by the CommandAction
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output from the command expected by the Diatheke model.
	// For example, this could be the result of a data query.
	OutParameters map[string]string `protobuf:"bytes,2,rep,name=out_parameters,json=outParameters,proto3" json:"out_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// If there was an error during execution, indicate it
	// here with a brief message that will be logged by
	// Diatheke.
	Error         string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandResult) Reset() {
	*x = CommandResult{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResult) ProtoMessage() {}

func (x *CommandResult) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResult.ProtoReflect.Descriptor instead.
func (*CommandResult) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{16}
}

func (x *CommandResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommandResult) GetOutParameters() map[string]string {
	if x != nil {
		return x.OutParameters
	}
	return nil
}

func (x *CommandResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Changes the current state of a Diatheke session to run at
// the specified story.
type SetStory struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the story to run, as defined in the
	// Diatheke model.
	StoryId string `protobuf:"bytes,1,opt,name=story_id,json=storyId,proto3" json:"story_id,omitempty"`
	// A list of parameters to set before running the given
	// story. This will replace any parameters currently
	// defined in the session.
	Parameters    map[string]string `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetStory) Reset() {
	*x = SetStory{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetStory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStory) ProtoMessage() {}

func (x *SetStory) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStory.ProtoReflect.Descriptor instead.
func (*SetStory) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{17}
}

func (x *SetStory) GetStoryId() string {
	if x != nil {
		return x.StoryId
	}
	return ""
}

func (x *SetStory) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// The result of updating a session.
type SessionOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The updated session token.
	Token *TokenData `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// The list of actions the client should take next,
	// using the session token returned with this result.
	ActionList    []*ActionData `protobuf:"bytes,2,rep,name=action_list,json=actionList,proto3" json:"action_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionOutput) Reset() {
	*x = SessionOutput{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionOutput) ProtoMessage() {}

func (x *SessionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionOutput.ProtoReflect.Descriptor instead.
func (*SessionOutput) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{18}
}

func (x *SessionOutput) GetToken() *TokenData {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *SessionOutput) GetActionList() []*ActionData {
	if x != nil {
		return x.ActionList
	}
	return nil
}

// Specifies an action that the client application should take.
type ActionData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Action:
	//
	//	*ActionData_Input
	//	*ActionData_Command
	//	*ActionData_Reply
	//	*ActionData_Transcribe
	Action        isActionData_Action `protobuf_oneof:"action"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionData) Reset() {
	*x = ActionData{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionData) ProtoMessage() {}

func (x *ActionData) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionData.ProtoReflect.Descriptor instead.
func (*ActionData) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{19}
}

func (x *ActionData) GetAction() isActionData_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ActionData) GetInput() *WaitForUserAction {
	if x != nil {
		if x, ok := x.Action.(*ActionData_Input); ok {
			return x.Input
		}
	}
	return nil
}

func (x *ActionData) GetCommand() *CommandAction {
	if x != nil {
		if x, ok := x.Action.(*ActionData_Command); ok {
			return x.Command
		}
	}
	return nil
}

func (x *ActionData) GetReply() *ReplyAction {
	if x != nil {
		if x, ok := x.Action.(*ActionData_Reply); ok {
			return x.Reply
		}
	}
	return nil
}

func (x *ActionData) GetTranscribe() *TranscribeAction {
	if x != nil {
		if x, ok := x.Action.(*ActionData_Transcribe); ok {
			return x.Transcribe
		}
	}
	return nil
}

type isActionData_Action interface {
	isActionData_Action()
}

type ActionData_Input struct {
	// The user must provide input to Diatheke.
	Input *WaitForUserAction `protobuf:"bytes,1,opt,name=input,proto3,oneof"`
}

type ActionData_Command struct {
	// The client app must execute the specified command.
	Command *CommandAction `protobuf:"bytes,2,opt,name=command,proto3,oneof"`
}

type ActionData_Reply struct {
	// The client app should provide the reply to the user.
	Reply *ReplyAction `protobuf:"bytes,3,opt,name=reply,proto3,oneof"`
}

type ActionData_Transcribe struct {
	// The client app should call the Transcribe method to
	// capture the user's input.
	Transcribe *TranscribeAction `protobuf:"bytes,4,opt,name=transcribe,proto3,oneof"`
}

func (*ActionData_Input) isActionData_Action() {}

func (*ActionData_Command) isActionData_Action() {}

func (*ActionData_Reply) isActionData_Action() {}

func (*ActionData_Transcribe) isActionData_Action() {}

// This action indicates that Diatheke is expecting user input.
type WaitForUserAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// True if the next user input must begin with a wake-word.
	RequiresWakeWord bool `protobuf:"varint,1,opt,name=requires_wake_word,json=requiresWakeWord,proto3" json:"requires_wake_word,omitempty"`
	// True if the input is required immediately (i.e., in
	// response to a question Diatheke asked the user). When
	// false, the client should be allowed to wait indefinitely
	// for the user to provide input.
	Immediate     bool `protobuf:"varint,2,opt,name=immediate,proto3" json:"immediate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WaitForUserAction) Reset() {
	*x = WaitForUserAction{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitForUserAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForUserAction) ProtoMessage() {}

func (x *WaitForUserAction) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForUserAction.ProtoReflect.Descriptor instead.
func (*WaitForUserAction) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{20}
}

func (x *WaitForUserAction) GetRequiresWakeWord() bool {
	if x != nil {
		return x.RequiresWakeWord
	}
	return false
}

func (x *WaitForUserAction) GetImmediate() bool {
	if x != nil {
		return x.Immediate
	}
	return false
}

// This action indicates that the client application should
// execute a command.
type CommandAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the command to execute, as defined in the
	// Diatheke model.
	Id              string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InputParameters map[string]string `protobuf:"bytes,2,rep,name=input_parameters,json=inputParameters,proto3" json:"input_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// NLU result
	NluResult     *v2.ParseResponse `protobuf:"bytes,3,opt,name=nlu_result,json=nluResult,proto3" json:"nlu_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandAction) Reset() {
	*x = CommandAction{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandAction) ProtoMessage() {}

func (x *CommandAction) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandAction.ProtoReflect.Descriptor instead.
func (*CommandAction) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{21}
}

func (x *CommandAction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommandAction) GetInputParameters() map[string]string {
	if x != nil {
		return x.InputParameters
	}
	return nil
}

func (x *CommandAction) GetNluResult() *v2.ParseResponse {
	if x != nil {
		return x.NluResult
	}
	return nil
}

// This action indicates that the client application should
// give the provided text to the user. This action may also
// be used to synthesize speech with the StreamTTS method.
type ReplyAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Text of the reply
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// TTS model to use with the TTSReply method
	LunaModel     string `protobuf:"bytes,2,opt,name=luna_model,json=lunaModel,proto3" json:"luna_model,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplyAction) Reset() {
	*x = ReplyAction{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplyAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyAction) ProtoMessage() {}

func (x *ReplyAction) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyAction.ProtoReflect.Descriptor instead.
func (*ReplyAction) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{22}
}

func (x *ReplyAction) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ReplyAction) GetLunaModel() string {
	if x != nil {
		return x.LunaModel
	}
	return ""
}

// This action indicates that the client application should
// call the Transcribe method to capture the user's input.
type TranscribeAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the transcribe action, which is useful to
	// differentiate separate transcription tasks within a
	// single sesssion.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// (Required) The ASR model to use for transcription.
	CubicModelId string `protobuf:"bytes,2,opt,name=cubic_model_id,json=cubicModelId,proto3" json:"cubic_model_id,omitempty"`
	// (Optional) A Diatheke model to use for end-of-stream
	// conditions. If empty, the server will not be able to
	// automatically close the transcribe stream based on
	// conditions defined in the model, such as
	// a non-speech timeout or an "end-transcription" intent.
	// When empty, the stream must be closed by the client
	// application.
	DiathekeModelId string `protobuf:"bytes,3,opt,name=diatheke_model_id,json=diathekeModelId,proto3" json:"diatheke_model_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TranscribeAction) Reset() {
	*x = TranscribeAction{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TranscribeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscribeAction) ProtoMessage() {}

func (x *TranscribeAction) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscribeAction.ProtoReflect.Descriptor instead.
func (*TranscribeAction) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{23}
}

func (x *TranscribeAction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TranscribeAction) GetCubicModelId() string {
	if x != nil {
		return x.CubicModelId
	}
	return ""
}

func (x *TranscribeAction) GetDiathekeModelId() string {
	if x != nil {
		return x.DiathekeModelId
	}
	return ""
}

// Data to send to the ASR stream. The first message on the
// stream must be the session token followed by audio data.
type StreamASRRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*StreamASRRequest_Token
	//	*StreamASRRequest_Audio
	Data          isStreamASRRequest_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamASRRequest) Reset() {
	*x = StreamASRRequest{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamASRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamASRRequest) ProtoMessage() {}

func (x *StreamASRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamASRRequest.ProtoReflect.Descriptor instead.
func (*StreamASRRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{24}
}

func (x *StreamASRRequest) GetData() isStreamASRRequest_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StreamASRRequest) GetToken() *TokenData {
	if x != nil {
		if x, ok := x.Data.(*StreamASRRequest_Token); ok {
			return x.Token
		}
	}
	return nil
}

func (x *StreamASRRequest) GetAudio() []byte {
	if x != nil {
		if x, ok := x.Data.(*StreamASRRequest_Audio); ok {
			return x.Audio
		}
	}
	return nil
}

type isStreamASRRequest_Data interface {
	isStreamASRRequest_Data()
}

type StreamASRRequest_Token struct {
	// Session data, used to determine the correct Cubic
	// model to use for ASR, with other contextual
	// information.
	Token *TokenData `protobuf:"bytes,1,opt,name=token,proto3,oneof"`
}

type StreamASRRequest_Audio struct {
	// Audio data to transcribe.
	Audio []byte `protobuf:"bytes,2,opt,name=audio,proto3,oneof"`
}

func (*StreamASRRequest_Token) isStreamASRRequest_Data() {}

func (*StreamASRRequest_Audio) isStreamASRRequest_Data() {}

type StreamASRResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsrResult     *ASRResult             `protobuf:"bytes,1,opt,name=asr_result,json=asrResult,proto3" json:"asr_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamASRResponse) Reset() {
	*x = StreamASRResponse{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamASRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamASRResponse) ProtoMessage() {}

func (x *StreamASRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamASRResponse.ProtoReflect.Descriptor instead.
func (*StreamASRResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{25}
}

func (x *StreamASRResponse) GetAsrResult() *ASRResult {
	if x != nil {
		return x.AsrResult
	}
	return nil
}

// The top-level messages sent by the client for the `StreamASRWithPartials`
// method. In this streaming call, multiple `StreamASRWithPartialsRequest`
// messages should be sent. The first message must contain a `TokenData`
// message only and all subsequent messages must contain audio data only.
type StreamASRWithPartialsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*StreamASRWithPartialsRequest_Token
	//	*StreamASRWithPartialsRequest_Audio
	Data          isStreamASRWithPartialsRequest_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamASRWithPartialsRequest) Reset() {
	*x = StreamASRWithPartialsRequest{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamASRWithPartialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamASRWithPartialsRequest) ProtoMessage() {}

func (x *StreamASRWithPartialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamASRWithPartialsRequest.ProtoReflect.Descriptor instead.
func (*StreamASRWithPartialsRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{26}
}

func (x *StreamASRWithPartialsRequest) GetData() isStreamASRWithPartialsRequest_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StreamASRWithPartialsRequest) GetToken() *TokenData {
	if x != nil {
		if x, ok := x.Data.(*StreamASRWithPartialsRequest_Token); ok {
			return x.Token
		}
	}
	return nil
}

func (x *StreamASRWithPartialsRequest) GetAudio() []byte {
	if x != nil {
		if x, ok := x.Data.(*StreamASRWithPartialsRequest_Audio); ok {
			return x.Audio
		}
	}
	return nil
}

type isStreamASRWithPartialsRequest_Data interface {
	isStreamASRWithPartialsRequest_Data()
}

type StreamASRWithPartialsRequest_Token struct {
	// Session data, used to determine the correct Cubic
	// model to use for ASR, with other contextual
	// information.
	Token *TokenData `protobuf:"bytes,1,opt,name=token,proto3,oneof"`
}

type StreamASRWithPartialsRequest_Audio struct {
	// Audio data to transcribe.
	Audio []byte `protobuf:"bytes,2,opt,name=audio,proto3,oneof"`
}

func (*StreamASRWithPartialsRequest_Token) isStreamASRWithPartialsRequest_Data() {}

func (*StreamASRWithPartialsRequest_Audio) isStreamASRWithPartialsRequest_Data() {}

// The top-level messages sent by the server for the `StreamASRWithPartials`
// method. This streaming call will return multiple
// `StreamASRWithPartialsResponse` messages. The messages are multiple messages
// contain partial recognition result from ASR engine and one last message
// contain an `ASRResult` that be use to update Diatheke session.
type StreamASRWithPartialsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*StreamASRWithPartialsResponse_PartialResult
	//	*StreamASRWithPartialsResponse_AsrResult
	//	*StreamASRWithPartialsResponse_WakewordResult
	Data          isStreamASRWithPartialsResponse_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamASRWithPartialsResponse) Reset() {
	*x = StreamASRWithPartialsResponse{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamASRWithPartialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamASRWithPartialsResponse) ProtoMessage() {}

func (x *StreamASRWithPartialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamASRWithPartialsResponse.ProtoReflect.Descriptor instead.
func (*StreamASRWithPartialsResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{27}
}

func (x *StreamASRWithPartialsResponse) GetData() isStreamASRWithPartialsResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StreamASRWithPartialsResponse) GetPartialResult() *v5.RecognitionResult {
	if x != nil {
		if x, ok := x.Data.(*StreamASRWithPartialsResponse_PartialResult); ok {
			return x.PartialResult
		}
	}
	return nil
}

func (x *StreamASRWithPartialsResponse) GetAsrResult() *ASRResult {
	if x != nil {
		if x, ok := x.Data.(*StreamASRWithPartialsResponse_AsrResult); ok {
			return x.AsrResult
		}
	}
	return nil
}

func (x *StreamASRWithPartialsResponse) GetWakewordResult() *WakewordResult {
	if x != nil {
		if x, ok := x.Data.(*StreamASRWithPartialsResponse_WakewordResult); ok {
			return x.WakewordResult
		}
	}
	return nil
}

type isStreamASRWithPartialsResponse_Data interface {
	isStreamASRWithPartialsResponse_Data()
}

type StreamASRWithPartialsResponse_PartialResult struct {
	// An interim partial result, and could change after more audio is processed
	// and should not be used to update Diatheke session.
	PartialResult *v5.RecognitionResult `protobuf:"bytes,1,opt,name=partial_result,json=partialResult,proto3,oneof"`
}

type StreamASRWithPartialsResponse_AsrResult struct {
	// Final result from ASR engine. This can be use to update Diatheke session
	// via `UpdateSession` method.
	AsrResult *ASRResult `protobuf:"bytes,2,opt,name=asr_result,json=asrResult,proto3,oneof"`
}

type StreamASRWithPartialsResponse_WakewordResult struct {
	// Result of a detected wakeword. This field is only available if alert
	// words are configured on the server, and if the current context requires
	// the presence of a wakeword. If this field is available, it is sent before
	// the final `asr_result` is sent.
	WakewordResult *WakewordResult `protobuf:"bytes,3,opt,name=wakeword_result,json=wakewordResult,proto3,oneof"`
}

func (*StreamASRWithPartialsResponse_PartialResult) isStreamASRWithPartialsResponse_Data() {}

func (*StreamASRWithPartialsResponse_AsrResult) isStreamASRWithPartialsResponse_Data() {}

func (*StreamASRWithPartialsResponse_WakewordResult) isStreamASRWithPartialsResponse_Data() {}

// The result from the ASR stream, sent after the ASR engine
// has endpointed or the stream was closed by the client.
type ASRResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The transcription.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// Confidence estimate between 0 and 1. A higher number
	// represents a higher likelihood of the output being
	// correct.
	Confidence float64 `protobuf:"fixed64,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// True if a timeout was defined for the session's current
	// input state in the Diatheke model, and the timeout
	// expired before getting a transcription. This timeout
	// refers to the amount of time a user has to verbally
	// respond to Diatheke after the ASR stream has been
	// created, and should not be confused with a network
	// connection timeout.
	TimedOut bool `protobuf:"varint,3,opt,name=timed_out,json=timedOut,proto3" json:"timed_out,omitempty"`
	// Cubic recognition result.
	CubicResult   *v5.RecognitionResult `protobuf:"bytes,4,opt,name=cubic_result,json=cubicResult,proto3" json:"cubic_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ASRResult) Reset() {
	*x = ASRResult{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ASRResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASRResult) ProtoMessage() {}

func (x *ASRResult) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASRResult.ProtoReflect.Descriptor instead.
func (*ASRResult) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{28}
}

func (x *ASRResult) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ASRResult) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *ASRResult) GetTimedOut() bool {
	if x != nil {
		return x.TimedOut
	}
	return false
}

func (x *ASRResult) GetCubicResult() *v5.RecognitionResult {
	if x != nil {
		return x.CubicResult
	}
	return nil
}

// The result from the ASR stream, sent when a wakeword has been detected in the
// stream.
type WakewordResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The end-timestamp of the detected wakeword in milliseconds
	TimestampMs   uint64 `protobuf:"varint,1,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WakewordResult) Reset() {
	*x = WakewordResult{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WakewordResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WakewordResult) ProtoMessage() {}

func (x *WakewordResult) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WakewordResult.ProtoReflect.Descriptor instead.
func (*WakewordResult) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{29}
}

func (x *WakewordResult) GetTimestampMs() uint64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

// Data to send to the Transcribe stream. The first message on
// the stream must be a TranscribeAction, followed by audio data.
type TranscribeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*TranscribeRequest_Action
	//	*TranscribeRequest_Audio
	Data          isTranscribeRequest_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TranscribeRequest) Reset() {
	*x = TranscribeRequest{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TranscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscribeRequest) ProtoMessage() {}

func (x *TranscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscribeRequest.ProtoReflect.Descriptor instead.
func (*TranscribeRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{30}
}

func (x *TranscribeRequest) GetData() isTranscribeRequest_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TranscribeRequest) GetAction() *TranscribeAction {
	if x != nil {
		if x, ok := x.Data.(*TranscribeRequest_Action); ok {
			return x.Action
		}
	}
	return nil
}

func (x *TranscribeRequest) GetAudio() []byte {
	if x != nil {
		if x, ok := x.Data.(*TranscribeRequest_Audio); ok {
			return x.Audio
		}
	}
	return nil
}

type isTranscribeRequest_Data interface {
	isTranscribeRequest_Data()
}

type TranscribeRequest_Action struct {
	// Action defining the transcribe configuration.
	Action *TranscribeAction `protobuf:"bytes,1,opt,name=action,proto3,oneof"`
}

type TranscribeRequest_Audio struct {
	// Audio data to transcribe.
	Audio []byte `protobuf:"bytes,2,opt,name=audio,proto3,oneof"`
}

func (*TranscribeRequest_Action) isTranscribeRequest_Data() {}

func (*TranscribeRequest_Audio) isTranscribeRequest_Data() {}

// The result from the Transcribe stream. Usually, several partial
// (or intermediate) transcriptions will be sent until the final
// transcription is ready for every utterance processed.
type TranscribeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The transcription.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// Confidence estimate between 0 and 1. A higher number
	// represents a higher likelihood that the transcription
	// is correct.
	Confidence float64 `protobuf:"fixed64,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// True if this is a partial result, in which case the
	// next result will be for the same audio, either repeating
	// or correcting the text in this result. When false, this
	// represents the final transcription for an utterance, which
	// will not change with further audio input. It is sent when
	// the ASR has identified an endpoint. After the final
	// transcription is sent, any additional results sent on the
	// Transcribe stream belong to the next utterance.
	IsPartial bool `protobuf:"varint,3,opt,name=is_partial,json=isPartial,proto3" json:"is_partial,omitempty"`
	// Cubic recognition result.
	CubicResult   *v5.RecognitionResult `protobuf:"bytes,4,opt,name=cubic_result,json=cubicResult,proto3" json:"cubic_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TranscribeResponse) Reset() {
	*x = TranscribeResponse{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TranscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscribeResponse) ProtoMessage() {}

func (x *TranscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscribeResponse.ProtoReflect.Descriptor instead.
func (*TranscribeResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{31}
}

func (x *TranscribeResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TranscribeResponse) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *TranscribeResponse) GetIsPartial() bool {
	if x != nil {
		return x.IsPartial
	}
	return false
}

func (x *TranscribeResponse) GetCubicResult() *v5.RecognitionResult {
	if x != nil {
		return x.CubicResult
	}
	return nil
}

// Metadata associated with the session.
type SessionMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Any custom metadata that the client wants to associate with the session.
	// This could be a simple string (e.g. a tracing ID) or structured data
	// (e.g. JSON).
	CustomMetadata string `protobuf:"bytes,1,opt,name=custom_metadata,json=customMetadata,proto3" json:"custom_metadata,omitempty"`
	// This is an optional field to specify prefix of files that will be
	// saved for this session.
	StorageFilePrefix string `protobuf:"bytes,2,opt,name=storage_file_prefix,json=storageFilePrefix,proto3" json:"storage_file_prefix,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SessionMetadata) Reset() {
	*x = SessionMetadata{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionMetadata) ProtoMessage() {}

func (x *SessionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionMetadata.ProtoReflect.Descriptor instead.
func (*SessionMetadata) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{32}
}

func (x *SessionMetadata) GetCustomMetadata() string {
	if x != nil {
		return x.CustomMetadata
	}
	return ""
}

func (x *SessionMetadata) GetStorageFilePrefix() string {
	if x != nil {
		return x.StorageFilePrefix
	}
	return ""
}

// Details of audio in format
type AudioFormat struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Sampling rate in Hz.
	SampleRate uint32 `protobuf:"varint,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	// Number of channels present in the audio. E.g.: 1 (mono), 2 (stereo), etc.
	Channels uint32 `protobuf:"varint,2,opt,name=channels,proto3" json:"channels,omitempty"`
	// Bit depth of each sample (e.g. 8, 16, 24, 32, etc.).
	BitDepth uint32 `protobuf:"varint,3,opt,name=bit_depth,json=bitDepth,proto3" json:"bit_depth,omitempty"`
	// Codec of the samples.
	Codec AudioCodec `protobuf:"varint,4,opt,name=codec,proto3,enum=cobaltspeech.diatheke.v3.AudioCodec" json:"codec,omitempty"`
	// Encoding of the samples.
	Encoding AudioEncoding `protobuf:"varint,5,opt,name=encoding,proto3,enum=cobaltspeech.diatheke.v3.AudioEncoding" json:"encoding,omitempty"`
	// Byte order of the samples. This field must be set to a value other than
	// `BYTE_ORDER_UNSPECIFIED` when the `bit_depth` is greater than 8.
	ByteOrder     ByteOrder `protobuf:"varint,6,opt,name=byte_order,json=byteOrder,proto3,enum=cobaltspeech.diatheke.v3.ByteOrder" json:"byte_order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioFormat) Reset() {
	*x = AudioFormat{}
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioFormat) ProtoMessage() {}

func (x *AudioFormat) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioFormat.ProtoReflect.Descriptor instead.
func (*AudioFormat) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP(), []int{33}
}

func (x *AudioFormat) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *AudioFormat) GetChannels() uint32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

func (x *AudioFormat) GetBitDepth() uint32 {
	if x != nil {
		return x.BitDepth
	}
	return 0
}

func (x *AudioFormat) GetCodec() AudioCodec {
	if x != nil {
		return x.Codec
	}
	return AudioCodec_AUDIO_CODEC_UNSPECIFIED
}

func (x *AudioFormat) GetEncoding() AudioEncoding {
	if x != nil {
		return x.Encoding
	}
	return AudioEncoding_AUDIO_ENCODING_UNSPECIFIED
}

func (x *AudioFormat) GetByteOrder() ByteOrder {
	if x != nil {
		return x.ByteOrder
	}
	return ByteOrder_BYTE_ORDER_UNSPECIFIED
}

var File_cobaltspeech_diatheke_v3_diatheke_proto protoreflect.FileDescriptor

var file_cobaltspeech_diatheke_v3_diatheke_proto_rawDesc = []byte{
	0x0a, 0x27, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2f, 0x64,
	0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x64, 0x69, 0x61, 0x74, 0x68,
	0x65, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65,
	0x2e, 0x76, 0x33, 0x1a, 0x23, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2f, 0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x68, 0x6f, 0x73,
	0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2f, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2f, 0x76, 0x35, 0x2f,
	0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x10, 0x0a, 0x0e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6f, 0x0a,
	0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x73, 0x75, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x75, 0x62, 0x69, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x75, 0x62, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x75,
	0x6e, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x75, 0x6e, 0x61, 0x22, 0x13,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x62, 0x61,
	0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b,
	0x65, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61,
	0x6b, 0x65, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61,
	0x6b, 0x65, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65,
	0x2e, 0x76, 0x33, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a,
	0x12, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x62, 0x61,
	0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b,
	0x65, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x55, 0x0a, 0x13, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64,
	0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x67, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x62,
	0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65,
	0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x5a, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69,
	0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x17,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x63, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4b, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76,
	0x33, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0c,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x67, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61,
	0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x54, 0x54, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e,
	0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x29, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x54, 0x53, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x22, 0x9b, 0x01, 0x0a, 0x09, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x72, 0x5f,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x61, 0x73, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x74, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x74, 0x73, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65,
	0x2e, 0x76, 0x33, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x37, 0x0a, 0x03, 0x61, 0x73, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74,
	0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x53, 0x52, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x03, 0x61, 0x73, 0x72, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e,
	0x53, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x4b, 0x0a, 0x09, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1f, 0x0a, 0x09, 0x54, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xda, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x61, 0x0a, 0x0e, 0x6f, 0x75,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x6f, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x1a, 0x40, 0x0a, 0x12, 0x4f, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb8, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x52, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x65, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x91, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x45, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xad, 0x02, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x57, 0x61,
	0x69, 0x74, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x62, 0x61,
	0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b,
	0x65, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3d, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74,
	0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4c, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e,
	0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x11, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x57,
	0x61, 0x6b, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6d, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x67, 0x0a, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x44, 0x0a, 0x0a, 0x6e, 0x6c, 0x75, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x6f, 0x73, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x6e, 0x6c, 0x75,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x42, 0x0a, 0x14, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x0b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x75, 0x6e, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x75, 0x6e, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x74, 0x0a, 0x10,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x62, 0x69, 0x63, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65,
	0x6b, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x64, 0x22, 0x6f, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x53, 0x52, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x57, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x53, 0x52,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x61, 0x73, 0x72, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74,
	0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x53, 0x52, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x09, 0x61, 0x73, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x7b, 0x0a, 0x1c,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x53, 0x52, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68,
	0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x95, 0x02, 0x0a, 0x1d, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x41, 0x53, 0x52, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x76, 0x35, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44,
	0x0a, 0x0a, 0x61, 0x73, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x53,
	0x52, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x09, 0x61, 0x73, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x53, 0x0a, 0x0f, 0x77, 0x61, 0x6b, 0x65, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61,
	0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x57, 0x61, 0x6b, 0x65, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x61, 0x6b, 0x65, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xa9, 0x01, 0x0a, 0x09, 0x41, 0x53, 0x52, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74,
	0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x75, 0x62, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x2e, 0x76, 0x35, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0b, 0x63, 0x75, 0x62, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x33, 0x0a,
	0x0e, 0x57, 0x61, 0x6b, 0x65, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4d, 0x73, 0x22, 0x79, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e,
	0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb4, 0x01,
	0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x75, 0x62, 0x69, 0x63,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x75, 0x62,
	0x69, 0x63, 0x2e, 0x76, 0x35, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x63, 0x75, 0x62, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x6a, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x22, 0xac, 0x02, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x62, 0x69, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x05, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x62, 0x61,
	0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b,
	0x65, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52,
	0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x43, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65,
	0x2e, 0x76, 0x33, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0a, 0x62,
	0x79, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64,
	0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2a,
	0x60, 0x0a, 0x09, 0x42, 0x79, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x16,
	0x42, 0x59, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x59, 0x54, 0x45,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x45, 0x4e,
	0x44, 0x49, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x49, 0x47, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x10,
	0x02, 0x2a, 0xb8, 0x01, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x45, 0x4e, 0x43,
	0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x45, 0x4e, 0x43,
	0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x41,
	0x55, 0x44, 0x49, 0x4f, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x45,
	0x45, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x55,
	0x44, 0x49, 0x4f, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4c, 0x41,
	0x57, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x45, 0x4e, 0x43,
	0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x41, 0x57, 0x10, 0x05, 0x2a, 0x98, 0x01, 0x0a,
	0x0a, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x17, 0x41,
	0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x55, 0x44, 0x49,
	0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x52, 0x41, 0x57, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x57, 0x41, 0x56,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x43, 0x5f, 0x4d, 0x50, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x55, 0x44, 0x49, 0x4f,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x46, 0x4c, 0x41, 0x43, 0x10, 0x04, 0x12, 0x18, 0x0a,
	0x14, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x4f, 0x47, 0x47,
	0x5f, 0x4f, 0x50, 0x55, 0x53, 0x10, 0x05, 0x32, 0x8e, 0x08, 0x0a, 0x0f, 0x44, 0x69, 0x61, 0x74,
	0x68, 0x65, 0x6b, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76,
	0x33, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e,
	0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68,
	0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65,
	0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x62, 0x61,
	0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b,
	0x65, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x62, 0x61,
	0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b,
	0x65, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61,
	0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61,
	0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x72, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x53,
	0x52, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x41, 0x53, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61,
	0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41,
	0x53, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x8e,
	0x01, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x53, 0x52, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65,
	0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x53, 0x52, 0x57, 0x69, 0x74,
	0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e,
	0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x41, 0x53, 0x52, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x6d, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2b, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61,
	0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x62,
	0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65,
	0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x68,
	0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x54, 0x53, 0x12, 0x2a, 0x2e, 0x63, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68,
	0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x54, 0x53,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e,
	0x76, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x54, 0x53, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0xf8, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69,
	0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x42, 0x0d, 0x44, 0x69, 0x61, 0x74, 0x68,
	0x65, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2f, 0x64, 0x69, 0x61,
	0x74, 0x68, 0x65, 0x6b, 0x65, 0x2f, 0x76, 0x33, 0x3b, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b,
	0x65, 0x76, 0x33, 0xa2, 0x02, 0x03, 0x43, 0x44, 0x58, 0xaa, 0x02, 0x18, 0x43, 0x6f, 0x62, 0x61,
	0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x44, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b,
	0x65, 0x2e, 0x56, 0x33, 0xca, 0x02, 0x18, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x5c, 0x44, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x5c, 0x56, 0x33, 0xe2,
	0x02, 0x24, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5c, 0x44,
	0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x5c, 0x56, 0x33, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x3a, 0x3a, 0x44, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x3a,
	0x3a, 0x56, 0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescOnce sync.Once
	file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescData = file_cobaltspeech_diatheke_v3_diatheke_proto_rawDesc
)

func file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescGZIP() []byte {
	file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescOnce.Do(func() {
		file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescData = protoimpl.X.CompressGZIP(file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescData)
	})
	return file_cobaltspeech_diatheke_v3_diatheke_proto_rawDescData
}

var file_cobaltspeech_diatheke_v3_diatheke_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_cobaltspeech_diatheke_v3_diatheke_proto_goTypes = []any{
	(ByteOrder)(0),                        // 0: cobaltspeech.diatheke.v3.ByteOrder
	(AudioEncoding)(0),                    // 1: cobaltspeech.diatheke.v3.AudioEncoding
	(AudioCodec)(0),                       // 2: cobaltspeech.diatheke.v3.AudioCodec
	(*VersionRequest)(nil),                // 3: cobaltspeech.diatheke.v3.VersionRequest
	(*VersionResponse)(nil),               // 4: cobaltspeech.diatheke.v3.VersionResponse
	(*ListModelsRequest)(nil),             // 5: cobaltspeech.diatheke.v3.ListModelsRequest
	(*ListModelsResponse)(nil),            // 6: cobaltspeech.diatheke.v3.ListModelsResponse
	(*CreateSessionRequest)(nil),          // 7: cobaltspeech.diatheke.v3.CreateSessionRequest
	(*CreateSessionResponse)(nil),         // 8: cobaltspeech.diatheke.v3.CreateSessionResponse
	(*DeleteSessionRequest)(nil),          // 9: cobaltspeech.diatheke.v3.DeleteSessionRequest
	(*DeleteSessionResponse)(nil),         // 10: cobaltspeech.diatheke.v3.DeleteSessionResponse
	(*UpdateSessionRequest)(nil),          // 11: cobaltspeech.diatheke.v3.UpdateSessionRequest
	(*UpdateSessionResponse)(nil),         // 12: cobaltspeech.diatheke.v3.UpdateSessionResponse
	(*StreamTTSRequest)(nil),              // 13: cobaltspeech.diatheke.v3.StreamTTSRequest
	(*StreamTTSResponse)(nil),             // 14: cobaltspeech.diatheke.v3.StreamTTSResponse
	(*ModelInfo)(nil),                     // 15: cobaltspeech.diatheke.v3.ModelInfo
	(*SessionInput)(nil),                  // 16: cobaltspeech.diatheke.v3.SessionInput
	(*TokenData)(nil),                     // 17: cobaltspeech.diatheke.v3.TokenData
	(*TextInput)(nil),                     // 18: cobaltspeech.diatheke.v3.TextInput
	(*CommandResult)(nil),                 // 19: cobaltspeech.diatheke.v3.CommandResult
	(*SetStory)(nil),                      // 20: cobaltspeech.diatheke.v3.SetStory
	(*SessionOutput)(nil),                 // 21: cobaltspeech.diatheke.v3.SessionOutput
	(*ActionData)(nil),                    // 22: cobaltspeech.diatheke.v3.ActionData
	(*WaitForUserAction)(nil),             // 23: cobaltspeech.diatheke.v3.WaitForUserAction
	(*CommandAction)(nil),                 // 24: cobaltspeech.diatheke.v3.CommandAction
	(*ReplyAction)(nil),                   // 25: cobaltspeech.diatheke.v3.ReplyAction
	(*TranscribeAction)(nil),              // 26: cobaltspeech.diatheke.v3.TranscribeAction
	(*StreamASRRequest)(nil),              // 27: cobaltspeech.diatheke.v3.StreamASRRequest
	(*StreamASRResponse)(nil),             // 28: cobaltspeech.diatheke.v3.StreamASRResponse
	(*StreamASRWithPartialsRequest)(nil),  // 29: cobaltspeech.diatheke.v3.StreamASRWithPartialsRequest
	(*StreamASRWithPartialsResponse)(nil), // 30: cobaltspeech.diatheke.v3.StreamASRWithPartialsResponse
	(*ASRResult)(nil),                     // 31: cobaltspeech.diatheke.v3.ASRResult
	(*WakewordResult)(nil),                // 32: cobaltspeech.diatheke.v3.WakewordResult
	(*TranscribeRequest)(nil),             // 33: cobaltspeech.diatheke.v3.TranscribeRequest
	(*TranscribeResponse)(nil),            // 34: cobaltspeech.diatheke.v3.TranscribeResponse
	(*SessionMetadata)(nil),               // 35: cobaltspeech.diatheke.v3.SessionMetadata
	(*AudioFormat)(nil),                   // 36: cobaltspeech.diatheke.v3.AudioFormat
	nil,                                   // 37: cobaltspeech.diatheke.v3.CommandResult.OutParametersEntry
	nil,                                   // 38: cobaltspeech.diatheke.v3.SetStory.ParametersEntry
	nil,                                   // 39: cobaltspeech.diatheke.v3.CommandAction.InputParametersEntry
	(*v2.ParseResponse)(nil),              // 40: cobaltspeech.chosun.v2.ParseResponse
	(*v5.RecognitionResult)(nil),          // 41: cobaltspeech.cubic.v5.RecognitionResult
}
var file_cobaltspeech_diatheke_v3_diatheke_proto_depIdxs = []int32{
	15, // 0: cobaltspeech.diatheke.v3.ListModelsResponse.models:type_name -> cobaltspeech.diatheke.v3.ModelInfo
	35, // 1: cobaltspeech.diatheke.v3.CreateSessionRequest.metadata:type_name -> cobaltspeech.diatheke.v3.SessionMetadata
	36, // 2: cobaltspeech.diatheke.v3.CreateSessionRequest.input_audio_format:type_name -> cobaltspeech.diatheke.v3.AudioFormat
	36, // 3: cobaltspeech.diatheke.v3.CreateSessionRequest.output_audio_format:type_name -> cobaltspeech.diatheke.v3.AudioFormat
	21, // 4: cobaltspeech.diatheke.v3.CreateSessionResponse.session_output:type_name -> cobaltspeech.diatheke.v3.SessionOutput
	17, // 5: cobaltspeech.diatheke.v3.DeleteSessionRequest.token_data:type_name -> cobaltspeech.diatheke.v3.TokenData
	16, // 6: cobaltspeech.diatheke.v3.UpdateSessionRequest.session_input:type_name -> cobaltspeech.diatheke.v3.SessionInput
	21, // 7: cobaltspeech.diatheke.v3.UpdateSessionResponse.session_output:type_name -> cobaltspeech.diatheke.v3.SessionOutput
	25, // 8: cobaltspeech.diatheke.v3.StreamTTSRequest.reply_action:type_name -> cobaltspeech.diatheke.v3.ReplyAction
	17, // 9: cobaltspeech.diatheke.v3.StreamTTSRequest.token:type_name -> cobaltspeech.diatheke.v3.TokenData
	17, // 10: cobaltspeech.diatheke.v3.SessionInput.token:type_name -> cobaltspeech.diatheke.v3.TokenData
	18, // 11: cobaltspeech.diatheke.v3.SessionInput.text:type_name -> cobaltspeech.diatheke.v3.TextInput
	31, // 12: cobaltspeech.diatheke.v3.SessionInput.asr:type_name -> cobaltspeech.diatheke.v3.ASRResult
	19, // 13: cobaltspeech.diatheke.v3.SessionInput.cmd:type_name -> cobaltspeech.diatheke.v3.CommandResult
	20, // 14: cobaltspeech.diatheke.v3.SessionInput.story:type_name -> cobaltspeech.diatheke.v3.SetStory
	37, // 15: cobaltspeech.diatheke.v3.CommandResult.out_parameters:type_name -> cobaltspeech.diatheke.v3.CommandResult.OutParametersEntry
	38, // 16: cobaltspeech.diatheke.v3.SetStory.parameters:type_name -> cobaltspeech.diatheke.v3.SetStory.ParametersEntry
	17, // 17: cobaltspeech.diatheke.v3.SessionOutput.token:type_name -> cobaltspeech.diatheke.v3.TokenData
	22, // 18: cobaltspeech.diatheke.v3.SessionOutput.action_list:type_name -> cobaltspeech.diatheke.v3.ActionData
	23, // 19: cobaltspeech.diatheke.v3.ActionData.input:type_name -> cobaltspeech.diatheke.v3.WaitForUserAction
	24, // 20: cobaltspeech.diatheke.v3.ActionData.command:type_name -> cobaltspeech.diatheke.v3.CommandAction
	25, // 21: cobaltspeech.diatheke.v3.ActionData.reply:type_name -> cobaltspeech.diatheke.v3.ReplyAction
	26, // 22: cobaltspeech.diatheke.v3.ActionData.transcribe:type_name -> cobaltspeech.diatheke.v3.TranscribeAction
	39, // 23: cobaltspeech.diatheke.v3.CommandAction.input_parameters:type_name -> cobaltspeech.diatheke.v3.CommandAction.InputParametersEntry
	40, // 24: cobaltspeech.diatheke.v3.CommandAction.nlu_result:type_name -> cobaltspeech.chosun.v2.ParseResponse
	17, // 25: cobaltspeech.diatheke.v3.StreamASRRequest.token:type_name -> cobaltspeech.diatheke.v3.TokenData
	31, // 26: cobaltspeech.diatheke.v3.StreamASRResponse.asr_result:type_name -> cobaltspeech.diatheke.v3.ASRResult
	17, // 27: cobaltspeech.diatheke.v3.StreamASRWithPartialsRequest.token:type_name -> cobaltspeech.diatheke.v3.TokenData
	41, // 28: cobaltspeech.diatheke.v3.StreamASRWithPartialsResponse.partial_result:type_name -> cobaltspeech.cubic.v5.RecognitionResult
	31, // 29: cobaltspeech.diatheke.v3.StreamASRWithPartialsResponse.asr_result:type_name -> cobaltspeech.diatheke.v3.ASRResult
	32, // 30: cobaltspeech.diatheke.v3.StreamASRWithPartialsResponse.wakeword_result:type_name -> cobaltspeech.diatheke.v3.WakewordResult
	41, // 31: cobaltspeech.diatheke.v3.ASRResult.cubic_result:type_name -> cobaltspeech.cubic.v5.RecognitionResult
	26, // 32: cobaltspeech.diatheke.v3.TranscribeRequest.action:type_name -> cobaltspeech.diatheke.v3.TranscribeAction
	41, // 33: cobaltspeech.diatheke.v3.TranscribeResponse.cubic_result:type_name -> cobaltspeech.cubic.v5.RecognitionResult
	2,  // 34: cobaltspeech.diatheke.v3.AudioFormat.codec:type_name -> cobaltspeech.diatheke.v3.AudioCodec
	1,  // 35: cobaltspeech.diatheke.v3.AudioFormat.encoding:type_name -> cobaltspeech.diatheke.v3.AudioEncoding
	0,  // 36: cobaltspeech.diatheke.v3.AudioFormat.byte_order:type_name -> cobaltspeech.diatheke.v3.ByteOrder
	3,  // 37: cobaltspeech.diatheke.v3.DiathekeService.Version:input_type -> cobaltspeech.diatheke.v3.VersionRequest
	5,  // 38: cobaltspeech.diatheke.v3.DiathekeService.ListModels:input_type -> cobaltspeech.diatheke.v3.ListModelsRequest
	7,  // 39: cobaltspeech.diatheke.v3.DiathekeService.CreateSession:input_type -> cobaltspeech.diatheke.v3.CreateSessionRequest
	9,  // 40: cobaltspeech.diatheke.v3.DiathekeService.DeleteSession:input_type -> cobaltspeech.diatheke.v3.DeleteSessionRequest
	11, // 41: cobaltspeech.diatheke.v3.DiathekeService.UpdateSession:input_type -> cobaltspeech.diatheke.v3.UpdateSessionRequest
	27, // 42: cobaltspeech.diatheke.v3.DiathekeService.StreamASR:input_type -> cobaltspeech.diatheke.v3.StreamASRRequest
	29, // 43: cobaltspeech.diatheke.v3.DiathekeService.StreamASRWithPartials:input_type -> cobaltspeech.diatheke.v3.StreamASRWithPartialsRequest
	33, // 44: cobaltspeech.diatheke.v3.DiathekeService.Transcribe:input_type -> cobaltspeech.diatheke.v3.TranscribeRequest
	13, // 45: cobaltspeech.diatheke.v3.DiathekeService.StreamTTS:input_type -> cobaltspeech.diatheke.v3.StreamTTSRequest
	4,  // 46: cobaltspeech.diatheke.v3.DiathekeService.Version:output_type -> cobaltspeech.diatheke.v3.VersionResponse
	6,  // 47: cobaltspeech.diatheke.v3.DiathekeService.ListModels:output_type -> cobaltspeech.diatheke.v3.ListModelsResponse
	8,  // 48: cobaltspeech.diatheke.v3.DiathekeService.CreateSession:output_type -> cobaltspeech.diatheke.v3.CreateSessionResponse
	10, // 49: cobaltspeech.diatheke.v3.DiathekeService.DeleteSession:output_type -> cobaltspeech.diatheke.v3.DeleteSessionResponse
	12, // 50: cobaltspeech.diatheke.v3.DiathekeService.UpdateSession:output_type -> cobaltspeech.diatheke.v3.UpdateSessionResponse
	28, // 51: cobaltspeech.diatheke.v3.DiathekeService.StreamASR:output_type -> cobaltspeech.diatheke.v3.StreamASRResponse
	30, // 52: cobaltspeech.diatheke.v3.DiathekeService.StreamASRWithPartials:output_type -> cobaltspeech.diatheke.v3.StreamASRWithPartialsResponse
	34, // 53: cobaltspeech.diatheke.v3.DiathekeService.Transcribe:output_type -> cobaltspeech.diatheke.v3.TranscribeResponse
	14, // 54: cobaltspeech.diatheke.v3.DiathekeService.StreamTTS:output_type -> cobaltspeech.diatheke.v3.StreamTTSResponse
	46, // [46:55] is the sub-list for method output_type
	37, // [37:46] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_cobaltspeech_diatheke_v3_diatheke_proto_init() }
func file_cobaltspeech_diatheke_v3_diatheke_proto_init() {
	if File_cobaltspeech_diatheke_v3_diatheke_proto != nil {
		return
	}
	file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[13].OneofWrappers = []any{
		(*SessionInput_Text)(nil),
		(*SessionInput_Asr)(nil),
		(*SessionInput_Cmd)(nil),
		(*SessionInput_Story)(nil),
	}
	file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[19].OneofWrappers = []any{
		(*ActionData_Input)(nil),
		(*ActionData_Command)(nil),
		(*ActionData_Reply)(nil),
		(*ActionData_Transcribe)(nil),
	}
	file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[24].OneofWrappers = []any{
		(*StreamASRRequest_Token)(nil),
		(*StreamASRRequest_Audio)(nil),
	}
	file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[26].OneofWrappers = []any{
		(*StreamASRWithPartialsRequest_Token)(nil),
		(*StreamASRWithPartialsRequest_Audio)(nil),
	}
	file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[27].OneofWrappers = []any{
		(*StreamASRWithPartialsResponse_PartialResult)(nil),
		(*StreamASRWithPartialsResponse_AsrResult)(nil),
		(*StreamASRWithPartialsResponse_WakewordResult)(nil),
	}
	file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes[30].OneofWrappers = []any{
		(*TranscribeRequest_Action)(nil),
		(*TranscribeRequest_Audio)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cobaltspeech_diatheke_v3_diatheke_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cobaltspeech_diatheke_v3_diatheke_proto_goTypes,
		DependencyIndexes: file_cobaltspeech_diatheke_v3_diatheke_proto_depIdxs,
		EnumInfos:         file_cobaltspeech_diatheke_v3_diatheke_proto_enumTypes,
		MessageInfos:      file_cobaltspeech_diatheke_v3_diatheke_proto_msgTypes,
	}.Build()
	File_cobaltspeech_diatheke_v3_diatheke_proto = out.File
	file_cobaltspeech_diatheke_v3_diatheke_proto_rawDesc = nil
	file_cobaltspeech_diatheke_v3_diatheke_proto_goTypes = nil
	file_cobaltspeech_diatheke_v3_diatheke_proto_depIdxs = nil
}
