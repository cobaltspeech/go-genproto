// Copyright (2023--present) Cobalt Speech and Language Inc.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: cobaltspeech/voicebio/v1/voicebio.proto

package voicebiov1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Byte order of multi-byte data
type ByteOrder int32

const (
	// BYTE_ORDER_UNSPECIFIED is the default value of this type.
	ByteOrder_BYTE_ORDER_UNSPECIFIED ByteOrder = 0
	// Little Endian byte order
	ByteOrder_BYTE_ORDER_LITTLE_ENDIAN ByteOrder = 1
	// Big Endian byte order
	ByteOrder_BYTE_ORDER_BIG_ENDIAN ByteOrder = 2
)

// Enum value maps for ByteOrder.
var (
	ByteOrder_name = map[int32]string{
		0: "BYTE_ORDER_UNSPECIFIED",
		1: "BYTE_ORDER_LITTLE_ENDIAN",
		2: "BYTE_ORDER_BIG_ENDIAN",
	}
	ByteOrder_value = map[string]int32{
		"BYTE_ORDER_UNSPECIFIED":   0,
		"BYTE_ORDER_LITTLE_ENDIAN": 1,
		"BYTE_ORDER_BIG_ENDIAN":    2,
	}
)

func (x ByteOrder) Enum() *ByteOrder {
	p := new(ByteOrder)
	*p = x
	return p
}

func (x ByteOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ByteOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_enumTypes[0].Descriptor()
}

func (ByteOrder) Type() protoreflect.EnumType {
	return &file_cobaltspeech_voicebio_v1_voicebio_proto_enumTypes[0]
}

func (x ByteOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ByteOrder.Descriptor instead.
func (ByteOrder) EnumDescriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{0}
}

// The encoding of the audio data to be sent for recognition.
type AudioEncoding int32

const (
	// AUDIO_ENCODING_UNSPECIFIED is the default value of this type and will
	// result in an error.
	AudioEncoding_AUDIO_ENCODING_UNSPECIFIED AudioEncoding = 0
	// PCM signed-integer
	AudioEncoding_AUDIO_ENCODING_SIGNED AudioEncoding = 1
	// PCM unsigned-integer
	AudioEncoding_AUDIO_ENCODING_UNSIGNED AudioEncoding = 2
	// PCM IEEE-Float
	AudioEncoding_AUDIO_ENCODING_IEEE_FLOAT AudioEncoding = 3
	// G.711 mu-law
	AudioEncoding_AUDIO_ENCODING_ULAW AudioEncoding = 4
	// G.711 a-law
	AudioEncoding_AUDIO_ENCODING_ALAW AudioEncoding = 5
)

// Enum value maps for AudioEncoding.
var (
	AudioEncoding_name = map[int32]string{
		0: "AUDIO_ENCODING_UNSPECIFIED",
		1: "AUDIO_ENCODING_SIGNED",
		2: "AUDIO_ENCODING_UNSIGNED",
		3: "AUDIO_ENCODING_IEEE_FLOAT",
		4: "AUDIO_ENCODING_ULAW",
		5: "AUDIO_ENCODING_ALAW",
	}
	AudioEncoding_value = map[string]int32{
		"AUDIO_ENCODING_UNSPECIFIED": 0,
		"AUDIO_ENCODING_SIGNED":      1,
		"AUDIO_ENCODING_UNSIGNED":    2,
		"AUDIO_ENCODING_IEEE_FLOAT":  3,
		"AUDIO_ENCODING_ULAW":        4,
		"AUDIO_ENCODING_ALAW":        5,
	}
)

func (x AudioEncoding) Enum() *AudioEncoding {
	p := new(AudioEncoding)
	*p = x
	return p
}

func (x AudioEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_enumTypes[1].Descriptor()
}

func (AudioEncoding) Type() protoreflect.EnumType {
	return &file_cobaltspeech_voicebio_v1_voicebio_proto_enumTypes[1]
}

func (x AudioEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioEncoding.Descriptor instead.
func (AudioEncoding) EnumDescriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{1}
}

type AudioFormatHeadered int32

const (
	// AUDIO_FORMAT_HEADERED_UNSPECIFIED is the default value of this type.
	AudioFormatHeadered_AUDIO_FORMAT_HEADERED_UNSPECIFIED AudioFormatHeadered = 0
	// WAV with RIFF headers
	AudioFormatHeadered_AUDIO_FORMAT_HEADERED_WAV AudioFormatHeadered = 1
	// MP3 format with a valid frame header at the beginning of data
	AudioFormatHeadered_AUDIO_FORMAT_HEADERED_MP3 AudioFormatHeadered = 2
	// FLAC format
	AudioFormatHeadered_AUDIO_FORMAT_HEADERED_FLAC AudioFormatHeadered = 3
	// Opus format with OGG header
	AudioFormatHeadered_AUDIO_FORMAT_HEADERED_OGG_OPUS AudioFormatHeadered = 4
)

// Enum value maps for AudioFormatHeadered.
var (
	AudioFormatHeadered_name = map[int32]string{
		0: "AUDIO_FORMAT_HEADERED_UNSPECIFIED",
		1: "AUDIO_FORMAT_HEADERED_WAV",
		2: "AUDIO_FORMAT_HEADERED_MP3",
		3: "AUDIO_FORMAT_HEADERED_FLAC",
		4: "AUDIO_FORMAT_HEADERED_OGG_OPUS",
	}
	AudioFormatHeadered_value = map[string]int32{
		"AUDIO_FORMAT_HEADERED_UNSPECIFIED": 0,
		"AUDIO_FORMAT_HEADERED_WAV":         1,
		"AUDIO_FORMAT_HEADERED_MP3":         2,
		"AUDIO_FORMAT_HEADERED_FLAC":        3,
		"AUDIO_FORMAT_HEADERED_OGG_OPUS":    4,
	}
)

func (x AudioFormatHeadered) Enum() *AudioFormatHeadered {
	p := new(AudioFormatHeadered)
	*p = x
	return p
}

func (x AudioFormatHeadered) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioFormatHeadered) Descriptor() protoreflect.EnumDescriptor {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_enumTypes[2].Descriptor()
}

func (AudioFormatHeadered) Type() protoreflect.EnumType {
	return &file_cobaltspeech_voicebio_v1_voicebio_proto_enumTypes[2]
}

func (x AudioFormatHeadered) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioFormatHeadered.Descriptor instead.
func (AudioFormatHeadered) EnumDescriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{2}
}

// The top-level message sent by the client for the `Version` method.
type VersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{0}
}

// The message sent by the server for the `Version` method.
type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the server handling these requests.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{1}
}

func (x *VersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// The top-level message sent by the client for the `ListModels` method.
type ListModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListModelsRequest) Reset() {
	*x = ListModelsRequest{}
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsRequest) ProtoMessage() {}

func (x *ListModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsRequest.ProtoReflect.Descriptor instead.
func (*ListModelsRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{2}
}

// The message returned to the client by the `ListModels` method.
type ListModelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of models available for use that match the request.
	Models []*Model `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"`
}

func (x *ListModelsResponse) Reset() {
	*x = ListModelsResponse{}
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsResponse) ProtoMessage() {}

func (x *ListModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsResponse.ProtoReflect.Descriptor instead.
func (*ListModelsResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{3}
}

func (x *ListModelsResponse) GetModels() []*Model {
	if x != nil {
		return x.Models
	}
	return nil
}

// The top level messages sent by the client for the `StreamingEnroll` method.
// In this streaming call, multiple `StreamingEnrollRequest` messages should be
// sent. The first message must contain a `EnrollmentConfig` message, and all
// subsequent messages must contain `Audio` only. All `Audio` messages must
// contain non-empty audio. If audio content is empty, the server may choose to
// interpret it as end of stream and stop accepting any further messages.
type StreamingEnrollRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*StreamingEnrollRequest_Config
	//	*StreamingEnrollRequest_Audio
	Request isStreamingEnrollRequest_Request `protobuf_oneof:"request"`
}

func (x *StreamingEnrollRequest) Reset() {
	*x = StreamingEnrollRequest{}
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingEnrollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingEnrollRequest) ProtoMessage() {}

func (x *StreamingEnrollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingEnrollRequest.ProtoReflect.Descriptor instead.
func (*StreamingEnrollRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{4}
}

func (m *StreamingEnrollRequest) GetRequest() isStreamingEnrollRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *StreamingEnrollRequest) GetConfig() *EnrollmentConfig {
	if x, ok := x.GetRequest().(*StreamingEnrollRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *StreamingEnrollRequest) GetAudio() *Audio {
	if x, ok := x.GetRequest().(*StreamingEnrollRequest_Audio); ok {
		return x.Audio
	}
	return nil
}

type isStreamingEnrollRequest_Request interface {
	isStreamingEnrollRequest_Request()
}

type StreamingEnrollRequest_Config struct {
	Config *EnrollmentConfig `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type StreamingEnrollRequest_Audio struct {
	Audio *Audio `protobuf:"bytes,2,opt,name=audio,proto3,oneof"`
}

func (*StreamingEnrollRequest_Config) isStreamingEnrollRequest_Request() {}

func (*StreamingEnrollRequest_Audio) isStreamingEnrollRequest_Request() {}

// The message returned by the server for the `StreamingEnroll` method.
type StreamingEnrollResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voiceprint       *Voiceprint       `protobuf:"bytes,1,opt,name=voiceprint,proto3" json:"voiceprint,omitempty"`
	EnrollmentStatus *EnrollmentStatus `protobuf:"bytes,2,opt,name=enrollment_status,json=enrollmentStatus,proto3" json:"enrollment_status,omitempty"`
}

func (x *StreamingEnrollResponse) Reset() {
	*x = StreamingEnrollResponse{}
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingEnrollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingEnrollResponse) ProtoMessage() {}

func (x *StreamingEnrollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingEnrollResponse.ProtoReflect.Descriptor instead.
func (*StreamingEnrollResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{5}
}

func (x *StreamingEnrollResponse) GetVoiceprint() *Voiceprint {
	if x != nil {
		return x.Voiceprint
	}
	return nil
}

func (x *StreamingEnrollResponse) GetEnrollmentStatus() *EnrollmentStatus {
	if x != nil {
		return x.EnrollmentStatus
	}
	return nil
}

// Configuration for Enrollment of speakers.
type EnrollmentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the model to use for enrollment. A list of supported IDs can be found
	// using the `ListModels` call.
	ModelId string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// Format of the audio to be sent for enrollment.
	AudioFormat *AudioFormat `protobuf:"bytes,2,opt,name=audio_format,json=audioFormat,proto3" json:"audio_format,omitempty"`
	// Empty string for new users. For re-enrolling additional users with new
	// audio data, set this to that user's previous voiceprint. The previous
	// voiceprint needs to have been generated using the same model as specified
	// in this config.
	PreviousVoiceprint *Voiceprint `protobuf:"bytes,3,opt,name=previous_voiceprint,json=previousVoiceprint,proto3" json:"previous_voiceprint,omitempty"`
}

func (x *EnrollmentConfig) Reset() {
	*x = EnrollmentConfig{}
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnrollmentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrollmentConfig) ProtoMessage() {}

func (x *EnrollmentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrollmentConfig.ProtoReflect.Descriptor instead.
func (*EnrollmentConfig) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{6}
}

func (x *EnrollmentConfig) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *EnrollmentConfig) GetAudioFormat() *AudioFormat {
	if x != nil {
		return x.AudioFormat
	}
	return nil
}

func (x *EnrollmentConfig) GetPreviousVoiceprint() *Voiceprint {
	if x != nil {
		return x.PreviousVoiceprint
	}
	return nil
}

// The message returned as part of StreamingEnrollResponse, to provide
// information about whether voiceprint is sufficiently trained.
type EnrollmentStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether sufficient data has been provided as part of this user's
	// enrollment. If this is false, more audio should be collected from the user
	// and re-enrollment should be done. If this is true, it is still OK to enroll
	// more data for the same user to update the voiceprint.
	EnrollmentComplete bool `protobuf:"varint,1,opt,name=enrollment_complete,json=enrollmentComplete,proto3" json:"enrollment_complete,omitempty"`
	// If enrollment is not yet complete, how many more seconds of user's speech
	// are required to complete the enrollment. If enrollment is completed
	// successfully, this value will be set to 0.
	AdditionalAudioRequiredSeconds uint32 `protobuf:"varint,2,opt,name=additional_audio_required_seconds,json=additionalAudioRequiredSeconds,proto3" json:"additional_audio_required_seconds,omitempty"`
}

func (x *EnrollmentStatus) Reset() {
	*x = EnrollmentStatus{}
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnrollmentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrollmentStatus) ProtoMessage() {}

func (x *EnrollmentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrollmentStatus.ProtoReflect.Descriptor instead.
func (*EnrollmentStatus) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{7}
}

func (x *EnrollmentStatus) GetEnrollmentComplete() bool {
	if x != nil {
		return x.EnrollmentComplete
	}
	return false
}

func (x *EnrollmentStatus) GetAdditionalAudioRequiredSeconds() uint32 {
	if x != nil {
		return x.AdditionalAudioRequiredSeconds
	}
	return 0
}

// The top level messages sent by the client for the `StreamingVerify` method.
// In this streaming call, multiple `StreamingVerifyRequest` messages should be
// sent. The first message must contain a `VerificationConfig` message, and all
// subsequent messages must contain `Audio` only. All `Audio` messages must
// contain non-empty audio. If audio content is empty, the server may choose to
// interpret it as end of stream and stop accepting any further messages.
type StreamingVerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*StreamingVerifyRequest_Config
	//	*StreamingVerifyRequest_Audio
	Request isStreamingVerifyRequest_Request `protobuf_oneof:"request"`
}

func (x *StreamingVerifyRequest) Reset() {
	*x = StreamingVerifyRequest{}
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingVerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingVerifyRequest) ProtoMessage() {}

func (x *StreamingVerifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingVerifyRequest.ProtoReflect.Descriptor instead.
func (*StreamingVerifyRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{8}
}

func (m *StreamingVerifyRequest) GetRequest() isStreamingVerifyRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *StreamingVerifyRequest) GetConfig() *VerificationConfig {
	if x, ok := x.GetRequest().(*StreamingVerifyRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *StreamingVerifyRequest) GetAudio() *Audio {
	if x, ok := x.GetRequest().(*StreamingVerifyRequest_Audio); ok {
		return x.Audio
	}
	return nil
}

type isStreamingVerifyRequest_Request interface {
	isStreamingVerifyRequest_Request()
}

type StreamingVerifyRequest_Config struct {
	Config *VerificationConfig `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type StreamingVerifyRequest_Audio struct {
	Audio *Audio `protobuf:"bytes,2,opt,name=audio,proto3,oneof"`
}

func (*StreamingVerifyRequest_Config) isStreamingVerifyRequest_Request() {}

func (*StreamingVerifyRequest_Audio) isStreamingVerifyRequest_Request() {}

// The message returned by the server for the `StreamingVerify` method.
type StreamingVerifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *VoiceprintComparisonResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *StreamingVerifyResponse) Reset() {
	*x = StreamingVerifyResponse{}
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingVerifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingVerifyResponse) ProtoMessage() {}

func (x *StreamingVerifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingVerifyResponse.ProtoReflect.Descriptor instead.
func (*StreamingVerifyResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{9}
}

func (x *StreamingVerifyResponse) GetResult() *VoiceprintComparisonResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// Message describing the result of comparing a voiceprint against given audio.
type VoiceprintComparisonResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not the audio successfully matches with the provided voiceprint.
	IsMatch bool `protobuf:"varint,1,opt,name=is_match,json=isMatch,proto3" json:"is_match,omitempty"`
	// Similarity score representing how closely the audio matched against the
	// voiceprint. This score could be any negative or positive number. Lower
	// value suggests that the audio and voiceprints are less similar, whereas a
	// higher value indicates more similarity. The `is_match` field can be used to
	// actually decide if the result should be considered a valid match.
	SimilarityScore float32 `protobuf:"fixed32,2,opt,name=similarity_score,json=similarityScore,proto3" json:"similarity_score,omitempty"`
}

func (x *VoiceprintComparisonResult) Reset() {
	*x = VoiceprintComparisonResult{}
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoiceprintComparisonResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceprintComparisonResult) ProtoMessage() {}

func (x *VoiceprintComparisonResult) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceprintComparisonResult.ProtoReflect.Descriptor instead.
func (*VoiceprintComparisonResult) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{10}
}

func (x *VoiceprintComparisonResult) GetIsMatch() bool {
	if x != nil {
		return x.IsMatch
	}
	return false
}

func (x *VoiceprintComparisonResult) GetSimilarityScore() float32 {
	if x != nil {
		return x.SimilarityScore
	}
	return 0
}

// Configuration for Verification of a speaker.
type VerificationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the model to use for verification. A list of supported IDs can be
	// found using the `ListModels` call. The model used for verification must
	// match with the model used for enrollment.
	ModelId string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// Format of the audio to be sent for enrollment.
	AudioFormat *AudioFormat `protobuf:"bytes,2,opt,name=audio_format,json=audioFormat,proto3" json:"audio_format,omitempty"`
	// Voiceprint with which audio should be compared.
	Voiceprint *Voiceprint `protobuf:"bytes,3,opt,name=voiceprint,proto3" json:"voiceprint,omitempty"`
}

func (x *VerificationConfig) Reset() {
	*x = VerificationConfig{}
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerificationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationConfig) ProtoMessage() {}

func (x *VerificationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationConfig.ProtoReflect.Descriptor instead.
func (*VerificationConfig) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{11}
}

func (x *VerificationConfig) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *VerificationConfig) GetAudioFormat() *AudioFormat {
	if x != nil {
		return x.AudioFormat
	}
	return nil
}

func (x *VerificationConfig) GetVoiceprint() *Voiceprint {
	if x != nil {
		return x.Voiceprint
	}
	return nil
}

// The top level messages sent by the client for the `StreamingIdentify` method.
// In this streaming call, multiple `StreamingIdentifyRequest` messages should
// be sent. The first message must contain a `IdentificationConfig` message, and
// all subsequent messages must contain `Audio` only. All `Audio` messages must
// contain non-empty audio. If audio content is empty, the server may choose to
// interpret it as end of stream and stop accepting any further messages.
type StreamingIdentifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*StreamingIdentifyRequest_Config
	//	*StreamingIdentifyRequest_Audio
	Request isStreamingIdentifyRequest_Request `protobuf_oneof:"request"`
}

func (x *StreamingIdentifyRequest) Reset() {
	*x = StreamingIdentifyRequest{}
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingIdentifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingIdentifyRequest) ProtoMessage() {}

func (x *StreamingIdentifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingIdentifyRequest.ProtoReflect.Descriptor instead.
func (*StreamingIdentifyRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{12}
}

func (m *StreamingIdentifyRequest) GetRequest() isStreamingIdentifyRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *StreamingIdentifyRequest) GetConfig() *IdentificationConfig {
	if x, ok := x.GetRequest().(*StreamingIdentifyRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *StreamingIdentifyRequest) GetAudio() *Audio {
	if x, ok := x.GetRequest().(*StreamingIdentifyRequest_Audio); ok {
		return x.Audio
	}
	return nil
}

type isStreamingIdentifyRequest_Request interface {
	isStreamingIdentifyRequest_Request()
}

type StreamingIdentifyRequest_Config struct {
	Config *IdentificationConfig `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type StreamingIdentifyRequest_Audio struct {
	Audio *Audio `protobuf:"bytes,2,opt,name=audio,proto3,oneof"`
}

func (*StreamingIdentifyRequest_Config) isStreamingIdentifyRequest_Request() {}

func (*StreamingIdentifyRequest_Audio) isStreamingIdentifyRequest_Request() {}

// The message returned by the server for the `StreamingIdentify` method.
type StreamingIdentifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index (0-based) of the best matching voiceprint in the list of input
	// voiceprints provided in the `IdentificationConfig` message. If none of the
	// voiceprints was a match, a negative value is returned.
	BestMatchIndex int32 `protobuf:"varint,1,opt,name=best_match_index,json=bestMatchIndex,proto3" json:"best_match_index,omitempty"`
	// Result of comparing the given audio against each of the input voiceprints.
	// The order of this list is the same as the input voiceprint list provided in
	// the `IdentificationConfig` message.
	VoiceprintComparisonResults []*VoiceprintComparisonResult `protobuf:"bytes,2,rep,name=voiceprint_comparison_results,json=voiceprintComparisonResults,proto3" json:"voiceprint_comparison_results,omitempty"`
}

func (x *StreamingIdentifyResponse) Reset() {
	*x = StreamingIdentifyResponse{}
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingIdentifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingIdentifyResponse) ProtoMessage() {}

func (x *StreamingIdentifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingIdentifyResponse.ProtoReflect.Descriptor instead.
func (*StreamingIdentifyResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{13}
}

func (x *StreamingIdentifyResponse) GetBestMatchIndex() int32 {
	if x != nil {
		return x.BestMatchIndex
	}
	return 0
}

func (x *StreamingIdentifyResponse) GetVoiceprintComparisonResults() []*VoiceprintComparisonResult {
	if x != nil {
		return x.VoiceprintComparisonResults
	}
	return nil
}

// Configuration for Identification of a speaker.
type IdentificationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the model to use for identification. A list of supported IDs can be
	// found using the `ListModels` call. The model used for identification must
	// match with the model used for enrollment.
	ModelId string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// Format of the audio to be sent for enrollment.
	AudioFormat *AudioFormat `protobuf:"bytes,2,opt,name=audio_format,json=audioFormat,proto3" json:"audio_format,omitempty"`
	// Voiceprints of potential speakers that need to be identified in the given
	// audio.
	Voiceprints []*Voiceprint `protobuf:"bytes,3,rep,name=voiceprints,proto3" json:"voiceprints,omitempty"`
}

func (x *IdentificationConfig) Reset() {
	*x = IdentificationConfig{}
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentificationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentificationConfig) ProtoMessage() {}

func (x *IdentificationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentificationConfig.ProtoReflect.Descriptor instead.
func (*IdentificationConfig) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{14}
}

func (x *IdentificationConfig) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *IdentificationConfig) GetAudioFormat() *AudioFormat {
	if x != nil {
		return x.AudioFormat
	}
	return nil
}

func (x *IdentificationConfig) GetVoiceprints() []*Voiceprint {
	if x != nil {
		return x.Voiceprints
	}
	return nil
}

// Voiceprint extracted from user's audio.
type Voiceprint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Voiceprint data serialized to a string.
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Voiceprint) Reset() {
	*x = Voiceprint{}
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Voiceprint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Voiceprint) ProtoMessage() {}

func (x *Voiceprint) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Voiceprint.ProtoReflect.Descriptor instead.
func (*Voiceprint) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{15}
}

func (x *Voiceprint) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// Format of the audio to be sent for recognition.
//
// Depending on how they are configured, server instances of this service may
// not support all the formats provided in the API. One format that is
// guaranteed to be supported is the RAW format with little-endian 16-bit
// signed samples with the sample rate matching that of the model being
// requested.
type AudioFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AudioFormat:
	//
	//	*AudioFormat_AudioFormatRaw
	//	*AudioFormat_AudioFormatHeadered
	AudioFormat isAudioFormat_AudioFormat `protobuf_oneof:"audio_format"`
}

func (x *AudioFormat) Reset() {
	*x = AudioFormat{}
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioFormat) ProtoMessage() {}

func (x *AudioFormat) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioFormat.ProtoReflect.Descriptor instead.
func (*AudioFormat) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{16}
}

func (m *AudioFormat) GetAudioFormat() isAudioFormat_AudioFormat {
	if m != nil {
		return m.AudioFormat
	}
	return nil
}

func (x *AudioFormat) GetAudioFormatRaw() *AudioFormatRAW {
	if x, ok := x.GetAudioFormat().(*AudioFormat_AudioFormatRaw); ok {
		return x.AudioFormatRaw
	}
	return nil
}

func (x *AudioFormat) GetAudioFormatHeadered() AudioFormatHeadered {
	if x, ok := x.GetAudioFormat().(*AudioFormat_AudioFormatHeadered); ok {
		return x.AudioFormatHeadered
	}
	return AudioFormatHeadered_AUDIO_FORMAT_HEADERED_UNSPECIFIED
}

type isAudioFormat_AudioFormat interface {
	isAudioFormat_AudioFormat()
}

type AudioFormat_AudioFormatRaw struct {
	// Audio is raw data without any headers
	AudioFormatRaw *AudioFormatRAW `protobuf:"bytes,2,opt,name=audio_format_raw,json=audioFormatRaw,proto3,oneof"`
}

type AudioFormat_AudioFormatHeadered struct {
	// Audio has a self-describing header. Headers are expected to be sent at
	// the beginning of the entire audio file/stream, and not in every
	// `Audio` message.
	//
	// The default value of this type is AUDIO_FORMAT_HEADERED_UNSPECIFIED. If
	// this value is used, the server may attempt to detect the format of the
	// audio. However, it is recommended that the exact format be specified.
	AudioFormatHeadered AudioFormatHeadered `protobuf:"varint,3,opt,name=audio_format_headered,json=audioFormatHeadered,proto3,enum=cobaltspeech.voicebio.v1.AudioFormatHeadered,oneof"`
}

func (*AudioFormat_AudioFormatRaw) isAudioFormat_AudioFormat() {}

func (*AudioFormat_AudioFormatHeadered) isAudioFormat_AudioFormat() {}

// Details of audio in raw format
type AudioFormatRAW struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Encoding of the samples. It must be specified explicitly and using the
	// default value of `AUDIO_ENCODING_UNSPECIFIED` will result in an error.
	Encoding AudioEncoding `protobuf:"varint,1,opt,name=encoding,proto3,enum=cobaltspeech.voicebio.v1.AudioEncoding" json:"encoding,omitempty"`
	// Bit depth of each sample (e.g. 8, 16, 24, 32, etc.). This is a required
	// field.
	BitDepth uint32 `protobuf:"varint,2,opt,name=bit_depth,json=bitDepth,proto3" json:"bit_depth,omitempty"`
	// Byte order of the samples. This field must be set to a value other than
	// `BYTE_ORDER_UNSPECIFIED` when the `bit_depth` is greater than 8.
	ByteOrder ByteOrder `protobuf:"varint,3,opt,name=byte_order,json=byteOrder,proto3,enum=cobaltspeech.voicebio.v1.ByteOrder" json:"byte_order,omitempty"`
	// Sampling rate in Hz. This is a required field.
	SampleRate uint32 `protobuf:"varint,4,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	// Number of channels present in the audio. E.g.: 1 (mono), 2 (stereo), etc.
	// This is a required field.
	Channels uint32 `protobuf:"varint,5,opt,name=channels,proto3" json:"channels,omitempty"`
}

func (x *AudioFormatRAW) Reset() {
	*x = AudioFormatRAW{}
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioFormatRAW) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioFormatRAW) ProtoMessage() {}

func (x *AudioFormatRAW) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioFormatRAW.ProtoReflect.Descriptor instead.
func (*AudioFormatRAW) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{17}
}

func (x *AudioFormatRAW) GetEncoding() AudioEncoding {
	if x != nil {
		return x.Encoding
	}
	return AudioEncoding_AUDIO_ENCODING_UNSPECIFIED
}

func (x *AudioFormatRAW) GetBitDepth() uint32 {
	if x != nil {
		return x.BitDepth
	}
	return 0
}

func (x *AudioFormatRAW) GetByteOrder() ByteOrder {
	if x != nil {
		return x.ByteOrder
	}
	return ByteOrder_BYTE_ORDER_UNSPECIFIED
}

func (x *AudioFormatRAW) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *AudioFormatRAW) GetChannels() uint32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

// Audio to be sent to VoiceBio.
type Audio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Audio) Reset() {
	*x = Audio{}
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Audio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audio) ProtoMessage() {}

func (x *Audio) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audio.ProtoReflect.Descriptor instead.
func (*Audio) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{18}
}

func (x *Audio) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Description of a VoiceBio model.
type Model struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the model. This identifier is used to choose the model
	// that should be used for enrollment, verification or identification
	// requests. This ID needs to be specified in the respective config messages
	// for these requests.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Model name. This is a concise name describing the model, and may be
	// presented to the end-user, for example, to help choose which model to use
	// for their voicebio task.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Model Attributes
	Attributes *ModelAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Model) Reset() {
	*x = Model{}
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Model) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model) ProtoMessage() {}

func (x *Model) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model.ProtoReflect.Descriptor instead.
func (*Model) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{19}
}

func (x *Model) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Model) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Model) GetAttributes() *ModelAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Attributes of a VoiceBio model
type ModelAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Audio sample rate (native) supported by the model
	SampleRate uint32 `protobuf:"varint,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
}

func (x *ModelAttributes) Reset() {
	*x = ModelAttributes{}
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelAttributes) ProtoMessage() {}

func (x *ModelAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelAttributes.ProtoReflect.Descriptor instead.
func (*ModelAttributes) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP(), []int{20}
}

func (x *ModelAttributes) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

var File_cobaltspeech_voicebio_v1_voicebio_proto protoreflect.FileDescriptor

var file_cobaltspeech_voicebio_v1_voicebio_proto_rawDesc = []byte{
	0x0a, 0x27, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2f, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x62, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x22, 0x10, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x06,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x17,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x52, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x57, 0x0a,
	0x11, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x10, 0x45, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x55, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x52, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x13,
	0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x49, 0x0a,
	0x21, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x05, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x62,
	0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x62,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x67, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x62,
	0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x62,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x62, 0x0a, 0x1a, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x73, 0x69, 0x6d,
	0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xbf, 0x01, 0x0a,
	0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x48,
	0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0b, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x52, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0xa8,
	0x01, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x09,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x19, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x65, 0x73, 0x74, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x78, 0x0a, 0x1d, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x1b,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x14,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x48, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0b, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x46, 0x0a, 0x0b, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x73, 0x22, 0x20, 0x0a, 0x0a, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xd8, 0x01, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x54, 0x0a, 0x10, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x41, 0x57, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x61, 0x77, 0x12, 0x63, 0x0a, 0x15, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x13, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x65, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xf3,
	0x01, 0x0a, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x41,
	0x57, 0x12, 0x43, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x74, 0x5f, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x69, 0x74, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x12, 0x42, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09, 0x62, 0x79,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x22, 0x1b, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x76, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x0f, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x2a, 0x60, 0x0a,
	0x09, 0x42, 0x79, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x59,
	0x54, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x49,
	0x41, 0x4e, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x42, 0x49, 0x47, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x10, 0x02, 0x2a,
	0xb8, 0x01, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55,
	0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x55, 0x44,
	0x49, 0x4f, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x45, 0x45, 0x45,
	0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x55, 0x44, 0x49,
	0x4f, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4c, 0x41, 0x57, 0x10,
	0x04, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x41, 0x57, 0x10, 0x05, 0x2a, 0xbe, 0x01, 0x0a, 0x13, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x55, 0x44,
	0x49, 0x4f, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52,
	0x45, 0x44, 0x5f, 0x57, 0x41, 0x56, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x55, 0x44, 0x49,
	0x4f, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x45,
	0x44, 0x5f, 0x4d, 0x50, 0x33, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x55, 0x44, 0x49, 0x4f,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x45, 0x44,
	0x5f, 0x46, 0x4c, 0x41, 0x43, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x55, 0x44, 0x49, 0x4f,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x45, 0x44,
	0x5f, 0x4f, 0x47, 0x47, 0x5f, 0x4f, 0x50, 0x55, 0x53, 0x10, 0x04, 0x32, 0xd9, 0x04, 0x0a, 0x0f,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x60, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x62,
	0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x62,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x69, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12,
	0x2b, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x0f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x12,
	0x30, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x7a, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x30, 0x2e, 0x63, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x12, 0x80, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x62,
	0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x62,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x42, 0xf8, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x62, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x62,
	0x69, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2f, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x62, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x56, 0x58, 0xaa, 0x02, 0x18, 0x43, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x18, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x5c, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x24, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5c, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x62, 0x69, 0x6f, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x3a, 0x3a, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x62, 0x69, 0x6f, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescOnce sync.Once
	file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescData = file_cobaltspeech_voicebio_v1_voicebio_proto_rawDesc
)

func file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescGZIP() []byte {
	file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescOnce.Do(func() {
		file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescData = protoimpl.X.CompressGZIP(file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescData)
	})
	return file_cobaltspeech_voicebio_v1_voicebio_proto_rawDescData
}

var file_cobaltspeech_voicebio_v1_voicebio_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_cobaltspeech_voicebio_v1_voicebio_proto_goTypes = []any{
	(ByteOrder)(0),                     // 0: cobaltspeech.voicebio.v1.ByteOrder
	(AudioEncoding)(0),                 // 1: cobaltspeech.voicebio.v1.AudioEncoding
	(AudioFormatHeadered)(0),           // 2: cobaltspeech.voicebio.v1.AudioFormatHeadered
	(*VersionRequest)(nil),             // 3: cobaltspeech.voicebio.v1.VersionRequest
	(*VersionResponse)(nil),            // 4: cobaltspeech.voicebio.v1.VersionResponse
	(*ListModelsRequest)(nil),          // 5: cobaltspeech.voicebio.v1.ListModelsRequest
	(*ListModelsResponse)(nil),         // 6: cobaltspeech.voicebio.v1.ListModelsResponse
	(*StreamingEnrollRequest)(nil),     // 7: cobaltspeech.voicebio.v1.StreamingEnrollRequest
	(*StreamingEnrollResponse)(nil),    // 8: cobaltspeech.voicebio.v1.StreamingEnrollResponse
	(*EnrollmentConfig)(nil),           // 9: cobaltspeech.voicebio.v1.EnrollmentConfig
	(*EnrollmentStatus)(nil),           // 10: cobaltspeech.voicebio.v1.EnrollmentStatus
	(*StreamingVerifyRequest)(nil),     // 11: cobaltspeech.voicebio.v1.StreamingVerifyRequest
	(*StreamingVerifyResponse)(nil),    // 12: cobaltspeech.voicebio.v1.StreamingVerifyResponse
	(*VoiceprintComparisonResult)(nil), // 13: cobaltspeech.voicebio.v1.VoiceprintComparisonResult
	(*VerificationConfig)(nil),         // 14: cobaltspeech.voicebio.v1.VerificationConfig
	(*StreamingIdentifyRequest)(nil),   // 15: cobaltspeech.voicebio.v1.StreamingIdentifyRequest
	(*StreamingIdentifyResponse)(nil),  // 16: cobaltspeech.voicebio.v1.StreamingIdentifyResponse
	(*IdentificationConfig)(nil),       // 17: cobaltspeech.voicebio.v1.IdentificationConfig
	(*Voiceprint)(nil),                 // 18: cobaltspeech.voicebio.v1.Voiceprint
	(*AudioFormat)(nil),                // 19: cobaltspeech.voicebio.v1.AudioFormat
	(*AudioFormatRAW)(nil),             // 20: cobaltspeech.voicebio.v1.AudioFormatRAW
	(*Audio)(nil),                      // 21: cobaltspeech.voicebio.v1.Audio
	(*Model)(nil),                      // 22: cobaltspeech.voicebio.v1.Model
	(*ModelAttributes)(nil),            // 23: cobaltspeech.voicebio.v1.ModelAttributes
}
var file_cobaltspeech_voicebio_v1_voicebio_proto_depIdxs = []int32{
	22, // 0: cobaltspeech.voicebio.v1.ListModelsResponse.models:type_name -> cobaltspeech.voicebio.v1.Model
	9,  // 1: cobaltspeech.voicebio.v1.StreamingEnrollRequest.config:type_name -> cobaltspeech.voicebio.v1.EnrollmentConfig
	21, // 2: cobaltspeech.voicebio.v1.StreamingEnrollRequest.audio:type_name -> cobaltspeech.voicebio.v1.Audio
	18, // 3: cobaltspeech.voicebio.v1.StreamingEnrollResponse.voiceprint:type_name -> cobaltspeech.voicebio.v1.Voiceprint
	10, // 4: cobaltspeech.voicebio.v1.StreamingEnrollResponse.enrollment_status:type_name -> cobaltspeech.voicebio.v1.EnrollmentStatus
	19, // 5: cobaltspeech.voicebio.v1.EnrollmentConfig.audio_format:type_name -> cobaltspeech.voicebio.v1.AudioFormat
	18, // 6: cobaltspeech.voicebio.v1.EnrollmentConfig.previous_voiceprint:type_name -> cobaltspeech.voicebio.v1.Voiceprint
	14, // 7: cobaltspeech.voicebio.v1.StreamingVerifyRequest.config:type_name -> cobaltspeech.voicebio.v1.VerificationConfig
	21, // 8: cobaltspeech.voicebio.v1.StreamingVerifyRequest.audio:type_name -> cobaltspeech.voicebio.v1.Audio
	13, // 9: cobaltspeech.voicebio.v1.StreamingVerifyResponse.result:type_name -> cobaltspeech.voicebio.v1.VoiceprintComparisonResult
	19, // 10: cobaltspeech.voicebio.v1.VerificationConfig.audio_format:type_name -> cobaltspeech.voicebio.v1.AudioFormat
	18, // 11: cobaltspeech.voicebio.v1.VerificationConfig.voiceprint:type_name -> cobaltspeech.voicebio.v1.Voiceprint
	17, // 12: cobaltspeech.voicebio.v1.StreamingIdentifyRequest.config:type_name -> cobaltspeech.voicebio.v1.IdentificationConfig
	21, // 13: cobaltspeech.voicebio.v1.StreamingIdentifyRequest.audio:type_name -> cobaltspeech.voicebio.v1.Audio
	13, // 14: cobaltspeech.voicebio.v1.StreamingIdentifyResponse.voiceprint_comparison_results:type_name -> cobaltspeech.voicebio.v1.VoiceprintComparisonResult
	19, // 15: cobaltspeech.voicebio.v1.IdentificationConfig.audio_format:type_name -> cobaltspeech.voicebio.v1.AudioFormat
	18, // 16: cobaltspeech.voicebio.v1.IdentificationConfig.voiceprints:type_name -> cobaltspeech.voicebio.v1.Voiceprint
	20, // 17: cobaltspeech.voicebio.v1.AudioFormat.audio_format_raw:type_name -> cobaltspeech.voicebio.v1.AudioFormatRAW
	2,  // 18: cobaltspeech.voicebio.v1.AudioFormat.audio_format_headered:type_name -> cobaltspeech.voicebio.v1.AudioFormatHeadered
	1,  // 19: cobaltspeech.voicebio.v1.AudioFormatRAW.encoding:type_name -> cobaltspeech.voicebio.v1.AudioEncoding
	0,  // 20: cobaltspeech.voicebio.v1.AudioFormatRAW.byte_order:type_name -> cobaltspeech.voicebio.v1.ByteOrder
	23, // 21: cobaltspeech.voicebio.v1.Model.attributes:type_name -> cobaltspeech.voicebio.v1.ModelAttributes
	3,  // 22: cobaltspeech.voicebio.v1.VoiceBioService.Version:input_type -> cobaltspeech.voicebio.v1.VersionRequest
	5,  // 23: cobaltspeech.voicebio.v1.VoiceBioService.ListModels:input_type -> cobaltspeech.voicebio.v1.ListModelsRequest
	7,  // 24: cobaltspeech.voicebio.v1.VoiceBioService.StreamingEnroll:input_type -> cobaltspeech.voicebio.v1.StreamingEnrollRequest
	11, // 25: cobaltspeech.voicebio.v1.VoiceBioService.StreamingVerify:input_type -> cobaltspeech.voicebio.v1.StreamingVerifyRequest
	15, // 26: cobaltspeech.voicebio.v1.VoiceBioService.StreamingIdentify:input_type -> cobaltspeech.voicebio.v1.StreamingIdentifyRequest
	4,  // 27: cobaltspeech.voicebio.v1.VoiceBioService.Version:output_type -> cobaltspeech.voicebio.v1.VersionResponse
	6,  // 28: cobaltspeech.voicebio.v1.VoiceBioService.ListModels:output_type -> cobaltspeech.voicebio.v1.ListModelsResponse
	8,  // 29: cobaltspeech.voicebio.v1.VoiceBioService.StreamingEnroll:output_type -> cobaltspeech.voicebio.v1.StreamingEnrollResponse
	12, // 30: cobaltspeech.voicebio.v1.VoiceBioService.StreamingVerify:output_type -> cobaltspeech.voicebio.v1.StreamingVerifyResponse
	16, // 31: cobaltspeech.voicebio.v1.VoiceBioService.StreamingIdentify:output_type -> cobaltspeech.voicebio.v1.StreamingIdentifyResponse
	27, // [27:32] is the sub-list for method output_type
	22, // [22:27] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_cobaltspeech_voicebio_v1_voicebio_proto_init() }
func file_cobaltspeech_voicebio_v1_voicebio_proto_init() {
	if File_cobaltspeech_voicebio_v1_voicebio_proto != nil {
		return
	}
	file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[4].OneofWrappers = []any{
		(*StreamingEnrollRequest_Config)(nil),
		(*StreamingEnrollRequest_Audio)(nil),
	}
	file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[8].OneofWrappers = []any{
		(*StreamingVerifyRequest_Config)(nil),
		(*StreamingVerifyRequest_Audio)(nil),
	}
	file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[12].OneofWrappers = []any{
		(*StreamingIdentifyRequest_Config)(nil),
		(*StreamingIdentifyRequest_Audio)(nil),
	}
	file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes[16].OneofWrappers = []any{
		(*AudioFormat_AudioFormatRaw)(nil),
		(*AudioFormat_AudioFormatHeadered)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cobaltspeech_voicebio_v1_voicebio_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cobaltspeech_voicebio_v1_voicebio_proto_goTypes,
		DependencyIndexes: file_cobaltspeech_voicebio_v1_voicebio_proto_depIdxs,
		EnumInfos:         file_cobaltspeech_voicebio_v1_voicebio_proto_enumTypes,
		MessageInfos:      file_cobaltspeech_voicebio_v1_voicebio_proto_msgTypes,
	}.Build()
	File_cobaltspeech_voicebio_v1_voicebio_proto = out.File
	file_cobaltspeech_voicebio_v1_voicebio_proto_rawDesc = nil
	file_cobaltspeech_voicebio_v1_voicebio_proto_goTypes = nil
	file_cobaltspeech_voicebio_v1_voicebio_proto_depIdxs = nil
}
