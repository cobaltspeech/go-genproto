// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: cobaltspeech/cubic/v5/cubic.proto

package cubicv5

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CubicServiceClient is the client API for CubicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CubicServiceClient interface {
	// Queries the version of the server.
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	// Retrieves a list of available speech recognition models.
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	// Performs bidirectional streaming speech recognition. Receive results while
	// sending audio. This method is only available via GRPC and not via
	// HTTP+JSON. However, a web browser may use websockets to use this service.
	StreamingRecognize(ctx context.Context, opts ...grpc.CallOption) (CubicService_StreamingRecognizeClient, error)
	// Compiles recognition context information, such as a specialized list of
	// words or phrases, into a compact, efficient form to send with subsequent
	// `StreamingRecognize` requests to customize speech recognition. For example,
	// a list of contact names may be compiled in a mobile app and sent with each
	// recognition request so that the app user's contact names are more likely to
	// be recognized than arbitrary names. This pre-compilation ensures that there
	// is no added latency for the recognition request. It is important to note
	// that in order to compile context for a model, that model has to support
	// context in the first place, which can be verified by checking its
	// `ModelAttributes.ContextInfo` obtained via the `ListModels` method. Also,
	// the compiled data will be model specific; that is, the data compiled for
	// one model will generally not be usable with a different model.
	CompileContext(ctx context.Context, in *CompileContextRequest, opts ...grpc.CallOption) (*CompileContextResponse, error)
}

type cubicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCubicServiceClient(cc grpc.ClientConnInterface) CubicServiceClient {
	return &cubicServiceClient{cc}
}

func (c *cubicServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/cobaltspeech.cubic.v5.CubicService/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubicServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, "/cobaltspeech.cubic.v5.CubicService/ListModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubicServiceClient) StreamingRecognize(ctx context.Context, opts ...grpc.CallOption) (CubicService_StreamingRecognizeClient, error) {
	stream, err := c.cc.NewStream(ctx, &CubicService_ServiceDesc.Streams[0], "/cobaltspeech.cubic.v5.CubicService/StreamingRecognize", opts...)
	if err != nil {
		return nil, err
	}
	x := &cubicServiceStreamingRecognizeClient{stream}
	return x, nil
}

type CubicService_StreamingRecognizeClient interface {
	Send(*StreamingRecognizeRequest) error
	Recv() (*StreamingRecognizeResponse, error)
	grpc.ClientStream
}

type cubicServiceStreamingRecognizeClient struct {
	grpc.ClientStream
}

func (x *cubicServiceStreamingRecognizeClient) Send(m *StreamingRecognizeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cubicServiceStreamingRecognizeClient) Recv() (*StreamingRecognizeResponse, error) {
	m := new(StreamingRecognizeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cubicServiceClient) CompileContext(ctx context.Context, in *CompileContextRequest, opts ...grpc.CallOption) (*CompileContextResponse, error) {
	out := new(CompileContextResponse)
	err := c.cc.Invoke(ctx, "/cobaltspeech.cubic.v5.CubicService/CompileContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CubicServiceServer is the server API for CubicService service.
// All implementations must embed UnimplementedCubicServiceServer
// for forward compatibility
type CubicServiceServer interface {
	// Queries the version of the server.
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	// Retrieves a list of available speech recognition models.
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// Performs bidirectional streaming speech recognition. Receive results while
	// sending audio. This method is only available via GRPC and not via
	// HTTP+JSON. However, a web browser may use websockets to use this service.
	StreamingRecognize(CubicService_StreamingRecognizeServer) error
	// Compiles recognition context information, such as a specialized list of
	// words or phrases, into a compact, efficient form to send with subsequent
	// `StreamingRecognize` requests to customize speech recognition. For example,
	// a list of contact names may be compiled in a mobile app and sent with each
	// recognition request so that the app user's contact names are more likely to
	// be recognized than arbitrary names. This pre-compilation ensures that there
	// is no added latency for the recognition request. It is important to note
	// that in order to compile context for a model, that model has to support
	// context in the first place, which can be verified by checking its
	// `ModelAttributes.ContextInfo` obtained via the `ListModels` method. Also,
	// the compiled data will be model specific; that is, the data compiled for
	// one model will generally not be usable with a different model.
	CompileContext(context.Context, *CompileContextRequest) (*CompileContextResponse, error)
	mustEmbedUnimplementedCubicServiceServer()
}

// UnimplementedCubicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCubicServiceServer struct {
}

func (UnimplementedCubicServiceServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedCubicServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedCubicServiceServer) StreamingRecognize(CubicService_StreamingRecognizeServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingRecognize not implemented")
}
func (UnimplementedCubicServiceServer) CompileContext(context.Context, *CompileContextRequest) (*CompileContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompileContext not implemented")
}
func (UnimplementedCubicServiceServer) mustEmbedUnimplementedCubicServiceServer() {}

// UnsafeCubicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CubicServiceServer will
// result in compilation errors.
type UnsafeCubicServiceServer interface {
	mustEmbedUnimplementedCubicServiceServer()
}

func RegisterCubicServiceServer(s grpc.ServiceRegistrar, srv CubicServiceServer) {
	s.RegisterService(&CubicService_ServiceDesc, srv)
}

func _CubicService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubicServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cobaltspeech.cubic.v5.CubicService/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubicServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubicService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubicServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cobaltspeech.cubic.v5.CubicService/ListModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubicServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubicService_StreamingRecognize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CubicServiceServer).StreamingRecognize(&cubicServiceStreamingRecognizeServer{stream})
}

type CubicService_StreamingRecognizeServer interface {
	Send(*StreamingRecognizeResponse) error
	Recv() (*StreamingRecognizeRequest, error)
	grpc.ServerStream
}

type cubicServiceStreamingRecognizeServer struct {
	grpc.ServerStream
}

func (x *cubicServiceStreamingRecognizeServer) Send(m *StreamingRecognizeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cubicServiceStreamingRecognizeServer) Recv() (*StreamingRecognizeRequest, error) {
	m := new(StreamingRecognizeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CubicService_CompileContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompileContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubicServiceServer).CompileContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cobaltspeech.cubic.v5.CubicService/CompileContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubicServiceServer).CompileContext(ctx, req.(*CompileContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CubicService_ServiceDesc is the grpc.ServiceDesc for CubicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CubicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cobaltspeech.cubic.v5.CubicService",
	HandlerType: (*CubicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _CubicService_Version_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _CubicService_ListModels_Handler,
		},
		{
			MethodName: "CompileContext",
			Handler:    _CubicService_CompileContext_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingRecognize",
			Handler:       _CubicService_StreamingRecognize_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cobaltspeech/cubic/v5/cubic.proto",
}
