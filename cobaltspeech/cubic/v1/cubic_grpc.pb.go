// Copyright (2019--present) Cobalt Speech and Language Inc.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cobaltspeech/cubic/v1/cubic.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Cubic_Version_FullMethodName            = "/cobaltspeech.cubic.Cubic/Version"
	Cubic_ListModels_FullMethodName         = "/cobaltspeech.cubic.Cubic/ListModels"
	Cubic_Recognize_FullMethodName          = "/cobaltspeech.cubic.Cubic/Recognize"
	Cubic_StreamingRecognize_FullMethodName = "/cobaltspeech.cubic.Cubic/StreamingRecognize"
	Cubic_CompileContext_FullMethodName     = "/cobaltspeech.cubic.Cubic/CompileContext"
)

// CubicClient is the client API for Cubic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service that implements the Cobalt Cubic Speech Recognition API
type CubicClient interface {
	// Queries the Version of the Server
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	// Retrieves a list of available speech recognition models
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	// Performs synchronous speech recognition: receive results after all audio
	// has been sent and processed.  It is expected that this request be typically
	// used for short audio content: less than a minute long.  For longer content,
	// the `StreamingRecognize` method should be preferred.
	Recognize(ctx context.Context, in *RecognizeRequest, opts ...grpc.CallOption) (*RecognitionResponse, error)
	// Performs bidirectional streaming speech recognition.  Receive results while
	// sending audio.  This method is only available via GRPC and not via
	// HTTP+JSON. However, a web browser may use websockets to use this service.
	StreamingRecognize(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamingRecognizeRequest, RecognitionResponse], error)
	// Compiles recognition context information, such as a specialized list of
	// words or phrases, into a compact, efficient form to send with subsequent
	// `Recognize` or `StreamingRecognize` requests to customize speech
	// recognition. For example, a list of contact names may be compiled in a
	// mobile app and sent with each recognition request so that the app user's
	// contact names are more likely to be recognized than arbitrary names. This
	// pre-compilation ensures that there is no added latency for the recognition
	// request. It is important to note that in order to compile context for a
	// model, that model has to support context in the first place, which can be
	// verified by checking its `ModelAttributes.ContextInfo` obtained via the
	// `ListModels` method. Also, the compiled data will be model specific; that
	// is, the data compiled for one model will generally not be usable with a
	// different model.
	CompileContext(ctx context.Context, in *CompileContextRequest, opts ...grpc.CallOption) (*CompileContextResponse, error)
}

type cubicClient struct {
	cc grpc.ClientConnInterface
}

func NewCubicClient(cc grpc.ClientConnInterface) CubicClient {
	return &cubicClient{cc}
}

func (c *cubicClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, Cubic_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubicClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, Cubic_ListModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubicClient) Recognize(ctx context.Context, in *RecognizeRequest, opts ...grpc.CallOption) (*RecognitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecognitionResponse)
	err := c.cc.Invoke(ctx, Cubic_Recognize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubicClient) StreamingRecognize(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamingRecognizeRequest, RecognitionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cubic_ServiceDesc.Streams[0], Cubic_StreamingRecognize_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamingRecognizeRequest, RecognitionResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Cubic_StreamingRecognizeClient = grpc.BidiStreamingClient[StreamingRecognizeRequest, RecognitionResponse]

func (c *cubicClient) CompileContext(ctx context.Context, in *CompileContextRequest, opts ...grpc.CallOption) (*CompileContextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompileContextResponse)
	err := c.cc.Invoke(ctx, Cubic_CompileContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CubicServer is the server API for Cubic service.
// All implementations must embed UnimplementedCubicServer
// for forward compatibility.
//
// Service that implements the Cobalt Cubic Speech Recognition API
type CubicServer interface {
	// Queries the Version of the Server
	Version(context.Context, *emptypb.Empty) (*VersionResponse, error)
	// Retrieves a list of available speech recognition models
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// Performs synchronous speech recognition: receive results after all audio
	// has been sent and processed.  It is expected that this request be typically
	// used for short audio content: less than a minute long.  For longer content,
	// the `StreamingRecognize` method should be preferred.
	Recognize(context.Context, *RecognizeRequest) (*RecognitionResponse, error)
	// Performs bidirectional streaming speech recognition.  Receive results while
	// sending audio.  This method is only available via GRPC and not via
	// HTTP+JSON. However, a web browser may use websockets to use this service.
	StreamingRecognize(grpc.BidiStreamingServer[StreamingRecognizeRequest, RecognitionResponse]) error
	// Compiles recognition context information, such as a specialized list of
	// words or phrases, into a compact, efficient form to send with subsequent
	// `Recognize` or `StreamingRecognize` requests to customize speech
	// recognition. For example, a list of contact names may be compiled in a
	// mobile app and sent with each recognition request so that the app user's
	// contact names are more likely to be recognized than arbitrary names. This
	// pre-compilation ensures that there is no added latency for the recognition
	// request. It is important to note that in order to compile context for a
	// model, that model has to support context in the first place, which can be
	// verified by checking its `ModelAttributes.ContextInfo` obtained via the
	// `ListModels` method. Also, the compiled data will be model specific; that
	// is, the data compiled for one model will generally not be usable with a
	// different model.
	CompileContext(context.Context, *CompileContextRequest) (*CompileContextResponse, error)
	mustEmbedUnimplementedCubicServer()
}

// UnimplementedCubicServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCubicServer struct{}

func (UnimplementedCubicServer) Version(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedCubicServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedCubicServer) Recognize(context.Context, *RecognizeRequest) (*RecognitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recognize not implemented")
}
func (UnimplementedCubicServer) StreamingRecognize(grpc.BidiStreamingServer[StreamingRecognizeRequest, RecognitionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamingRecognize not implemented")
}
func (UnimplementedCubicServer) CompileContext(context.Context, *CompileContextRequest) (*CompileContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompileContext not implemented")
}
func (UnimplementedCubicServer) mustEmbedUnimplementedCubicServer() {}
func (UnimplementedCubicServer) testEmbeddedByValue()               {}

// UnsafeCubicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CubicServer will
// result in compilation errors.
type UnsafeCubicServer interface {
	mustEmbedUnimplementedCubicServer()
}

func RegisterCubicServer(s grpc.ServiceRegistrar, srv CubicServer) {
	// If the following call pancis, it indicates UnimplementedCubicServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Cubic_ServiceDesc, srv)
}

func _Cubic_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubicServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cubic_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubicServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cubic_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubicServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cubic_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubicServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cubic_Recognize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecognizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubicServer).Recognize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cubic_Recognize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubicServer).Recognize(ctx, req.(*RecognizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cubic_StreamingRecognize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CubicServer).StreamingRecognize(&grpc.GenericServerStream[StreamingRecognizeRequest, RecognitionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Cubic_StreamingRecognizeServer = grpc.BidiStreamingServer[StreamingRecognizeRequest, RecognitionResponse]

func _Cubic_CompileContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompileContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubicServer).CompileContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cubic_CompileContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubicServer).CompileContext(ctx, req.(*CompileContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cubic_ServiceDesc is the grpc.ServiceDesc for Cubic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cubic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cobaltspeech.cubic.Cubic",
	HandlerType: (*CubicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Cubic_Version_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _Cubic_ListModels_Handler,
		},
		{
			MethodName: "Recognize",
			Handler:    _Cubic_Recognize_Handler,
		},
		{
			MethodName: "CompileContext",
			Handler:    _Cubic_CompileContext_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingRecognize",
			Handler:       _Cubic_StreamingRecognize_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cobaltspeech/cubic/v1/cubic.proto",
}
