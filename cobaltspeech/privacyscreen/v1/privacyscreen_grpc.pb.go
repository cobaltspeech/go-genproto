// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: cobaltspeech/privacyscreen/v1/privacyscreen.proto

package privacyscreenv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrivacyScreenServiceClient is the client API for PrivacyScreenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrivacyScreenServiceClient interface {
	// Returns version information from the server.
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	// ListModels returns information about the models the server can access.
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	// redacts transcript using a redaction engine that is configured with the
	// provided redaction configuration.
	RedactTranscript(ctx context.Context, in *RedactTranscriptRequest, opts ...grpc.CallOption) (*RedactTranscriptResponse, error)
	// Performs bidirectional streaming redaction on transcribed audio. Receive
	// redacted audio while sending audio. The transcription of audio data must be
	// ready before sending the audio.
	StreamingRedactTranscribedAudio(ctx context.Context, opts ...grpc.CallOption) (PrivacyScreenService_StreamingRedactTranscribedAudioClient, error)
	// Performs bidirectional streaming speech recognition and redaction. Receive
	// redacted audio and transcriptions while sending audio.
	StreamingTranscribeAndRedact(ctx context.Context, opts ...grpc.CallOption) (PrivacyScreenService_StreamingTranscribeAndRedactClient, error)
}

type privacyScreenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrivacyScreenServiceClient(cc grpc.ClientConnInterface) PrivacyScreenServiceClient {
	return &privacyScreenServiceClient{cc}
}

func (c *privacyScreenServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/cobaltspeech.privacyscreen.v1.PrivacyScreenService/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privacyScreenServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, "/cobaltspeech.privacyscreen.v1.PrivacyScreenService/ListModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privacyScreenServiceClient) RedactTranscript(ctx context.Context, in *RedactTranscriptRequest, opts ...grpc.CallOption) (*RedactTranscriptResponse, error) {
	out := new(RedactTranscriptResponse)
	err := c.cc.Invoke(ctx, "/cobaltspeech.privacyscreen.v1.PrivacyScreenService/RedactTranscript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privacyScreenServiceClient) StreamingRedactTranscribedAudio(ctx context.Context, opts ...grpc.CallOption) (PrivacyScreenService_StreamingRedactTranscribedAudioClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrivacyScreenService_ServiceDesc.Streams[0], "/cobaltspeech.privacyscreen.v1.PrivacyScreenService/StreamingRedactTranscribedAudio", opts...)
	if err != nil {
		return nil, err
	}
	x := &privacyScreenServiceStreamingRedactTranscribedAudioClient{stream}
	return x, nil
}

type PrivacyScreenService_StreamingRedactTranscribedAudioClient interface {
	Send(*StreamingRedactTranscribedAudioRequest) error
	Recv() (*StreamingRedactTranscribedAudioResponse, error)
	grpc.ClientStream
}

type privacyScreenServiceStreamingRedactTranscribedAudioClient struct {
	grpc.ClientStream
}

func (x *privacyScreenServiceStreamingRedactTranscribedAudioClient) Send(m *StreamingRedactTranscribedAudioRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *privacyScreenServiceStreamingRedactTranscribedAudioClient) Recv() (*StreamingRedactTranscribedAudioResponse, error) {
	m := new(StreamingRedactTranscribedAudioResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *privacyScreenServiceClient) StreamingTranscribeAndRedact(ctx context.Context, opts ...grpc.CallOption) (PrivacyScreenService_StreamingTranscribeAndRedactClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrivacyScreenService_ServiceDesc.Streams[1], "/cobaltspeech.privacyscreen.v1.PrivacyScreenService/StreamingTranscribeAndRedact", opts...)
	if err != nil {
		return nil, err
	}
	x := &privacyScreenServiceStreamingTranscribeAndRedactClient{stream}
	return x, nil
}

type PrivacyScreenService_StreamingTranscribeAndRedactClient interface {
	Send(*StreamingTranscribeAndRedactRequest) error
	Recv() (*StreamingTranscribeAndRedactResponse, error)
	grpc.ClientStream
}

type privacyScreenServiceStreamingTranscribeAndRedactClient struct {
	grpc.ClientStream
}

func (x *privacyScreenServiceStreamingTranscribeAndRedactClient) Send(m *StreamingTranscribeAndRedactRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *privacyScreenServiceStreamingTranscribeAndRedactClient) Recv() (*StreamingTranscribeAndRedactResponse, error) {
	m := new(StreamingTranscribeAndRedactResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrivacyScreenServiceServer is the server API for PrivacyScreenService service.
// All implementations must embed UnimplementedPrivacyScreenServiceServer
// for forward compatibility
type PrivacyScreenServiceServer interface {
	// Returns version information from the server.
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	// ListModels returns information about the models the server can access.
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// redacts transcript using a redaction engine that is configured with the
	// provided redaction configuration.
	RedactTranscript(context.Context, *RedactTranscriptRequest) (*RedactTranscriptResponse, error)
	// Performs bidirectional streaming redaction on transcribed audio. Receive
	// redacted audio while sending audio. The transcription of audio data must be
	// ready before sending the audio.
	StreamingRedactTranscribedAudio(PrivacyScreenService_StreamingRedactTranscribedAudioServer) error
	// Performs bidirectional streaming speech recognition and redaction. Receive
	// redacted audio and transcriptions while sending audio.
	StreamingTranscribeAndRedact(PrivacyScreenService_StreamingTranscribeAndRedactServer) error
	mustEmbedUnimplementedPrivacyScreenServiceServer()
}

// UnimplementedPrivacyScreenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPrivacyScreenServiceServer struct {
}

func (UnimplementedPrivacyScreenServiceServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedPrivacyScreenServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedPrivacyScreenServiceServer) RedactTranscript(context.Context, *RedactTranscriptRequest) (*RedactTranscriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedactTranscript not implemented")
}
func (UnimplementedPrivacyScreenServiceServer) StreamingRedactTranscribedAudio(PrivacyScreenService_StreamingRedactTranscribedAudioServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingRedactTranscribedAudio not implemented")
}
func (UnimplementedPrivacyScreenServiceServer) StreamingTranscribeAndRedact(PrivacyScreenService_StreamingTranscribeAndRedactServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingTranscribeAndRedact not implemented")
}
func (UnimplementedPrivacyScreenServiceServer) mustEmbedUnimplementedPrivacyScreenServiceServer() {}

// UnsafePrivacyScreenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrivacyScreenServiceServer will
// result in compilation errors.
type UnsafePrivacyScreenServiceServer interface {
	mustEmbedUnimplementedPrivacyScreenServiceServer()
}

func RegisterPrivacyScreenServiceServer(s grpc.ServiceRegistrar, srv PrivacyScreenServiceServer) {
	s.RegisterService(&PrivacyScreenService_ServiceDesc, srv)
}

func _PrivacyScreenService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivacyScreenServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cobaltspeech.privacyscreen.v1.PrivacyScreenService/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivacyScreenServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivacyScreenService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivacyScreenServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cobaltspeech.privacyscreen.v1.PrivacyScreenService/ListModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivacyScreenServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivacyScreenService_RedactTranscript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedactTranscriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivacyScreenServiceServer).RedactTranscript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cobaltspeech.privacyscreen.v1.PrivacyScreenService/RedactTranscript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivacyScreenServiceServer).RedactTranscript(ctx, req.(*RedactTranscriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivacyScreenService_StreamingRedactTranscribedAudio_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PrivacyScreenServiceServer).StreamingRedactTranscribedAudio(&privacyScreenServiceStreamingRedactTranscribedAudioServer{stream})
}

type PrivacyScreenService_StreamingRedactTranscribedAudioServer interface {
	Send(*StreamingRedactTranscribedAudioResponse) error
	Recv() (*StreamingRedactTranscribedAudioRequest, error)
	grpc.ServerStream
}

type privacyScreenServiceStreamingRedactTranscribedAudioServer struct {
	grpc.ServerStream
}

func (x *privacyScreenServiceStreamingRedactTranscribedAudioServer) Send(m *StreamingRedactTranscribedAudioResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *privacyScreenServiceStreamingRedactTranscribedAudioServer) Recv() (*StreamingRedactTranscribedAudioRequest, error) {
	m := new(StreamingRedactTranscribedAudioRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PrivacyScreenService_StreamingTranscribeAndRedact_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PrivacyScreenServiceServer).StreamingTranscribeAndRedact(&privacyScreenServiceStreamingTranscribeAndRedactServer{stream})
}

type PrivacyScreenService_StreamingTranscribeAndRedactServer interface {
	Send(*StreamingTranscribeAndRedactResponse) error
	Recv() (*StreamingTranscribeAndRedactRequest, error)
	grpc.ServerStream
}

type privacyScreenServiceStreamingTranscribeAndRedactServer struct {
	grpc.ServerStream
}

func (x *privacyScreenServiceStreamingTranscribeAndRedactServer) Send(m *StreamingTranscribeAndRedactResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *privacyScreenServiceStreamingTranscribeAndRedactServer) Recv() (*StreamingTranscribeAndRedactRequest, error) {
	m := new(StreamingTranscribeAndRedactRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrivacyScreenService_ServiceDesc is the grpc.ServiceDesc for PrivacyScreenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrivacyScreenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cobaltspeech.privacyscreen.v1.PrivacyScreenService",
	HandlerType: (*PrivacyScreenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _PrivacyScreenService_Version_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _PrivacyScreenService_ListModels_Handler,
		},
		{
			MethodName: "RedactTranscript",
			Handler:    _PrivacyScreenService_RedactTranscript_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingRedactTranscribedAudio",
			Handler:       _PrivacyScreenService_StreamingRedactTranscribedAudio_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamingTranscribeAndRedact",
			Handler:       _PrivacyScreenService_StreamingTranscribeAndRedact_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cobaltspeech/privacyscreen/v1/privacyscreen.proto",
}
