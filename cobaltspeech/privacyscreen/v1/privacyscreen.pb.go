// Copyright (2023--present) Cobalt Speech and Language Inc.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: cobaltspeech/privacyscreen/v1/privacyscreen.proto

package privacyscreenv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The top-level message sent by the client for the `Version` method.
type VersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP(), []int{0}
}

// The top-level message sent by the server for the `Version` method.
type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the server handling these requests.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP(), []int{1}
}

func (x *VersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// The top-level message sent by the client for the `ListModels` method.
type ListModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListModelsRequest) Reset() {
	*x = ListModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsRequest) ProtoMessage() {}

func (x *ListModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsRequest.ProtoReflect.Descriptor instead.
func (*ListModelsRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP(), []int{2}
}

// The message returned to the client by the `ListModels` method.
type ListModelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of models available for use on Privacy Screen server.
	Models []*ModelInfo `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"`
}

func (x *ListModelsResponse) Reset() {
	*x = ListModelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsResponse) ProtoMessage() {}

func (x *ListModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsResponse.ProtoReflect.Descriptor instead.
func (*ListModelsResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP(), []int{3}
}

func (x *ListModelsResponse) GetModels() []*ModelInfo {
	if x != nil {
		return x.Models
	}
	return nil
}

// The top-level messages sent by the client for the `RedactText`
// method. Contains redaction config and text to redact.
type RedactTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// redaction config
	Config *RedactionConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// text to redact
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *RedactTextRequest) Reset() {
	*x = RedactTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedactTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedactTextRequest) ProtoMessage() {}

func (x *RedactTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedactTextRequest.ProtoReflect.Descriptor instead.
func (*RedactTextRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP(), []int{4}
}

func (x *RedactTextRequest) GetConfig() *RedactionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RedactTextRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// The top-level message sent by the server for the `RedactText`
// method.
type RedactTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Full redacted text.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// A list contains redacted tokens corresponding to the full text.
	RedactedTokens []*RedactedToken `protobuf:"bytes,2,rep,name=redacted_tokens,json=redactedTokens,proto3" json:"redacted_tokens,omitempty"`
}

func (x *RedactTextResponse) Reset() {
	*x = RedactTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedactTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedactTextResponse) ProtoMessage() {}

func (x *RedactTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedactTextResponse.ProtoReflect.Descriptor instead.
func (*RedactTextResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP(), []int{5}
}

func (x *RedactTextResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *RedactTextResponse) GetRedactedTokens() []*RedactedToken {
	if x != nil {
		return x.RedactedTokens
	}
	return nil
}

// The top-level messages sent by the client for the `RedactTranscript`
// method. Contains redaction config and a transcription to redact.
type RedactTranscriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// redaction config
	Config *RedactionConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// transcription to redact
	Transcript *Transcript `protobuf:"bytes,2,opt,name=transcript,proto3" json:"transcript,omitempty"`
}

func (x *RedactTranscriptRequest) Reset() {
	*x = RedactTranscriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedactTranscriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedactTranscriptRequest) ProtoMessage() {}

func (x *RedactTranscriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedactTranscriptRequest.ProtoReflect.Descriptor instead.
func (*RedactTranscriptRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP(), []int{6}
}

func (x *RedactTranscriptRequest) GetConfig() *RedactionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RedactTranscriptRequest) GetTranscript() *Transcript {
	if x != nil {
		return x.Transcript
	}
	return nil
}

// The top-level message sent by the server for the `RedactTranscript`
// method. Contains redacted transcript.
type RedactTranscriptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transcript *Transcript `protobuf:"bytes,1,opt,name=transcript,proto3" json:"transcript,omitempty"`
}

func (x *RedactTranscriptResponse) Reset() {
	*x = RedactTranscriptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedactTranscriptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedactTranscriptResponse) ProtoMessage() {}

func (x *RedactTranscriptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedactTranscriptResponse.ProtoReflect.Descriptor instead.
func (*RedactTranscriptResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP(), []int{7}
}

func (x *RedactTranscriptResponse) GetTranscript() *Transcript {
	if x != nil {
		return x.Transcript
	}
	return nil
}

// The top-level messages sent by the client for the `StreamingRedactTranscribedAudio`
// method. In this streaming call, multiple `StreamingRedactTranscribedAudioRequest`
// messages should be sent. The first message must contain a
// `RedactTranscribedAudioConfig` message only and all subsequent messages must
// contain audio data only.
type StreamingRedactTranscribedAudioRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*StreamingRedactTranscribedAudioRequest_Config
	//	*StreamingRedactTranscribedAudioRequest_Audio
	Request isStreamingRedactTranscribedAudioRequest_Request `protobuf_oneof:"request"`
}

func (x *StreamingRedactTranscribedAudioRequest) Reset() {
	*x = StreamingRedactTranscribedAudioRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingRedactTranscribedAudioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingRedactTranscribedAudioRequest) ProtoMessage() {}

func (x *StreamingRedactTranscribedAudioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingRedactTranscribedAudioRequest.ProtoReflect.Descriptor instead.
func (*StreamingRedactTranscribedAudioRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP(), []int{8}
}

func (m *StreamingRedactTranscribedAudioRequest) GetRequest() isStreamingRedactTranscribedAudioRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *StreamingRedactTranscribedAudioRequest) GetConfig() *RedactTranscribedAudioConfig {
	if x, ok := x.GetRequest().(*StreamingRedactTranscribedAudioRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *StreamingRedactTranscribedAudioRequest) GetAudio() []byte {
	if x, ok := x.GetRequest().(*StreamingRedactTranscribedAudioRequest_Audio); ok {
		return x.Audio
	}
	return nil
}

type isStreamingRedactTranscribedAudioRequest_Request interface {
	isStreamingRedactTranscribedAudioRequest_Request()
}

type StreamingRedactTranscribedAudioRequest_Config struct {
	Config *RedactTranscribedAudioConfig `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type StreamingRedactTranscribedAudioRequest_Audio struct {
	Audio []byte `protobuf:"bytes,2,opt,name=audio,proto3,oneof"`
}

func (*StreamingRedactTranscribedAudioRequest_Config) isStreamingRedactTranscribedAudioRequest_Request() {
}

func (*StreamingRedactTranscribedAudioRequest_Audio) isStreamingRedactTranscribedAudioRequest_Request() {
}

// The top-level message sent by the server for the `StreamingRedactTranscribedAudio`
// method. In this streaming call, multiple `StreamingRedactTranscribedAudioResponse`
// messages contain either `Utterance` or redacted audio data will be returned.
type StreamingRedactTranscribedAudioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*StreamingRedactTranscribedAudioResponse_Utterance
	//	*StreamingRedactTranscribedAudioResponse_Audio
	Result isStreamingRedactTranscribedAudioResponse_Result `protobuf_oneof:"result"`
}

func (x *StreamingRedactTranscribedAudioResponse) Reset() {
	*x = StreamingRedactTranscribedAudioResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingRedactTranscribedAudioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingRedactTranscribedAudioResponse) ProtoMessage() {}

func (x *StreamingRedactTranscribedAudioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingRedactTranscribedAudioResponse.ProtoReflect.Descriptor instead.
func (*StreamingRedactTranscribedAudioResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP(), []int{9}
}

func (m *StreamingRedactTranscribedAudioResponse) GetResult() isStreamingRedactTranscribedAudioResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *StreamingRedactTranscribedAudioResponse) GetUtterance() *Utterance {
	if x, ok := x.GetResult().(*StreamingRedactTranscribedAudioResponse_Utterance); ok {
		return x.Utterance
	}
	return nil
}

func (x *StreamingRedactTranscribedAudioResponse) GetAudio() []byte {
	if x, ok := x.GetResult().(*StreamingRedactTranscribedAudioResponse_Audio); ok {
		return x.Audio
	}
	return nil
}

type isStreamingRedactTranscribedAudioResponse_Result interface {
	isStreamingRedactTranscribedAudioResponse_Result()
}

type StreamingRedactTranscribedAudioResponse_Utterance struct {
	Utterance *Utterance `protobuf:"bytes,1,opt,name=utterance,proto3,oneof"`
}

type StreamingRedactTranscribedAudioResponse_Audio struct {
	Audio []byte `protobuf:"bytes,2,opt,name=audio,proto3,oneof"`
}

func (*StreamingRedactTranscribedAudioResponse_Utterance) isStreamingRedactTranscribedAudioResponse_Result() {
}

func (*StreamingRedactTranscribedAudioResponse_Audio) isStreamingRedactTranscribedAudioResponse_Result() {
}

// The top-level messages sent by the client for the `StreamingTranscribeAndRedact`
// method. In this streaming call, multiple `StreamingTranscribeAndRedactRequest`
// messages should be sent. The first message must contain a `TranscribeAndRedactConfig`
// message only and all subsequent messages must contain audio data only.
type StreamingTranscribeAndRedactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*StreamingTranscribeAndRedactRequest_Config
	//	*StreamingTranscribeAndRedactRequest_Audio
	Request isStreamingTranscribeAndRedactRequest_Request `protobuf_oneof:"request"`
}

func (x *StreamingTranscribeAndRedactRequest) Reset() {
	*x = StreamingTranscribeAndRedactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingTranscribeAndRedactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingTranscribeAndRedactRequest) ProtoMessage() {}

func (x *StreamingTranscribeAndRedactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingTranscribeAndRedactRequest.ProtoReflect.Descriptor instead.
func (*StreamingTranscribeAndRedactRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP(), []int{10}
}

func (m *StreamingTranscribeAndRedactRequest) GetRequest() isStreamingTranscribeAndRedactRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *StreamingTranscribeAndRedactRequest) GetConfig() *TranscribeAndRedactConfig {
	if x, ok := x.GetRequest().(*StreamingTranscribeAndRedactRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *StreamingTranscribeAndRedactRequest) GetAudio() []byte {
	if x, ok := x.GetRequest().(*StreamingTranscribeAndRedactRequest_Audio); ok {
		return x.Audio
	}
	return nil
}

type isStreamingTranscribeAndRedactRequest_Request interface {
	isStreamingTranscribeAndRedactRequest_Request()
}

type StreamingTranscribeAndRedactRequest_Config struct {
	Config *TranscribeAndRedactConfig `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type StreamingTranscribeAndRedactRequest_Audio struct {
	Audio []byte `protobuf:"bytes,2,opt,name=audio,proto3,oneof"`
}

func (*StreamingTranscribeAndRedactRequest_Config) isStreamingTranscribeAndRedactRequest_Request() {}

func (*StreamingTranscribeAndRedactRequest_Audio) isStreamingTranscribeAndRedactRequest_Request() {}

// The top-level message sent by the server for the `StreamingTranscribeAndRedact`
// method. In this streaming call, multiple `StreamingTranscribeAndRedactResponse`
// messages contain either `TranscribeAndRedactUtterance` or redacted audio data
// will be returned.
type StreamingTranscribeAndRedactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*StreamingTranscribeAndRedactResponse_Utterance
	//	*StreamingTranscribeAndRedactResponse_Audio
	Result isStreamingTranscribeAndRedactResponse_Result `protobuf_oneof:"result"`
}

func (x *StreamingTranscribeAndRedactResponse) Reset() {
	*x = StreamingTranscribeAndRedactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingTranscribeAndRedactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingTranscribeAndRedactResponse) ProtoMessage() {}

func (x *StreamingTranscribeAndRedactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingTranscribeAndRedactResponse.ProtoReflect.Descriptor instead.
func (*StreamingTranscribeAndRedactResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP(), []int{11}
}

func (m *StreamingTranscribeAndRedactResponse) GetResult() isStreamingTranscribeAndRedactResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *StreamingTranscribeAndRedactResponse) GetUtterance() *TranscribeAndRedactUtterance {
	if x, ok := x.GetResult().(*StreamingTranscribeAndRedactResponse_Utterance); ok {
		return x.Utterance
	}
	return nil
}

func (x *StreamingTranscribeAndRedactResponse) GetAudio() []byte {
	if x, ok := x.GetResult().(*StreamingTranscribeAndRedactResponse_Audio); ok {
		return x.Audio
	}
	return nil
}

type isStreamingTranscribeAndRedactResponse_Result interface {
	isStreamingTranscribeAndRedactResponse_Result()
}

type StreamingTranscribeAndRedactResponse_Utterance struct {
	Utterance *TranscribeAndRedactUtterance `protobuf:"bytes,1,opt,name=utterance,proto3,oneof"`
}

type StreamingTranscribeAndRedactResponse_Audio struct {
	Audio []byte `protobuf:"bytes,2,opt,name=audio,proto3,oneof"`
}

func (*StreamingTranscribeAndRedactResponse_Utterance) isStreamingTranscribeAndRedactResponse_Result() {
}

func (*StreamingTranscribeAndRedactResponse_Audio) isStreamingTranscribeAndRedactResponse_Result() {}

// Description of a Cobalt Privacy Screen Model
type ModelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the model. This identifier is used to choose the model
	// that should be used for recognition, and is specified in the `RedactionConfig`
	// message.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Model name. This is a concise name describing the model, and may be
	// presented to the end-user, for example, to help choose which model to use
	// for their recognition task.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// List of supported redaction classes.
	RedactionClasses []string `protobuf:"bytes,3,rep,name=redaction_classes,json=redactionClasses,proto3" json:"redaction_classes,omitempty"`
}

func (x *ModelInfo) Reset() {
	*x = ModelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInfo) ProtoMessage() {}

func (x *ModelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInfo.ProtoReflect.Descriptor instead.
func (*ModelInfo) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP(), []int{12}
}

func (x *ModelInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModelInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelInfo) GetRedactionClasses() []string {
	if x != nil {
		return x.RedactionClasses
	}
	return nil
}

// Configuration for setting up a `StreamingRedactTranscribedAudio` method.
type RedactTranscribedAudioConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text redaction config.
	RedactionConfig *RedactionConfig `protobuf:"bytes,1,opt,name=redaction_config,json=redactionConfig,proto3" json:"redaction_config,omitempty"`
	// Transcription of the entire audio. This must be ready before sending the audio.
	Transcript *Transcript `protobuf:"bytes,2,opt,name=transcript,proto3" json:"transcript,omitempty"`
}

func (x *RedactTranscribedAudioConfig) Reset() {
	*x = RedactTranscribedAudioConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedactTranscribedAudioConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedactTranscribedAudioConfig) ProtoMessage() {}

func (x *RedactTranscribedAudioConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedactTranscribedAudioConfig.ProtoReflect.Descriptor instead.
func (*RedactTranscribedAudioConfig) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP(), []int{13}
}

func (x *RedactTranscribedAudioConfig) GetRedactionConfig() *RedactionConfig {
	if x != nil {
		return x.RedactionConfig
	}
	return nil
}

func (x *RedactTranscribedAudioConfig) GetTranscript() *Transcript {
	if x != nil {
		return x.Transcript
	}
	return nil
}

// Configuration for setting up a `StreamingTranscribeAndRedact` method.
type TranscribeAndRedactConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text redaction config.
	RedactionConfig *RedactionConfig `protobuf:"bytes,1,opt,name=redaction_config,json=redactionConfig,proto3" json:"redaction_config,omitempty"`
	// This is an optional field. If this is set to `true`, each utterance result
	// will include unredacted utterance. If set to `false`, no unredacted utterance
	// will be returned. The default is `false`.
	EnableUnredactedTranscript bool `protobuf:"varint,2,opt,name=enable_unredacted_transcript,json=enableUnredactedTranscript,proto3" json:"enable_unredacted_transcript,omitempty"`
}

func (x *TranscribeAndRedactConfig) Reset() {
	*x = TranscribeAndRedactConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscribeAndRedactConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscribeAndRedactConfig) ProtoMessage() {}

func (x *TranscribeAndRedactConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscribeAndRedactConfig.ProtoReflect.Descriptor instead.
func (*TranscribeAndRedactConfig) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP(), []int{14}
}

func (x *TranscribeAndRedactConfig) GetRedactionConfig() *RedactionConfig {
	if x != nil {
		return x.RedactionConfig
	}
	return nil
}

func (x *TranscribeAndRedactConfig) GetEnableUnredactedTranscript() bool {
	if x != nil {
		return x.EnableUnredactedTranscript
	}
	return false
}

// Configuration for setting up a redaction engine.
type RedactionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the model to use, as obtained from a `ModelInfo` message.
	ModelId string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// List of whitelisted redaction classes. If the list is empty, server default
	// redaction class list will be considered.
	RedactionClasses []string `protobuf:"bytes,2,rep,name=redaction_classes,json=redactionClasses,proto3" json:"redaction_classes,omitempty"`
	// This is an optional field. If this is set to `true`, Cobalt Privacy Screen will
	// redact entire transcript at once, by doing so, redaction accuracy will increase
	// at the cost of higher latency. If set to `false`, Cobalt Privacy Screen will
	// redact one utterance at a time and return the result as soon as possible. The
	// default is `false`.
	DisableStreaming bool `protobuf:"varint,3,opt,name=disable_streaming,json=disableStreaming,proto3" json:"disable_streaming,omitempty"`
}

func (x *RedactionConfig) Reset() {
	*x = RedactionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedactionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedactionConfig) ProtoMessage() {}

func (x *RedactionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedactionConfig.ProtoReflect.Descriptor instead.
func (*RedactionConfig) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP(), []int{15}
}

func (x *RedactionConfig) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *RedactionConfig) GetRedactionClasses() []string {
	if x != nil {
		return x.RedactionClasses
	}
	return nil
}

func (x *RedactionConfig) GetDisableStreaming() bool {
	if x != nil {
		return x.DisableStreaming
	}
	return false
}

// Transcript contains multiple utterance of the audio.
type Transcript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Utterances []*Utterance `protobuf:"bytes,1,rep,name=utterances,proto3" json:"utterances,omitempty"`
}

func (x *Transcript) Reset() {
	*x = Transcript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transcript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transcript) ProtoMessage() {}

func (x *Transcript) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transcript.ProtoReflect.Descriptor instead.
func (*Transcript) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP(), []int{16}
}

func (x *Transcript) GetUtterances() []*Utterance {
	if x != nil {
		return x.Utterances
	}
	return nil
}

// Output utterance from `StreamingTranscribeAndRedact` method.
type TranscribeAndRedactUtterance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Redacted utterance.
	Redacted *Utterance `protobuf:"bytes,1,opt,name=redacted,proto3" json:"redacted,omitempty"`
	// Unredacted utterance. This is available only if `enable_unredacted_transcript`
	// was set to `true` in the `TranscribeAndRedactConfig`.
	Unredacted *Utterance `protobuf:"bytes,2,opt,name=unredacted,proto3" json:"unredacted,omitempty"`
}

func (x *TranscribeAndRedactUtterance) Reset() {
	*x = TranscribeAndRedactUtterance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscribeAndRedactUtterance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscribeAndRedactUtterance) ProtoMessage() {}

func (x *TranscribeAndRedactUtterance) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscribeAndRedactUtterance.ProtoReflect.Descriptor instead.
func (*TranscribeAndRedactUtterance) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP(), []int{17}
}

func (x *TranscribeAndRedactUtterance) GetRedacted() *Utterance {
	if x != nil {
		return x.Redacted
	}
	return nil
}

func (x *TranscribeAndRedactUtterance) GetUnredacted() *Utterance {
	if x != nil {
		return x.Unredacted
	}
	return nil
}

// Utterance of the audio
type Utterance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Channel of the audio file associate with this utterance. Channels
	// are 0-indexed, so the for mono audio data, this value will always be 0.
	AudioChannel uint32 `protobuf:"varint,2,opt,name=audio_channel,json=audioChannel,proto3" json:"audio_channel,omitempty"`
	// Time offset in milliseconds relative to the beginning of audio
	// corresponding to the start of this utterance.
	StartTimeMs uint64 `protobuf:"varint,3,opt,name=start_time_ms,json=startTimeMs,proto3" json:"start_time_ms,omitempty"`
	// Duration in milliseconds of the current utterance in the audio.
	DurationMs uint64 `protobuf:"varint,4,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	// ASR confidence estimate between 0 and 1. A higher number represents a
	// higher likelihood of the output being correct. This remains the same
	// value for pretranscribed input.
	AsrConfidence float64 `protobuf:"fixed64,5,opt,name=asr_confidence,json=asrConfidence,proto3" json:"asr_confidence,omitempty"`
	// Words corresponding to the utterance. This field contains word-level timestamps,
	// which are essential input for audio redaction.
	Words []*Word `protobuf:"bytes,7,rep,name=words,proto3" json:"words,omitempty"`
}

func (x *Utterance) Reset() {
	*x = Utterance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Utterance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Utterance) ProtoMessage() {}

func (x *Utterance) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Utterance.ProtoReflect.Descriptor instead.
func (*Utterance) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP(), []int{18}
}

func (x *Utterance) GetAudioChannel() uint32 {
	if x != nil {
		return x.AudioChannel
	}
	return 0
}

func (x *Utterance) GetStartTimeMs() uint64 {
	if x != nil {
		return x.StartTimeMs
	}
	return 0
}

func (x *Utterance) GetDurationMs() uint64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *Utterance) GetAsrConfidence() float64 {
	if x != nil {
		return x.AsrConfidence
	}
	return 0
}

func (x *Utterance) GetWords() []*Word {
	if x != nil {
		return x.Words
	}
	return nil
}

// Word represents a token in a utterance.
type Word struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actual word corresponding to the utterance.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// ASR confidence estimate between 0 and 1. A higher number represents a
	// higher likelihood that the word was correctly recognized. This remains
	// the same value for pretranscribed input.
	AsrConfidence float64 `protobuf:"fixed64,2,opt,name=asr_confidence,json=asrConfidence,proto3" json:"asr_confidence,omitempty"`
	// Time offset in milliseconds relative to the beginning of audio received by
	// the recognizer and corresponding to the start of this spoken word.
	StartTimeMs uint64 `protobuf:"varint,3,opt,name=start_time_ms,json=startTimeMs,proto3" json:"start_time_ms,omitempty"`
	// Duration in milliseconds of the current word in the spoken audio.
	DurationMs uint64 `protobuf:"varint,4,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	// If this is set to true, it denotes that the curent word is redacted word
	// or an original word of a redacted word.
	IsRedacted bool `protobuf:"varint,5,opt,name=is_redacted,json=isRedacted,proto3" json:"is_redacted,omitempty"`
	// Recognized redaction class. This is available only if the current word
	// is a redacted word.
	RedactionClass string `protobuf:"bytes,6,opt,name=redaction_class,json=redactionClass,proto3" json:"redaction_class,omitempty"`
	// Redaction confidence estimate between 0 and 1. A higher number represents
	// a higher likelihood that the word was correctly recognized. This is
	// available only if the current word is a redacted word.
	RedactionConfidence float64 `protobuf:"fixed64,7,opt,name=redaction_confidence,json=redactionConfidence,proto3" json:"redaction_confidence,omitempty"`
}

func (x *Word) Reset() {
	*x = Word{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Word) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Word) ProtoMessage() {}

func (x *Word) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Word.ProtoReflect.Descriptor instead.
func (*Word) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP(), []int{19}
}

func (x *Word) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Word) GetAsrConfidence() float64 {
	if x != nil {
		return x.AsrConfidence
	}
	return 0
}

func (x *Word) GetStartTimeMs() uint64 {
	if x != nil {
		return x.StartTimeMs
	}
	return 0
}

func (x *Word) GetDurationMs() uint64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *Word) GetIsRedacted() bool {
	if x != nil {
		return x.IsRedacted
	}
	return false
}

func (x *Word) GetRedactionClass() string {
	if x != nil {
		return x.RedactionClass
	}
	return ""
}

func (x *Word) GetRedactionConfidence() float64 {
	if x != nil {
		return x.RedactionConfidence
	}
	return 0
}

// RedactedToken represents each recognized sensitive information to be redacted
// and related information.
type RedactedToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The original text for the current redacted token.
	OriginalText string `protobuf:"bytes,1,opt,name=original_text,json=originalText,proto3" json:"original_text,omitempty"`
	// Start offset of the original text in the input string.
	OriginalOffset uint64 `protobuf:"varint,2,opt,name=original_offset,json=originalOffset,proto3" json:"original_offset,omitempty"`
	// Length of the original text.
	OriginalLength uint64 `protobuf:"varint,3,opt,name=original_length,json=originalLength,proto3" json:"original_length,omitempty"`
	// Recognized redaction class.
	RedactionClass string `protobuf:"bytes,4,opt,name=redaction_class,json=redactionClass,proto3" json:"redaction_class,omitempty"`
	// Redaction confidence estimate between 0 and 1. A higher number represents
	// a higher likelihood that the word was correctly recognized.
	RedactionConfidence float64 `protobuf:"fixed64,5,opt,name=redaction_confidence,json=redactionConfidence,proto3" json:"redaction_confidence,omitempty"`
}

func (x *RedactedToken) Reset() {
	*x = RedactedToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedactedToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedactedToken) ProtoMessage() {}

func (x *RedactedToken) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedactedToken.ProtoReflect.Descriptor instead.
func (*RedactedToken) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP(), []int{20}
}

func (x *RedactedToken) GetOriginalText() string {
	if x != nil {
		return x.OriginalText
	}
	return ""
}

func (x *RedactedToken) GetOriginalOffset() uint64 {
	if x != nil {
		return x.OriginalOffset
	}
	return 0
}

func (x *RedactedToken) GetOriginalLength() uint64 {
	if x != nil {
		return x.OriginalLength
	}
	return 0
}

func (x *RedactedToken) GetRedactionClass() string {
	if x != nil {
		return x.RedactionClass
	}
	return ""
}

func (x *RedactedToken) GetRedactionConfidence() float64 {
	if x != nil {
		return x.RedactionConfidence
	}
	return 0
}

var File_cobaltspeech_privacyscreen_v1_privacyscreen_proto protoreflect.FileDescriptor

var file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDesc = []byte{
	0x0a, 0x31, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x22, 0x10, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0x6f,
	0x0a, 0x11, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x7f, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x55, 0x0a, 0x0f, 0x72, 0x65, 0x64,
	0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x0e, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x22, 0xac, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22,
	0x65, 0x0a, 0x18, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x26, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x55, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x27,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x75, 0x74, 0x74, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x62,
	0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x74, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x75, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x23, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6e, 0x64, 0x52, 0x65,
	0x64, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x16, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x24, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x64,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x09, 0x75,
	0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x61,
	0x63, 0x74, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x75,
	0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5c, 0x0a, 0x09, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72,
	0x65, 0x64, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x64,
	0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x10, 0x72, 0x65, 0x64,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22,
	0xb8, 0x01, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6e,
	0x64, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a,
	0x10, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x1c, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x52,
	0x65, 0x64, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x64,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x22, 0x56, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x12, 0x48, 0x0a, 0x0a, 0x75, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x0a, 0x75, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x1c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x64,
	0x61, 0x63, 0x74, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x08,
	0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x75, 0x6e, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x0a, 0x75, 0x6e, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64, 0x22, 0xd7, 0x01, 0x0a,
	0x09, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x73, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x73,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x62,
	0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x52,
	0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x83, 0x02, 0x0a, 0x04, 0x57, 0x6f, 0x72, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x73, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x73, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x64,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xe2, 0x01, 0x0a,
	0x0d, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x31,
	0x0a, 0x14, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x72, 0x65,
	0x64, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x32, 0xdd, 0x06, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0a, 0x52,
	0x65, 0x64, 0x61, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x30, 0x2e, 0x63, 0x6f, 0x62, 0x61,
	0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74,
	0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x61,
	0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x85, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x64, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb6, 0x01, 0x0a, 0x1f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x45, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x64,
	0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x12, 0xad, 0x01, 0x0a, 0x1c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x61,
	0x63, 0x74, 0x12, 0x42, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x64,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x42, 0xa0, 0x02, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x12, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x51, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2f, 0x76, 0x31,
	0x3b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x76, 0x31,
	0xa2, 0x02, 0x03, 0x43, 0x50, 0x58, 0xaa, 0x02, 0x1d, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1d, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x5c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x29, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x5c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x1f, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x3a, 0x3a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescOnce sync.Once
	file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescData = file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDesc
)

func file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescGZIP() []byte {
	file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescOnce.Do(func() {
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescData = protoimpl.X.CompressGZIP(file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescData)
	})
	return file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDescData
}

var file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_goTypes = []interface{}{
	(*VersionRequest)(nil),                          // 0: cobaltspeech.privacyscreen.v1.VersionRequest
	(*VersionResponse)(nil),                         // 1: cobaltspeech.privacyscreen.v1.VersionResponse
	(*ListModelsRequest)(nil),                       // 2: cobaltspeech.privacyscreen.v1.ListModelsRequest
	(*ListModelsResponse)(nil),                      // 3: cobaltspeech.privacyscreen.v1.ListModelsResponse
	(*RedactTextRequest)(nil),                       // 4: cobaltspeech.privacyscreen.v1.RedactTextRequest
	(*RedactTextResponse)(nil),                      // 5: cobaltspeech.privacyscreen.v1.RedactTextResponse
	(*RedactTranscriptRequest)(nil),                 // 6: cobaltspeech.privacyscreen.v1.RedactTranscriptRequest
	(*RedactTranscriptResponse)(nil),                // 7: cobaltspeech.privacyscreen.v1.RedactTranscriptResponse
	(*StreamingRedactTranscribedAudioRequest)(nil),  // 8: cobaltspeech.privacyscreen.v1.StreamingRedactTranscribedAudioRequest
	(*StreamingRedactTranscribedAudioResponse)(nil), // 9: cobaltspeech.privacyscreen.v1.StreamingRedactTranscribedAudioResponse
	(*StreamingTranscribeAndRedactRequest)(nil),     // 10: cobaltspeech.privacyscreen.v1.StreamingTranscribeAndRedactRequest
	(*StreamingTranscribeAndRedactResponse)(nil),    // 11: cobaltspeech.privacyscreen.v1.StreamingTranscribeAndRedactResponse
	(*ModelInfo)(nil),                               // 12: cobaltspeech.privacyscreen.v1.ModelInfo
	(*RedactTranscribedAudioConfig)(nil),            // 13: cobaltspeech.privacyscreen.v1.RedactTranscribedAudioConfig
	(*TranscribeAndRedactConfig)(nil),               // 14: cobaltspeech.privacyscreen.v1.TranscribeAndRedactConfig
	(*RedactionConfig)(nil),                         // 15: cobaltspeech.privacyscreen.v1.RedactionConfig
	(*Transcript)(nil),                              // 16: cobaltspeech.privacyscreen.v1.Transcript
	(*TranscribeAndRedactUtterance)(nil),            // 17: cobaltspeech.privacyscreen.v1.TranscribeAndRedactUtterance
	(*Utterance)(nil),                               // 18: cobaltspeech.privacyscreen.v1.Utterance
	(*Word)(nil),                                    // 19: cobaltspeech.privacyscreen.v1.Word
	(*RedactedToken)(nil),                           // 20: cobaltspeech.privacyscreen.v1.RedactedToken
}
var file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_depIdxs = []int32{
	12, // 0: cobaltspeech.privacyscreen.v1.ListModelsResponse.models:type_name -> cobaltspeech.privacyscreen.v1.ModelInfo
	15, // 1: cobaltspeech.privacyscreen.v1.RedactTextRequest.config:type_name -> cobaltspeech.privacyscreen.v1.RedactionConfig
	20, // 2: cobaltspeech.privacyscreen.v1.RedactTextResponse.redacted_tokens:type_name -> cobaltspeech.privacyscreen.v1.RedactedToken
	15, // 3: cobaltspeech.privacyscreen.v1.RedactTranscriptRequest.config:type_name -> cobaltspeech.privacyscreen.v1.RedactionConfig
	16, // 4: cobaltspeech.privacyscreen.v1.RedactTranscriptRequest.transcript:type_name -> cobaltspeech.privacyscreen.v1.Transcript
	16, // 5: cobaltspeech.privacyscreen.v1.RedactTranscriptResponse.transcript:type_name -> cobaltspeech.privacyscreen.v1.Transcript
	13, // 6: cobaltspeech.privacyscreen.v1.StreamingRedactTranscribedAudioRequest.config:type_name -> cobaltspeech.privacyscreen.v1.RedactTranscribedAudioConfig
	18, // 7: cobaltspeech.privacyscreen.v1.StreamingRedactTranscribedAudioResponse.utterance:type_name -> cobaltspeech.privacyscreen.v1.Utterance
	14, // 8: cobaltspeech.privacyscreen.v1.StreamingTranscribeAndRedactRequest.config:type_name -> cobaltspeech.privacyscreen.v1.TranscribeAndRedactConfig
	17, // 9: cobaltspeech.privacyscreen.v1.StreamingTranscribeAndRedactResponse.utterance:type_name -> cobaltspeech.privacyscreen.v1.TranscribeAndRedactUtterance
	15, // 10: cobaltspeech.privacyscreen.v1.RedactTranscribedAudioConfig.redaction_config:type_name -> cobaltspeech.privacyscreen.v1.RedactionConfig
	16, // 11: cobaltspeech.privacyscreen.v1.RedactTranscribedAudioConfig.transcript:type_name -> cobaltspeech.privacyscreen.v1.Transcript
	15, // 12: cobaltspeech.privacyscreen.v1.TranscribeAndRedactConfig.redaction_config:type_name -> cobaltspeech.privacyscreen.v1.RedactionConfig
	18, // 13: cobaltspeech.privacyscreen.v1.Transcript.utterances:type_name -> cobaltspeech.privacyscreen.v1.Utterance
	18, // 14: cobaltspeech.privacyscreen.v1.TranscribeAndRedactUtterance.redacted:type_name -> cobaltspeech.privacyscreen.v1.Utterance
	18, // 15: cobaltspeech.privacyscreen.v1.TranscribeAndRedactUtterance.unredacted:type_name -> cobaltspeech.privacyscreen.v1.Utterance
	19, // 16: cobaltspeech.privacyscreen.v1.Utterance.words:type_name -> cobaltspeech.privacyscreen.v1.Word
	0,  // 17: cobaltspeech.privacyscreen.v1.PrivacyScreenService.Version:input_type -> cobaltspeech.privacyscreen.v1.VersionRequest
	2,  // 18: cobaltspeech.privacyscreen.v1.PrivacyScreenService.ListModels:input_type -> cobaltspeech.privacyscreen.v1.ListModelsRequest
	4,  // 19: cobaltspeech.privacyscreen.v1.PrivacyScreenService.RedactText:input_type -> cobaltspeech.privacyscreen.v1.RedactTextRequest
	6,  // 20: cobaltspeech.privacyscreen.v1.PrivacyScreenService.RedactTranscript:input_type -> cobaltspeech.privacyscreen.v1.RedactTranscriptRequest
	8,  // 21: cobaltspeech.privacyscreen.v1.PrivacyScreenService.StreamingRedactTranscribedAudio:input_type -> cobaltspeech.privacyscreen.v1.StreamingRedactTranscribedAudioRequest
	10, // 22: cobaltspeech.privacyscreen.v1.PrivacyScreenService.StreamingTranscribeAndRedact:input_type -> cobaltspeech.privacyscreen.v1.StreamingTranscribeAndRedactRequest
	1,  // 23: cobaltspeech.privacyscreen.v1.PrivacyScreenService.Version:output_type -> cobaltspeech.privacyscreen.v1.VersionResponse
	3,  // 24: cobaltspeech.privacyscreen.v1.PrivacyScreenService.ListModels:output_type -> cobaltspeech.privacyscreen.v1.ListModelsResponse
	5,  // 25: cobaltspeech.privacyscreen.v1.PrivacyScreenService.RedactText:output_type -> cobaltspeech.privacyscreen.v1.RedactTextResponse
	7,  // 26: cobaltspeech.privacyscreen.v1.PrivacyScreenService.RedactTranscript:output_type -> cobaltspeech.privacyscreen.v1.RedactTranscriptResponse
	9,  // 27: cobaltspeech.privacyscreen.v1.PrivacyScreenService.StreamingRedactTranscribedAudio:output_type -> cobaltspeech.privacyscreen.v1.StreamingRedactTranscribedAudioResponse
	11, // 28: cobaltspeech.privacyscreen.v1.PrivacyScreenService.StreamingTranscribeAndRedact:output_type -> cobaltspeech.privacyscreen.v1.StreamingTranscribeAndRedactResponse
	23, // [23:29] is the sub-list for method output_type
	17, // [17:23] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_init() }
func file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_init() {
	if File_cobaltspeech_privacyscreen_v1_privacyscreen_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedactTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedactTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedactTranscriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedactTranscriptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingRedactTranscribedAudioRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingRedactTranscribedAudioResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingTranscribeAndRedactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingTranscribeAndRedactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedactTranscribedAudioConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscribeAndRedactConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedactionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transcript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscribeAndRedactUtterance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Utterance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Word); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedactedToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*StreamingRedactTranscribedAudioRequest_Config)(nil),
		(*StreamingRedactTranscribedAudioRequest_Audio)(nil),
	}
	file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*StreamingRedactTranscribedAudioResponse_Utterance)(nil),
		(*StreamingRedactTranscribedAudioResponse_Audio)(nil),
	}
	file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*StreamingTranscribeAndRedactRequest_Config)(nil),
		(*StreamingTranscribeAndRedactRequest_Audio)(nil),
	}
	file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*StreamingTranscribeAndRedactResponse_Utterance)(nil),
		(*StreamingTranscribeAndRedactResponse_Audio)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_goTypes,
		DependencyIndexes: file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_depIdxs,
		MessageInfos:      file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_msgTypes,
	}.Build()
	File_cobaltspeech_privacyscreen_v1_privacyscreen_proto = out.File
	file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_rawDesc = nil
	file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_goTypes = nil
	file_cobaltspeech_privacyscreen_v1_privacyscreen_proto_depIdxs = nil
}
