// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cobaltspeech/bluehenge/v2/bluehenge.proto

package bluehengev2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BluehengeService_Version_FullMethodName                   = "/cobaltspeech.bluehenge.v2.BluehengeService/Version"
	BluehengeService_ListModels_FullMethodName                = "/cobaltspeech.bluehenge.v2.BluehengeService/ListModels"
	BluehengeService_CreateSession_FullMethodName             = "/cobaltspeech.bluehenge.v2.BluehengeService/CreateSession"
	BluehengeService_DeleteSession_FullMethodName             = "/cobaltspeech.bluehenge.v2.BluehengeService/DeleteSession"
	BluehengeService_UpdateSession_FullMethodName             = "/cobaltspeech.bluehenge.v2.BluehengeService/UpdateSession"
	BluehengeService_StreamASR_FullMethodName                 = "/cobaltspeech.bluehenge.v2.BluehengeService/StreamASR"
	BluehengeService_StreamTTS_FullMethodName                 = "/cobaltspeech.bluehenge.v2.BluehengeService/StreamTTS"
	BluehengeService_Transcribe_FullMethodName                = "/cobaltspeech.bluehenge.v2.BluehengeService/Transcribe"
	BluehengeService_ListProcedures_FullMethodName            = "/cobaltspeech.bluehenge.v2.BluehengeService/ListProcedures"
	BluehengeService_ListTrees_FullMethodName                 = "/cobaltspeech.bluehenge.v2.BluehengeService/ListTrees"
	BluehengeService_ListEntities_FullMethodName              = "/cobaltspeech.bluehenge.v2.BluehengeService/ListEntities"
	BluehengeService_GetProcedure_FullMethodName              = "/cobaltspeech.bluehenge.v2.BluehengeService/GetProcedure"
	BluehengeService_GetTask_FullMethodName                   = "/cobaltspeech.bluehenge.v2.BluehengeService/GetTask"
	BluehengeService_GetTree_FullMethodName                   = "/cobaltspeech.bluehenge.v2.BluehengeService/GetTree"
	BluehengeService_SaveNote_FullMethodName                  = "/cobaltspeech.bluehenge.v2.BluehengeService/SaveNote"
	BluehengeService_GetExtractionRelationship_FullMethodName = "/cobaltspeech.bluehenge.v2.BluehengeService/GetExtractionRelationship"
	BluehengeService_GetEntity_FullMethodName                 = "/cobaltspeech.bluehenge.v2.BluehengeService/GetEntity"
	BluehengeService_GetEntityImageData_FullMethodName        = "/cobaltspeech.bluehenge.v2.BluehengeService/GetEntityImageData"
)

// BluehengeServiceClient is the client API for BluehengeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BluehengeServiceClient interface {
	// Returns version information of the Bluehenge server.
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	// ListModels returns information about the Bluehenge models
	// the server can access.
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	// Create a new Bluehenge session. Also returns a list of
	// actions to take next.
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	// Delete the session. Behavior is undefined if the given
	// TokenData is used again after this function is called.
	DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*DeleteSessionResponse, error)
	// Process input for a session and get an updated session with
	// a list of actions to take next. This is the only method
	// that modifies the Bluehenge session state.
	UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*UpdateSessionResponse, error)
	// Create an ASR stream. A result is returned when the
	// stream is closed by the client (which forces the ASR to
	// endpoint), or when a transcript becomes available on its
	// own, in which case the stream is closed by the server.
	// The ASR result may be used in the UpdateSession method.
	// <br/><br/>
	// If the session has a wakeword enabled, and the client
	// application is using Diatheke and Cubic to handle the
	// wakeword processing, this method will not return a
	// result until the wakeword condition has been satisfied.
	// Utterances without the required wakeword will be
	// ignored and no transcription will be returned.
	StreamASR(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StreamASRRequest, StreamASRResponse], error)
	// Create a TTS stream to receive audio for the given reply.
	// The stream will close when TTS is finished. The client
	// may also close the stream early to cancel the speech
	// synthesis.
	StreamTTS(ctx context.Context, in *StreamTTSRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamTTSResponse], error)
	// Create an ASR stream for transcription. Unlike StreamASR,
	// Transcribe does not listen for a wakeword. This method
	// returns a bi-directional stream, and its intended use is
	// for situations where a user may say anything at all, whether
	// it is short or long, and the application wants to save the
	// transcript (e.g., take a note, send a message).
	// <br/><br/>
	// The first message sent to the server must be the TranscribeAction,
	// with remaining messages sending audio data.
	// Messages received from the server will include the current
	// best partial transcription until the full transcription is
	// ready. The stream ends when either the client application
	// closes it, a predefined duration of silence (non-speech)
	// occurs, or the end-transcription intent is recognized.
	Transcribe(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TranscribeRequest, TranscribeResponse], error)
	// Returns a list of all the procedures.
	// This list is contains a simplified representation of the procedures,
	// which can be helpful for displaying a directory or table of contents.
	// The full details of an individual procedure can be retrieved via
	// GetProcedure.
	ListProcedures(ctx context.Context, in *ListProceduresRequest, opts ...grpc.CallOption) (*ListProceduresResponse, error)
	// Returns a list of all the trees.
	// This list is contains a simplified representation of the trees,
	// which can be helpful for displaying a directory or table of contents.
	// The full details of an individual tree can be retrieved via GetTree.
	ListTrees(ctx context.Context, in *ListTreesRequest, opts ...grpc.CallOption) (*ListTreesResponse, error)
	// Returns a list of all entities.
	// This list contains every entity in the knowledge graph and can
	// be used for fuzzy matching or any other time you need everything.
	ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error)
	// Gets a single procedure identified by id.
	// The response returns everything you should need to be able to display the
	// Procedure and it's Steps and Tasks to the user.
	GetProcedure(ctx context.Context, in *GetProcedureRequest, opts ...grpc.CallOption) (*GetProcedureResponse, error)
	// Gets a single task identified by id.
	// The response returns everything you should need to be able to display the
	// Task and it's Steps to the user.
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
	// Gets a single tree identified by id.
	// Trees contain instructions followed by questions to help users
	// diagnose problems. The answers at each step point to another
	// TreeNode to continue the diagnosis. This response returns an
	// information bearing Tree struct with a list of its TreeNodes in
	// a linear order starting with the first one the user should see.
	GetTree(ctx context.Context, in *GetTreeRequest, opts ...grpc.CallOption) (*GetTreeResponse, error)
	// Saves a note in a specific step during a procedure.
	SaveNote(ctx context.Context, in *SaveNoteRequest, opts ...grpc.CallOption) (*SaveNoteResponse, error)
	// Gets the data related with an entity extraction triple for a
	// specific entity-relation pair, e.g. entity:"sky", relation:"has color"
	// Extractions contain Subject-Relation-Object sets. For example,
	// entity:"sky", relation:"has color", object:"blue".
	GetExtractionRelationship(ctx context.Context, in *GetExtractionRelationshipRequest, opts ...grpc.CallOption) (*GetExtractionRelationshipResponse, error)
	// Gets the data contained within a single entity identified by name.
	// Entities contain information about parts and other question
	// answering content. See Entity for more details.
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error)
	// Gets the data related with an image.
	// The actual image will be served over HTTP.
	GetEntityImageData(ctx context.Context, in *GetEntityImageDataRequest, opts ...grpc.CallOption) (*GetEntityImageDataResponse, error)
}

type bluehengeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBluehengeServiceClient(cc grpc.ClientConnInterface) BluehengeServiceClient {
	return &bluehengeServiceClient{cc}
}

func (c *bluehengeServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, BluehengeService_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluehengeServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, BluehengeService_ListModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluehengeServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, BluehengeService_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluehengeServiceClient) DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*DeleteSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSessionResponse)
	err := c.cc.Invoke(ctx, BluehengeService_DeleteSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluehengeServiceClient) UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*UpdateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSessionResponse)
	err := c.cc.Invoke(ctx, BluehengeService_UpdateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluehengeServiceClient) StreamASR(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StreamASRRequest, StreamASRResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BluehengeService_ServiceDesc.Streams[0], BluehengeService_StreamASR_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamASRRequest, StreamASRResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BluehengeService_StreamASRClient = grpc.ClientStreamingClient[StreamASRRequest, StreamASRResponse]

func (c *bluehengeServiceClient) StreamTTS(ctx context.Context, in *StreamTTSRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamTTSResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BluehengeService_ServiceDesc.Streams[1], BluehengeService_StreamTTS_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamTTSRequest, StreamTTSResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BluehengeService_StreamTTSClient = grpc.ServerStreamingClient[StreamTTSResponse]

func (c *bluehengeServiceClient) Transcribe(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TranscribeRequest, TranscribeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BluehengeService_ServiceDesc.Streams[2], BluehengeService_Transcribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TranscribeRequest, TranscribeResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BluehengeService_TranscribeClient = grpc.BidiStreamingClient[TranscribeRequest, TranscribeResponse]

func (c *bluehengeServiceClient) ListProcedures(ctx context.Context, in *ListProceduresRequest, opts ...grpc.CallOption) (*ListProceduresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProceduresResponse)
	err := c.cc.Invoke(ctx, BluehengeService_ListProcedures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluehengeServiceClient) ListTrees(ctx context.Context, in *ListTreesRequest, opts ...grpc.CallOption) (*ListTreesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTreesResponse)
	err := c.cc.Invoke(ctx, BluehengeService_ListTrees_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluehengeServiceClient) ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEntitiesResponse)
	err := c.cc.Invoke(ctx, BluehengeService_ListEntities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluehengeServiceClient) GetProcedure(ctx context.Context, in *GetProcedureRequest, opts ...grpc.CallOption) (*GetProcedureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProcedureResponse)
	err := c.cc.Invoke(ctx, BluehengeService_GetProcedure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluehengeServiceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, BluehengeService_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluehengeServiceClient) GetTree(ctx context.Context, in *GetTreeRequest, opts ...grpc.CallOption) (*GetTreeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTreeResponse)
	err := c.cc.Invoke(ctx, BluehengeService_GetTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluehengeServiceClient) SaveNote(ctx context.Context, in *SaveNoteRequest, opts ...grpc.CallOption) (*SaveNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveNoteResponse)
	err := c.cc.Invoke(ctx, BluehengeService_SaveNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluehengeServiceClient) GetExtractionRelationship(ctx context.Context, in *GetExtractionRelationshipRequest, opts ...grpc.CallOption) (*GetExtractionRelationshipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExtractionRelationshipResponse)
	err := c.cc.Invoke(ctx, BluehengeService_GetExtractionRelationship_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluehengeServiceClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntityResponse)
	err := c.cc.Invoke(ctx, BluehengeService_GetEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluehengeServiceClient) GetEntityImageData(ctx context.Context, in *GetEntityImageDataRequest, opts ...grpc.CallOption) (*GetEntityImageDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntityImageDataResponse)
	err := c.cc.Invoke(ctx, BluehengeService_GetEntityImageData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BluehengeServiceServer is the server API for BluehengeService service.
// All implementations must embed UnimplementedBluehengeServiceServer
// for forward compatibility.
type BluehengeServiceServer interface {
	// Returns version information of the Bluehenge server.
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	// ListModels returns information about the Bluehenge models
	// the server can access.
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// Create a new Bluehenge session. Also returns a list of
	// actions to take next.
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	// Delete the session. Behavior is undefined if the given
	// TokenData is used again after this function is called.
	DeleteSession(context.Context, *DeleteSessionRequest) (*DeleteSessionResponse, error)
	// Process input for a session and get an updated session with
	// a list of actions to take next. This is the only method
	// that modifies the Bluehenge session state.
	UpdateSession(context.Context, *UpdateSessionRequest) (*UpdateSessionResponse, error)
	// Create an ASR stream. A result is returned when the
	// stream is closed by the client (which forces the ASR to
	// endpoint), or when a transcript becomes available on its
	// own, in which case the stream is closed by the server.
	// The ASR result may be used in the UpdateSession method.
	// <br/><br/>
	// If the session has a wakeword enabled, and the client
	// application is using Diatheke and Cubic to handle the
	// wakeword processing, this method will not return a
	// result until the wakeword condition has been satisfied.
	// Utterances without the required wakeword will be
	// ignored and no transcription will be returned.
	StreamASR(grpc.ClientStreamingServer[StreamASRRequest, StreamASRResponse]) error
	// Create a TTS stream to receive audio for the given reply.
	// The stream will close when TTS is finished. The client
	// may also close the stream early to cancel the speech
	// synthesis.
	StreamTTS(*StreamTTSRequest, grpc.ServerStreamingServer[StreamTTSResponse]) error
	// Create an ASR stream for transcription. Unlike StreamASR,
	// Transcribe does not listen for a wakeword. This method
	// returns a bi-directional stream, and its intended use is
	// for situations where a user may say anything at all, whether
	// it is short or long, and the application wants to save the
	// transcript (e.g., take a note, send a message).
	// <br/><br/>
	// The first message sent to the server must be the TranscribeAction,
	// with remaining messages sending audio data.
	// Messages received from the server will include the current
	// best partial transcription until the full transcription is
	// ready. The stream ends when either the client application
	// closes it, a predefined duration of silence (non-speech)
	// occurs, or the end-transcription intent is recognized.
	Transcribe(grpc.BidiStreamingServer[TranscribeRequest, TranscribeResponse]) error
	// Returns a list of all the procedures.
	// This list is contains a simplified representation of the procedures,
	// which can be helpful for displaying a directory or table of contents.
	// The full details of an individual procedure can be retrieved via
	// GetProcedure.
	ListProcedures(context.Context, *ListProceduresRequest) (*ListProceduresResponse, error)
	// Returns a list of all the trees.
	// This list is contains a simplified representation of the trees,
	// which can be helpful for displaying a directory or table of contents.
	// The full details of an individual tree can be retrieved via GetTree.
	ListTrees(context.Context, *ListTreesRequest) (*ListTreesResponse, error)
	// Returns a list of all entities.
	// This list contains every entity in the knowledge graph and can
	// be used for fuzzy matching or any other time you need everything.
	ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error)
	// Gets a single procedure identified by id.
	// The response returns everything you should need to be able to display the
	// Procedure and it's Steps and Tasks to the user.
	GetProcedure(context.Context, *GetProcedureRequest) (*GetProcedureResponse, error)
	// Gets a single task identified by id.
	// The response returns everything you should need to be able to display the
	// Task and it's Steps to the user.
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	// Gets a single tree identified by id.
	// Trees contain instructions followed by questions to help users
	// diagnose problems. The answers at each step point to another
	// TreeNode to continue the diagnosis. This response returns an
	// information bearing Tree struct with a list of its TreeNodes in
	// a linear order starting with the first one the user should see.
	GetTree(context.Context, *GetTreeRequest) (*GetTreeResponse, error)
	// Saves a note in a specific step during a procedure.
	SaveNote(context.Context, *SaveNoteRequest) (*SaveNoteResponse, error)
	// Gets the data related with an entity extraction triple for a
	// specific entity-relation pair, e.g. entity:"sky", relation:"has color"
	// Extractions contain Subject-Relation-Object sets. For example,
	// entity:"sky", relation:"has color", object:"blue".
	GetExtractionRelationship(context.Context, *GetExtractionRelationshipRequest) (*GetExtractionRelationshipResponse, error)
	// Gets the data contained within a single entity identified by name.
	// Entities contain information about parts and other question
	// answering content. See Entity for more details.
	GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error)
	// Gets the data related with an image.
	// The actual image will be served over HTTP.
	GetEntityImageData(context.Context, *GetEntityImageDataRequest) (*GetEntityImageDataResponse, error)
	mustEmbedUnimplementedBluehengeServiceServer()
}

// UnimplementedBluehengeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBluehengeServiceServer struct{}

func (UnimplementedBluehengeServiceServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedBluehengeServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedBluehengeServiceServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedBluehengeServiceServer) DeleteSession(context.Context, *DeleteSessionRequest) (*DeleteSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedBluehengeServiceServer) UpdateSession(context.Context, *UpdateSessionRequest) (*UpdateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSession not implemented")
}
func (UnimplementedBluehengeServiceServer) StreamASR(grpc.ClientStreamingServer[StreamASRRequest, StreamASRResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamASR not implemented")
}
func (UnimplementedBluehengeServiceServer) StreamTTS(*StreamTTSRequest, grpc.ServerStreamingServer[StreamTTSResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTTS not implemented")
}
func (UnimplementedBluehengeServiceServer) Transcribe(grpc.BidiStreamingServer[TranscribeRequest, TranscribeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Transcribe not implemented")
}
func (UnimplementedBluehengeServiceServer) ListProcedures(context.Context, *ListProceduresRequest) (*ListProceduresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcedures not implemented")
}
func (UnimplementedBluehengeServiceServer) ListTrees(context.Context, *ListTreesRequest) (*ListTreesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrees not implemented")
}
func (UnimplementedBluehengeServiceServer) ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntities not implemented")
}
func (UnimplementedBluehengeServiceServer) GetProcedure(context.Context, *GetProcedureRequest) (*GetProcedureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcedure not implemented")
}
func (UnimplementedBluehengeServiceServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedBluehengeServiceServer) GetTree(context.Context, *GetTreeRequest) (*GetTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTree not implemented")
}
func (UnimplementedBluehengeServiceServer) SaveNote(context.Context, *SaveNoteRequest) (*SaveNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveNote not implemented")
}
func (UnimplementedBluehengeServiceServer) GetExtractionRelationship(context.Context, *GetExtractionRelationshipRequest) (*GetExtractionRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtractionRelationship not implemented")
}
func (UnimplementedBluehengeServiceServer) GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedBluehengeServiceServer) GetEntityImageData(context.Context, *GetEntityImageDataRequest) (*GetEntityImageDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityImageData not implemented")
}
func (UnimplementedBluehengeServiceServer) mustEmbedUnimplementedBluehengeServiceServer() {}
func (UnimplementedBluehengeServiceServer) testEmbeddedByValue()                          {}

// UnsafeBluehengeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BluehengeServiceServer will
// result in compilation errors.
type UnsafeBluehengeServiceServer interface {
	mustEmbedUnimplementedBluehengeServiceServer()
}

func RegisterBluehengeServiceServer(s grpc.ServiceRegistrar, srv BluehengeServiceServer) {
	// If the following call pancis, it indicates UnimplementedBluehengeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BluehengeService_ServiceDesc, srv)
}

func _BluehengeService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluehengeServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluehengeService_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluehengeServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluehengeService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluehengeServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluehengeService_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluehengeServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluehengeService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluehengeServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluehengeService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluehengeServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluehengeService_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluehengeServiceServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluehengeService_DeleteSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluehengeServiceServer).DeleteSession(ctx, req.(*DeleteSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluehengeService_UpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluehengeServiceServer).UpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluehengeService_UpdateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluehengeServiceServer).UpdateSession(ctx, req.(*UpdateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluehengeService_StreamASR_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BluehengeServiceServer).StreamASR(&grpc.GenericServerStream[StreamASRRequest, StreamASRResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BluehengeService_StreamASRServer = grpc.ClientStreamingServer[StreamASRRequest, StreamASRResponse]

func _BluehengeService_StreamTTS_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTTSRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BluehengeServiceServer).StreamTTS(m, &grpc.GenericServerStream[StreamTTSRequest, StreamTTSResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BluehengeService_StreamTTSServer = grpc.ServerStreamingServer[StreamTTSResponse]

func _BluehengeService_Transcribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BluehengeServiceServer).Transcribe(&grpc.GenericServerStream[TranscribeRequest, TranscribeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BluehengeService_TranscribeServer = grpc.BidiStreamingServer[TranscribeRequest, TranscribeResponse]

func _BluehengeService_ListProcedures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProceduresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluehengeServiceServer).ListProcedures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluehengeService_ListProcedures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluehengeServiceServer).ListProcedures(ctx, req.(*ListProceduresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluehengeService_ListTrees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTreesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluehengeServiceServer).ListTrees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluehengeService_ListTrees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluehengeServiceServer).ListTrees(ctx, req.(*ListTreesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluehengeService_ListEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluehengeServiceServer).ListEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluehengeService_ListEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluehengeServiceServer).ListEntities(ctx, req.(*ListEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluehengeService_GetProcedure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcedureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluehengeServiceServer).GetProcedure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluehengeService_GetProcedure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluehengeServiceServer).GetProcedure(ctx, req.(*GetProcedureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluehengeService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluehengeServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluehengeService_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluehengeServiceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluehengeService_GetTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluehengeServiceServer).GetTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluehengeService_GetTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluehengeServiceServer).GetTree(ctx, req.(*GetTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluehengeService_SaveNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluehengeServiceServer).SaveNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluehengeService_SaveNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluehengeServiceServer).SaveNote(ctx, req.(*SaveNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluehengeService_GetExtractionRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtractionRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluehengeServiceServer).GetExtractionRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluehengeService_GetExtractionRelationship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluehengeServiceServer).GetExtractionRelationship(ctx, req.(*GetExtractionRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluehengeService_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluehengeServiceServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluehengeService_GetEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluehengeServiceServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluehengeService_GetEntityImageData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityImageDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluehengeServiceServer).GetEntityImageData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluehengeService_GetEntityImageData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluehengeServiceServer).GetEntityImageData(ctx, req.(*GetEntityImageDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BluehengeService_ServiceDesc is the grpc.ServiceDesc for BluehengeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BluehengeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cobaltspeech.bluehenge.v2.BluehengeService",
	HandlerType: (*BluehengeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _BluehengeService_Version_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _BluehengeService_ListModels_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _BluehengeService_CreateSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _BluehengeService_DeleteSession_Handler,
		},
		{
			MethodName: "UpdateSession",
			Handler:    _BluehengeService_UpdateSession_Handler,
		},
		{
			MethodName: "ListProcedures",
			Handler:    _BluehengeService_ListProcedures_Handler,
		},
		{
			MethodName: "ListTrees",
			Handler:    _BluehengeService_ListTrees_Handler,
		},
		{
			MethodName: "ListEntities",
			Handler:    _BluehengeService_ListEntities_Handler,
		},
		{
			MethodName: "GetProcedure",
			Handler:    _BluehengeService_GetProcedure_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _BluehengeService_GetTask_Handler,
		},
		{
			MethodName: "GetTree",
			Handler:    _BluehengeService_GetTree_Handler,
		},
		{
			MethodName: "SaveNote",
			Handler:    _BluehengeService_SaveNote_Handler,
		},
		{
			MethodName: "GetExtractionRelationship",
			Handler:    _BluehengeService_GetExtractionRelationship_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _BluehengeService_GetEntity_Handler,
		},
		{
			MethodName: "GetEntityImageData",
			Handler:    _BluehengeService_GetEntityImageData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamASR",
			Handler:       _BluehengeService_StreamASR_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamTTS",
			Handler:       _BluehengeService_StreamTTS_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Transcribe",
			Handler:       _BluehengeService_Transcribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cobaltspeech/bluehenge/v2/bluehenge.proto",
}
