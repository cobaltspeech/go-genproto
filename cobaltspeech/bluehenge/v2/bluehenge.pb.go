// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cobaltspeech/bluehenge/v2/bluehenge.proto

package bluehengev2

import (
	v3 "github.com/cobaltspeech/go-genproto/cobaltspeech/diatheke/v3"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Empty request for Bluehenge Version
type VersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{0}
}

// Lists the version of the Bluehenge server.
type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the Bluehenge server/engine
	Bluehenge string `protobuf:"bytes,1,opt,name=bluehenge,proto3" json:"bluehenge,omitempty"`
	// Diatheke Version Response
	DiathekeVersionResponse *v3.VersionResponse `protobuf:"bytes,2,opt,name=diatheke_version_response,json=diathekeVersionResponse,proto3" json:"diatheke_version_response,omitempty"`
	// The date when the source data was last updated.  Source data includes PDFs
	// and anything else used to populate the knowledge graph.  Updates to this
	// version imply a new version of knowledge_graph_version.
	SourceDataVersion string `protobuf:"bytes,3,opt,name=source_data_version,json=sourceDataVersion,proto3" json:"source_data_version,omitempty"`
	// The build date of the knowledge graph in use.  The knowledge graph is
	// generated from the source data, but can be updated or modified multiple
	// times given the same source data, hence the separate version.
	KnowledgeGraphVersion string `protobuf:"bytes,4,opt,name=knowledge_graph_version,json=knowledgeGraphVersion,proto3" json:"knowledge_graph_version,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{1}
}

func (x *VersionResponse) GetBluehenge() string {
	if x != nil {
		return x.Bluehenge
	}
	return ""
}

func (x *VersionResponse) GetDiathekeVersionResponse() *v3.VersionResponse {
	if x != nil {
		return x.DiathekeVersionResponse
	}
	return nil
}

func (x *VersionResponse) GetSourceDataVersion() string {
	if x != nil {
		return x.SourceDataVersion
	}
	return ""
}

func (x *VersionResponse) GetKnowledgeGraphVersion() string {
	if x != nil {
		return x.KnowledgeGraphVersion
	}
	return ""
}

// The top-level message sent by the client for the `ListModels` method.
type ListModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeListModelsRequest *v3.ListModelsRequest `protobuf:"bytes,1,opt,name=diatheke_list_models_request,json=diathekeListModelsRequest,proto3" json:"diatheke_list_models_request,omitempty"`
}

func (x *ListModelsRequest) Reset() {
	*x = ListModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsRequest) ProtoMessage() {}

func (x *ListModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsRequest.ProtoReflect.Descriptor instead.
func (*ListModelsRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{2}
}

func (x *ListModelsRequest) GetDiathekeListModelsRequest() *v3.ListModelsRequest {
	if x != nil {
		return x.DiathekeListModelsRequest
	}
	return nil
}

// A list of models available on the Bluehenge server.
type ListModelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeListModelsResponse *v3.ListModelsResponse `protobuf:"bytes,1,opt,name=diatheke_list_models_response,json=diathekeListModelsResponse,proto3" json:"diatheke_list_models_response,omitempty"`
}

func (x *ListModelsResponse) Reset() {
	*x = ListModelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsResponse) ProtoMessage() {}

func (x *ListModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsResponse.ProtoReflect.Descriptor instead.
func (*ListModelsResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{3}
}

func (x *ListModelsResponse) GetDiathekeListModelsResponse() *v3.ListModelsResponse {
	if x != nil {
		return x.DiathekeListModelsResponse
	}
	return nil
}

// The top-level message sent by the client for the `CreateSession` method.
type CreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeCreateSessionRequest *v3.CreateSessionRequest `protobuf:"bytes,1,opt,name=diatheke_create_session_request,json=diathekeCreateSessionRequest,proto3" json:"diatheke_create_session_request,omitempty"`
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{4}
}

func (x *CreateSessionRequest) GetDiathekeCreateSessionRequest() *v3.CreateSessionRequest {
	if x != nil {
		return x.DiathekeCreateSessionRequest
	}
	return nil
}

// The top-level message sent by the server for the `CreateSession` method.
type CreateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeCreateSessionResponse *v3.CreateSessionResponse `protobuf:"bytes,1,opt,name=diatheke_create_session_response,json=diathekeCreateSessionResponse,proto3" json:"diatheke_create_session_response,omitempty"`
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{5}
}

func (x *CreateSessionResponse) GetDiathekeCreateSessionResponse() *v3.CreateSessionResponse {
	if x != nil {
		return x.DiathekeCreateSessionResponse
	}
	return nil
}

// The top-level message sent by the client for the `DeleteSession` method.
type DeleteSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeDeleteSessionRequest *v3.DeleteSessionRequest `protobuf:"bytes,1,opt,name=diatheke_delete_session_request,json=diathekeDeleteSessionRequest,proto3" json:"diatheke_delete_session_request,omitempty"`
}

func (x *DeleteSessionRequest) Reset() {
	*x = DeleteSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionRequest) ProtoMessage() {}

func (x *DeleteSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSessionRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteSessionRequest) GetDiathekeDeleteSessionRequest() *v3.DeleteSessionRequest {
	if x != nil {
		return x.DiathekeDeleteSessionRequest
	}
	return nil
}

// The top-level message sent by the server for the `DeleteSession` method.
type DeleteSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeDeleteSessionResponse *v3.DeleteSessionResponse `protobuf:"bytes,1,opt,name=diatheke_delete_session_response,json=diathekeDeleteSessionResponse,proto3" json:"diatheke_delete_session_response,omitempty"`
}

func (x *DeleteSessionResponse) Reset() {
	*x = DeleteSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionResponse) ProtoMessage() {}

func (x *DeleteSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionResponse.ProtoReflect.Descriptor instead.
func (*DeleteSessionResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteSessionResponse) GetDiathekeDeleteSessionResponse() *v3.DeleteSessionResponse {
	if x != nil {
		return x.DiathekeDeleteSessionResponse
	}
	return nil
}

// The top-level message sent by the client for the `UpdateSession` method.
type UpdateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeUpdateSessionRequest *v3.UpdateSessionRequest `protobuf:"bytes,1,opt,name=diatheke_update_session_request,json=diathekeUpdateSessionRequest,proto3" json:"diatheke_update_session_request,omitempty"`
}

func (x *UpdateSessionRequest) Reset() {
	*x = UpdateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionRequest) ProtoMessage() {}

func (x *UpdateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSessionRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateSessionRequest) GetDiathekeUpdateSessionRequest() *v3.UpdateSessionRequest {
	if x != nil {
		return x.DiathekeUpdateSessionRequest
	}
	return nil
}

// The top-level message sent by the server for the `UpdateSession` method.
type UpdateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeUpdateSessionResponse *v3.UpdateSessionResponse `protobuf:"bytes,1,opt,name=diatheke_update_session_response,json=diathekeUpdateSessionResponse,proto3" json:"diatheke_update_session_response,omitempty"`
}

func (x *UpdateSessionResponse) Reset() {
	*x = UpdateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionResponse) ProtoMessage() {}

func (x *UpdateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionResponse.ProtoReflect.Descriptor instead.
func (*UpdateSessionResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateSessionResponse) GetDiathekeUpdateSessionResponse() *v3.UpdateSessionResponse {
	if x != nil {
		return x.DiathekeUpdateSessionResponse
	}
	return nil
}

// The top-level message sent by the client for the `StreamASR` method.
type StreamASRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeStreamAsrRequest *v3.StreamASRRequest `protobuf:"bytes,1,opt,name=diatheke_stream_asr_request,json=diathekeStreamAsrRequest,proto3" json:"diatheke_stream_asr_request,omitempty"`
}

func (x *StreamASRRequest) Reset() {
	*x = StreamASRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamASRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamASRRequest) ProtoMessage() {}

func (x *StreamASRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamASRRequest.ProtoReflect.Descriptor instead.
func (*StreamASRRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{10}
}

func (x *StreamASRRequest) GetDiathekeStreamAsrRequest() *v3.StreamASRRequest {
	if x != nil {
		return x.DiathekeStreamAsrRequest
	}
	return nil
}

// The top-level message sent by the server for the `StreamASR` method.
type StreamASRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// could be streamASRresponse instead of data
	DiathekeStreamAsrResponse *v3.StreamASRResponse `protobuf:"bytes,1,opt,name=diatheke_stream_asr_response,json=diathekeStreamAsrResponse,proto3" json:"diatheke_stream_asr_response,omitempty"`
}

func (x *StreamASRResponse) Reset() {
	*x = StreamASRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamASRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamASRResponse) ProtoMessage() {}

func (x *StreamASRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamASRResponse.ProtoReflect.Descriptor instead.
func (*StreamASRResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{11}
}

func (x *StreamASRResponse) GetDiathekeStreamAsrResponse() *v3.StreamASRResponse {
	if x != nil {
		return x.DiathekeStreamAsrResponse
	}
	return nil
}

// The top-level message sent by the client for the `StreamTTS` method.
type StreamTTSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeStreamTtsRequest *v3.StreamTTSRequest `protobuf:"bytes,1,opt,name=diatheke_stream_tts_request,json=diathekeStreamTtsRequest,proto3" json:"diatheke_stream_tts_request,omitempty"`
}

func (x *StreamTTSRequest) Reset() {
	*x = StreamTTSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTTSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTTSRequest) ProtoMessage() {}

func (x *StreamTTSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTTSRequest.ProtoReflect.Descriptor instead.
func (*StreamTTSRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{12}
}

func (x *StreamTTSRequest) GetDiathekeStreamTtsRequest() *v3.StreamTTSRequest {
	if x != nil {
		return x.DiathekeStreamTtsRequest
	}
	return nil
}

// The top-level message sent by the server for the `StreamTTS` method.
type StreamTTSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Audio []byte `protobuf:"bytes,1,opt,name=audio,proto3" json:"audio,omitempty"`
}

func (x *StreamTTSResponse) Reset() {
	*x = StreamTTSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTTSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTTSResponse) ProtoMessage() {}

func (x *StreamTTSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTTSResponse.ProtoReflect.Descriptor instead.
func (*StreamTTSResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{13}
}

func (x *StreamTTSResponse) GetAudio() []byte {
	if x != nil {
		return x.Audio
	}
	return nil
}

// The top-level message sent by the client for the `Transcribe` method.
type TranscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeTranscribeRequest *v3.TranscribeRequest `protobuf:"bytes,1,opt,name=diatheke_transcribe_request,json=diathekeTranscribeRequest,proto3" json:"diatheke_transcribe_request,omitempty"`
}

func (x *TranscribeRequest) Reset() {
	*x = TranscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscribeRequest) ProtoMessage() {}

func (x *TranscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscribeRequest.ProtoReflect.Descriptor instead.
func (*TranscribeRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{14}
}

func (x *TranscribeRequest) GetDiathekeTranscribeRequest() *v3.TranscribeRequest {
	if x != nil {
		return x.DiathekeTranscribeRequest
	}
	return nil
}

// The top-level message sent by the server for the `Transcribe` method.
type TranscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeTranscribeResponse *v3.TranscribeResponse `protobuf:"bytes,1,opt,name=diatheke_transcribe_response,json=diathekeTranscribeResponse,proto3" json:"diatheke_transcribe_response,omitempty"`
}

func (x *TranscribeResponse) Reset() {
	*x = TranscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscribeResponse) ProtoMessage() {}

func (x *TranscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscribeResponse.ProtoReflect.Descriptor instead.
func (*TranscribeResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{15}
}

func (x *TranscribeResponse) GetDiathekeTranscribeResponse() *v3.TranscribeResponse {
	if x != nil {
		return x.DiathekeTranscribeResponse
	}
	return nil
}

// Request for a complete list of all procedures.
type ListProceduresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListProceduresRequest) Reset() {
	*x = ListProceduresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProceduresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProceduresRequest) ProtoMessage() {}

func (x *ListProceduresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProceduresRequest.ProtoReflect.Descriptor instead.
func (*ListProceduresRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{16}
}

// List of all procedures.
// Helpful for displaying a directory or table of contents.
type ListProceduresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of individual procedures. For efficiency, does not
	// return all the information for each step, just the high-level details.
	Procedures []*ProcedureLite `protobuf:"bytes,1,rep,name=procedures,proto3" json:"procedures,omitempty"`
}

func (x *ListProceduresResponse) Reset() {
	*x = ListProceduresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProceduresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProceduresResponse) ProtoMessage() {}

func (x *ListProceduresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProceduresResponse.ProtoReflect.Descriptor instead.
func (*ListProceduresResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{17}
}

func (x *ListProceduresResponse) GetProcedures() []*ProcedureLite {
	if x != nil {
		return x.Procedures
	}
	return nil
}

// Request for a complete list of all trees.
type ListTreesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTreesRequest) Reset() {
	*x = ListTreesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTreesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTreesRequest) ProtoMessage() {}

func (x *ListTreesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTreesRequest.ProtoReflect.Descriptor instead.
func (*ListTreesRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{18}
}

// List of all trees.
// Helpful for displaying a directory or table of contents.
type ListTreesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of individual trees. For efficiency, does not
	// return all the information for each step, just the high-level details.
	Trees []*TreeLite `protobuf:"bytes,1,rep,name=trees,proto3" json:"trees,omitempty"`
}

func (x *ListTreesResponse) Reset() {
	*x = ListTreesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTreesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTreesResponse) ProtoMessage() {}

func (x *ListTreesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTreesResponse.ProtoReflect.Descriptor instead.
func (*ListTreesResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{19}
}

func (x *ListTreesResponse) GetTrees() []*TreeLite {
	if x != nil {
		return x.Trees
	}
	return nil
}

// Input to get a single procedure by its id.
type GetProcedureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name to identify a single procedure
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetProcedureRequest) Reset() {
	*x = GetProcedureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcedureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcedureRequest) ProtoMessage() {}

func (x *GetProcedureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcedureRequest.ProtoReflect.Descriptor instead.
func (*GetProcedureRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{20}
}

func (x *GetProcedureRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Returns all data related to a single procedure.
type GetProcedureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Individual procedure requested.
	Procedure *Procedure `protobuf:"bytes,1,opt,name=procedure,proto3" json:"procedure,omitempty"`
}

func (x *GetProcedureResponse) Reset() {
	*x = GetProcedureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcedureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcedureResponse) ProtoMessage() {}

func (x *GetProcedureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcedureResponse.ProtoReflect.Descriptor instead.
func (*GetProcedureResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{21}
}

func (x *GetProcedureResponse) GetProcedure() *Procedure {
	if x != nil {
		return x.Procedure
	}
	return nil
}

// Input to get a single task by its id.
type GetTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// knowledge graph ID that uniquely identifies a single task
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTaskRequest) Reset() {
	*x = GetTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRequest) ProtoMessage() {}

func (x *GetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{22}
}

func (x *GetTaskRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Returns all data related to a single task.
type GetTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Individual task requested.
	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *GetTaskResponse) Reset() {
	*x = GetTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskResponse) ProtoMessage() {}

func (x *GetTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskResponse.ProtoReflect.Descriptor instead.
func (*GetTaskResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{23}
}

func (x *GetTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

// Input to get a single tree by its id.
type GetTreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name to identify a single tree
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetTreeRequest) Reset() {
	*x = GetTreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTreeRequest) ProtoMessage() {}

func (x *GetTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTreeRequest.ProtoReflect.Descriptor instead.
func (*GetTreeRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{24}
}

func (x *GetTreeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Returns all data related to a single tree.
type GetTreeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Individual tree requested.
	Tree *Tree `protobuf:"bytes,1,opt,name=tree,proto3" json:"tree,omitempty"`
}

func (x *GetTreeResponse) Reset() {
	*x = GetTreeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTreeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTreeResponse) ProtoMessage() {}

func (x *GetTreeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTreeResponse.ProtoReflect.Descriptor instead.
func (*GetTreeResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{25}
}

func (x *GetTreeResponse) GetTree() *Tree {
	if x != nil {
		return x.Tree
	}
	return nil
}

// A simplified representation of a procedure.
// See Procedure for full details of a procedure.
//
// ProcedureLite is useful for getting a full list of all procedures
// without getting all of the underlying data related to all tasks and steps.
type ProcedureLite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the procedure
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// User facing name of the procedure
	ProcedureName string `protobuf:"bytes,2,opt,name=procedure_name,json=procedureName,proto3" json:"procedure_name,omitempty"`
	// Information related to where the Procedure is in the manual PDF used to generate the data.
	Page string `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	// Number of the procedure, as defined by the manual.
	ProcedureNumber string `protobuf:"bytes,4,opt,name=procedure_number,json=procedureNumber,proto3" json:"procedure_number,omitempty"`
	// Information related to the tasks related to the procedure.
	Tasks []*TaskLite `protobuf:"bytes,5,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *ProcedureLite) Reset() {
	*x = ProcedureLite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureLite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureLite) ProtoMessage() {}

func (x *ProcedureLite) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureLite.ProtoReflect.Descriptor instead.
func (*ProcedureLite) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{26}
}

func (x *ProcedureLite) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProcedureLite) GetProcedureName() string {
	if x != nil {
		return x.ProcedureName
	}
	return ""
}

func (x *ProcedureLite) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *ProcedureLite) GetProcedureNumber() string {
	if x != nil {
		return x.ProcedureNumber
	}
	return ""
}

func (x *ProcedureLite) GetTasks() []*TaskLite {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// A simplified representation of a task.
// Useful for getting a full list of all Tasks without
// getting all of the underlying data related to the steps.
type TaskLite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the task
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// User facing name of the task
	TaskName string `protobuf:"bytes,2,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	// Number of the task, as defined by the manual.
	TaskNumber string `protobuf:"bytes,3,opt,name=task_number,json=taskNumber,proto3" json:"task_number,omitempty"`
}

func (x *TaskLite) Reset() {
	*x = TaskLite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLite) ProtoMessage() {}

func (x *TaskLite) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLite.ProtoReflect.Descriptor instead.
func (*TaskLite) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{27}
}

func (x *TaskLite) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskLite) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskLite) GetTaskNumber() string {
	if x != nil {
		return x.TaskNumber
	}
	return ""
}

// A simplified representation of a tree.
// See Tree for full details of a tree.
//
// TreeLite is useful for getting a full list of all trees
// without getting all of the underlying data related to its TreeNodes.
type TreeLite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the tree
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// User facing name of the tree
	TreeName string `protobuf:"bytes,2,opt,name=tree_name,json=treeName,proto3" json:"tree_name,omitempty"`
	// Number of the tree, as defined by the manual.
	TreeNumber string `protobuf:"bytes,3,opt,name=tree_number,json=treeNumber,proto3" json:"tree_number,omitempty"`
}

func (x *TreeLite) Reset() {
	*x = TreeLite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeLite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeLite) ProtoMessage() {}

func (x *TreeLite) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeLite.ProtoReflect.Descriptor instead.
func (*TreeLite) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{28}
}

func (x *TreeLite) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TreeLite) GetTreeName() string {
	if x != nil {
		return x.TreeName
	}
	return ""
}

func (x *TreeLite) GetTreeNumber() string {
	if x != nil {
		return x.TreeNumber
	}
	return ""
}

// Full representation of a procedure, including all sub tasks and steps.
// See also ProcedureLite.
type Procedure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the procedure
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// User facing name of the procedure
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Number of the procedure, as defined by the manual.
	ProcedureNumber string `protobuf:"bytes,3,opt,name=procedure_number,json=procedureNumber,proto3" json:"procedure_number,omitempty"`
	// AdditionalNames of the task
	// Other ways to  refer to the Procedure.
	AdditionalNames []string `protobuf:"bytes,4,rep,name=additional_names,json=additionalNames,proto3" json:"additional_names,omitempty"`
	// A caution that the user should hear before starting work
	PrerequisitesWarningText string `protobuf:"bytes,5,opt,name=prerequisites_warning_text,json=prerequisitesWarningText,proto3" json:"prerequisites_warning_text,omitempty"`
	// List of all Tasks inside of a procedure.
	Tasks []*Task `protobuf:"bytes,6,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *Procedure) Reset() {
	*x = Procedure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Procedure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Procedure) ProtoMessage() {}

func (x *Procedure) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Procedure.ProtoReflect.Descriptor instead.
func (*Procedure) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{29}
}

func (x *Procedure) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Procedure) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Procedure) GetProcedureNumber() string {
	if x != nil {
		return x.ProcedureNumber
	}
	return ""
}

func (x *Procedure) GetAdditionalNames() []string {
	if x != nil {
		return x.AdditionalNames
	}
	return nil
}

func (x *Procedure) GetPrerequisitesWarningText() string {
	if x != nil {
		return x.PrerequisitesWarningText
	}
	return ""
}

func (x *Procedure) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// Data of a task within a procedure
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the task
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// User facing name of the task
	TaskName string `protobuf:"bytes,2,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	// Number of the task, as defined by the manual.
	TaskNumber string `protobuf:"bytes,3,opt,name=task_number,json=taskNumber,proto3" json:"task_number,omitempty"`
	// AdditionalNames of the task
	// Other ways to  refer to the task. See comment in `Procedure`
	AdditionalNames []string `protobuf:"bytes,4,rep,name=additional_names,json=additionalNames,proto3" json:"additional_names,omitempty"`
	// WarningText of the task
	// A specific warning before starting the task
	WarningText string `protobuf:"bytes,5,opt,name=warning_text,json=warningText,proto3" json:"warning_text,omitempty"`
	// List of steps of the task
	Steps []*StepData `protobuf:"bytes,6,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{30}
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *Task) GetTaskNumber() string {
	if x != nil {
		return x.TaskNumber
	}
	return ""
}

func (x *Task) GetAdditionalNames() []string {
	if x != nil {
		return x.AdditionalNames
	}
	return nil
}

func (x *Task) GetWarningText() string {
	if x != nil {
		return x.WarningText
	}
	return ""
}

func (x *Task) GetSteps() []*StepData {
	if x != nil {
		return x.Steps
	}
	return nil
}

// Data of a step within a task
type StepData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the step
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Instructions of the step, pulled directly from the manual.
	InstructionText string `protobuf:"bytes,2,opt,name=instruction_text,json=instructionText,proto3" json:"instruction_text,omitempty"`
	// Summary of the step, helpful for giving a shorter summary of the instruction_text.
	// Not always populated.  When not populated, instruction_text should be used.
	SummaryText string `protobuf:"bytes,3,opt,name=summary_text,json=summaryText,proto3" json:"summary_text,omitempty"`
	// DisplayLabelText of the step
	Person string `protobuf:"bytes,4,opt,name=person,proto3" json:"person,omitempty"`
	// Number of the Task to which this step belongs.
	TaskNumber string `protobuf:"bytes,5,opt,name=task_number,json=taskNumber,proto3" json:"task_number,omitempty"`
	// Number of the task, as defined by the manual.
	StepNumber string `protobuf:"bytes,6,opt,name=step_number,json=stepNumber,proto3" json:"step_number,omitempty"`
	// Page number the step is located at in the pdf.
	Page string `protobuf:"bytes,7,opt,name=page,proto3" json:"page,omitempty"`
	// the type of the step (instruction, warning, step, note). For TTS.
	SegmentType string `protobuf:"bytes,8,opt,name=segment_type,json=segmentType,proto3" json:"segment_type,omitempty"`
	// Image of the step
	// A URL or relative path to where the multiple media is stored
	Image []string `protobuf:"bytes,9,rep,name=image,proto3" json:"image,omitempty"`
	// The parts mentioned in the step
	Parts []string `protobuf:"bytes,11,rep,name=parts,proto3" json:"parts,omitempty"`
	// List of notes of the step
	// User defined notes associated with this specific step
	Notes []*Note `protobuf:"bytes,10,rep,name=notes,proto3" json:"notes,omitempty"`
}

func (x *StepData) Reset() {
	*x = StepData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepData) ProtoMessage() {}

func (x *StepData) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepData.ProtoReflect.Descriptor instead.
func (*StepData) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{31}
}

func (x *StepData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StepData) GetInstructionText() string {
	if x != nil {
		return x.InstructionText
	}
	return ""
}

func (x *StepData) GetSummaryText() string {
	if x != nil {
		return x.SummaryText
	}
	return ""
}

func (x *StepData) GetPerson() string {
	if x != nil {
		return x.Person
	}
	return ""
}

func (x *StepData) GetTaskNumber() string {
	if x != nil {
		return x.TaskNumber
	}
	return ""
}

func (x *StepData) GetStepNumber() string {
	if x != nil {
		return x.StepNumber
	}
	return ""
}

func (x *StepData) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *StepData) GetSegmentType() string {
	if x != nil {
		return x.SegmentType
	}
	return ""
}

func (x *StepData) GetImage() []string {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *StepData) GetParts() []string {
	if x != nil {
		return x.Parts
	}
	return nil
}

func (x *StepData) GetNotes() []*Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

// Representation of the root node of a troubleshooting Tree.
// Contains general information about tree and all child nodes.
type Tree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the tree
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// User facing name of the tree
	TreeName string `protobuf:"bytes,2,opt,name=tree_name,json=treeName,proto3" json:"tree_name,omitempty"`
	// Number of the tree, as defined by the manual.
	TreeNumber string `protobuf:"bytes,3,opt,name=tree_number,json=treeNumber,proto3" json:"tree_number,omitempty"`
	// AdditionalNames of the task
	// Other ways to refer to the tree.
	AdditionalNames []string `protobuf:"bytes,4,rep,name=additional_names,json=additionalNames,proto3" json:"additional_names,omitempty"`
	// A caution that the user should hear before starting work
	PrerequisitesWarningText string `protobuf:"bytes,5,opt,name=prerequisites_warning_text,json=prerequisitesWarningText,proto3" json:"prerequisites_warning_text,omitempty"`
	// Ordered list (not any treelike structure) of all nodes inside of a tree.
	Nodes []*TreeNode `protobuf:"bytes,6,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *Tree) Reset() {
	*x = Tree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tree) ProtoMessage() {}

func (x *Tree) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tree.ProtoReflect.Descriptor instead.
func (*Tree) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{32}
}

func (x *Tree) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tree) GetTreeName() string {
	if x != nil {
		return x.TreeName
	}
	return ""
}

func (x *Tree) GetTreeNumber() string {
	if x != nil {
		return x.TreeNumber
	}
	return ""
}

func (x *Tree) GetAdditionalNames() []string {
	if x != nil {
		return x.AdditionalNames
	}
	return nil
}

func (x *Tree) GetPrerequisitesWarningText() string {
	if x != nil {
		return x.PrerequisitesWarningText
	}
	return ""
}

func (x *Tree) GetNodes() []*TreeNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// Representation of single node in a Tree.
type TreeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the tree
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Index/key of node in the tree
	NodeIndex string `protobuf:"bytes,2,opt,name=node_index,json=nodeIndex,proto3" json:"node_index,omitempty"`
	// Instructions of the step, pulled directly from the manual.
	InstructionText string `protobuf:"bytes,3,opt,name=instruction_text,json=instructionText,proto3" json:"instruction_text,omitempty"`
	// List of troubleshooting options at given step
	Options []*TroubleOptions `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
	// Image of the step
	// A URL or relative path to where the multiple media is stored
	Image []string `protobuf:"bytes,5,rep,name=image,proto3" json:"image,omitempty"`
	// The parts mentioned in the step
	Parts []string `protobuf:"bytes,6,rep,name=parts,proto3" json:"parts,omitempty"`
	// List of notes of the step
	// User defined notes associated with this specific step
	Notes []*Note `protobuf:"bytes,7,rep,name=notes,proto3" json:"notes,omitempty"`
}

func (x *TreeNode) Reset() {
	*x = TreeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeNode) ProtoMessage() {}

func (x *TreeNode) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeNode.ProtoReflect.Descriptor instead.
func (*TreeNode) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{33}
}

func (x *TreeNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TreeNode) GetNodeIndex() string {
	if x != nil {
		return x.NodeIndex
	}
	return ""
}

func (x *TreeNode) GetInstructionText() string {
	if x != nil {
		return x.InstructionText
	}
	return ""
}

func (x *TreeNode) GetOptions() []*TroubleOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *TreeNode) GetImage() []string {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *TreeNode) GetParts() []string {
	if x != nil {
		return x.Parts
	}
	return nil
}

func (x *TreeNode) GetNotes() []*Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

// User defined notes.
type TroubleOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Condition that needs to be true for next step
	// e.g. "Yes", "No", "On", "Off", "Has fuel", etc.
	Condition string `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	// The node_index of the next step
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *TroubleOptions) Reset() {
	*x = TroubleOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TroubleOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TroubleOptions) ProtoMessage() {}

func (x *TroubleOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TroubleOptions.ProtoReflect.Descriptor instead.
func (*TroubleOptions) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{34}
}

func (x *TroubleOptions) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *TroubleOptions) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

// User defined notes.
type Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text of the note
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Note) Reset() {
	*x = Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{35}
}

func (x *Note) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Input to save a note
type SaveNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text of a note to save
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// Step id of a note to save
	StepId string `protobuf:"bytes,2,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
}

func (x *SaveNoteRequest) Reset() {
	*x = SaveNoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveNoteRequest) ProtoMessage() {}

func (x *SaveNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveNoteRequest.ProtoReflect.Descriptor instead.
func (*SaveNoteRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{36}
}

func (x *SaveNoteRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SaveNoteRequest) GetStepId() string {
	if x != nil {
		return x.StepId
	}
	return ""
}

// Empty response once the note is saved
type SaveNoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveNoteResponse) Reset() {
	*x = SaveNoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveNoteResponse) ProtoMessage() {}

func (x *SaveNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveNoteResponse.ProtoReflect.Descriptor instead.
func (*SaveNoteResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{37}
}

// Request for a complete list of all entities.
type ListEntitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListEntitiesRequest) Reset() {
	*x = ListEntitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntitiesRequest) ProtoMessage() {}

func (x *ListEntitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntitiesRequest.ProtoReflect.Descriptor instead.
func (*ListEntitiesRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{38}
}

// List of all entities.
// Helpful for fuzzy matching entity names
type ListEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities []*Entity `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListEntitiesResponse) Reset() {
	*x = ListEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntitiesResponse) ProtoMessage() {}

func (x *ListEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntitiesResponse.ProtoReflect.Descriptor instead.
func (*ListEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{39}
}

func (x *ListEntitiesResponse) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Input to get an extraction triple about an entity and relation
type GetExtractionRelationshipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of entity
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Name of Relation
	Relation string `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
}

func (x *GetExtractionRelationshipRequest) Reset() {
	*x = GetExtractionRelationshipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExtractionRelationshipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExtractionRelationshipRequest) ProtoMessage() {}

func (x *GetExtractionRelationshipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExtractionRelationshipRequest.ProtoReflect.Descriptor instead.
func (*GetExtractionRelationshipRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{40}
}

func (x *GetExtractionRelationshipRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetExtractionRelationshipRequest) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

// Output of GetExtractionRelationship.
type GetExtractionRelationshipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The extraction data object.
	Extraction *Extraction `protobuf:"bytes,1,opt,name=extraction,proto3" json:"extraction,omitempty"`
}

func (x *GetExtractionRelationshipResponse) Reset() {
	*x = GetExtractionRelationshipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExtractionRelationshipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExtractionRelationshipResponse) ProtoMessage() {}

func (x *GetExtractionRelationshipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExtractionRelationshipResponse.ProtoReflect.Descriptor instead.
func (*GetExtractionRelationshipResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{41}
}

func (x *GetExtractionRelationshipResponse) GetExtraction() *Extraction {
	if x != nil {
		return x.Extraction
	}
	return nil
}

// Extractions contain Subject-Relation-Object sets. For example,
// subject:"sky", relation:"has color", object:"blue".
type Extraction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the extraction in the knowledge graph.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The subject of the extraction
	Subject *Entity `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	// The object of the extraction
	Object *Entity `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	// The relation of the extraction
	Relation *Relation `protobuf:"bytes,4,opt,name=relation,proto3" json:"relation,omitempty"`
}

func (x *Extraction) Reset() {
	*x = Extraction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extraction) ProtoMessage() {}

func (x *Extraction) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extraction.ProtoReflect.Descriptor instead.
func (*Extraction) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{42}
}

func (x *Extraction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Extraction) GetSubject() *Entity {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Extraction) GetObject() *Entity {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *Extraction) GetRelation() *Relation {
	if x != nil {
		return x.Relation
	}
	return nil
}

// Input to get an extraction triple about an entity and relation
type GetEntityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of entity
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetEntityRequest) Reset() {
	*x = GetEntityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntityRequest) ProtoMessage() {}

func (x *GetEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntityRequest.ProtoReflect.Descriptor instead.
func (*GetEntityRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{43}
}

func (x *GetEntityRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Output of GetExtractionRelationship.
type GetEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The extraction data object.
	Entity *Entity `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
}

func (x *GetEntityResponse) Reset() {
	*x = GetEntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntityResponse) ProtoMessage() {}

func (x *GetEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntityResponse.ProtoReflect.Descriptor instead.
func (*GetEntityResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{44}
}

func (x *GetEntityResponse) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

// Entities are one of the core information storing blocks in
// the knowledge graph. They can have images or be part of
// extractions. This makes them extremely versitile.
// Entities are used when you want to display information not
// contained in Procedures or Tree. For example, question/answering
// content, details about aircraft parts, etc.
type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the entity in the knowledge graph.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The text associated with the entity. These are the names we
	// use to lookup an entity.
	Mentions *Mention `protobuf:"bytes,2,opt,name=mentions,proto3" json:"mentions,omitempty"`
	// The 'official' name of the entity
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// (Optional) A human readable description of the entity
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// (Optional) A human readable description of how to find the entity
	Location string `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	// (Optional) The page where the information about the entity is found.
	// Often takes the form: "myDocument.PDF#page=17"
	Page string `protobuf:"bytes,6,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{45}
}

func (x *Entity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Entity) GetMentions() *Mention {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *Entity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Entity) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Entity) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Entity) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

// Relations are the connections between entities. A relation
// can relate to any property. E.g, in the example "The sky
// is blue." the relation is "has color".
type Relation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the mention in the knowledge graph.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The text associated with the relation
	Mentions *Mention `protobuf:"bytes,2,opt,name=mentions,proto3" json:"mentions,omitempty"`
}

func (x *Relation) Reset() {
	*x = Relation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relation) ProtoMessage() {}

func (x *Relation) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relation.ProtoReflect.Descriptor instead.
func (*Relation) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{46}
}

func (x *Relation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Relation) GetMentions() *Mention {
	if x != nil {
		return x.Mentions
	}
	return nil
}

// The text asociated with Entities & Relations. If an entity
// has multiple names, there will be one entity but two mentions.
type Mention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Arbitrary text field asociated with Entities & Relations
	Text []string `protobuf:"bytes,1,rep,name=text,proto3" json:"text,omitempty"`
}

func (x *Mention) Reset() {
	*x = Mention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mention) ProtoMessage() {}

func (x *Mention) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mention.ProtoReflect.Descriptor instead.
func (*Mention) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{47}
}

func (x *Mention) GetText() []string {
	if x != nil {
		return x.Text
	}
	return nil
}

// Input to get the entity of an image
type GetEntityImageDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of an entity image
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetEntityImageDataRequest) Reset() {
	*x = GetEntityImageDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntityImageDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntityImageDataRequest) ProtoMessage() {}

func (x *GetEntityImageDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntityImageDataRequest.ProtoReflect.Descriptor instead.
func (*GetEntityImageDataRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{48}
}

func (x *GetEntityImageDataRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Output of get entity image
type GetEntityImageDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of images data.
	ImageDataList []*ImageData `protobuf:"bytes,1,rep,name=image_data_list,json=imageDataList,proto3" json:"image_data_list,omitempty"`
}

func (x *GetEntityImageDataResponse) Reset() {
	*x = GetEntityImageDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntityImageDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntityImageDataResponse) ProtoMessage() {}

func (x *GetEntityImageDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntityImageDataResponse.ProtoReflect.Descriptor instead.
func (*GetEntityImageDataResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{49}
}

func (x *GetEntityImageDataResponse) GetImageDataList() []*ImageData {
	if x != nil {
		return x.ImageDataList
	}
	return nil
}

// Data related to an image.
type ImageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of an image.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// File path of an image.  Should be sent to the http server to get the actual image.
	HttpPath string `protobuf:"bytes,2,opt,name=http_path,json=httpPath,proto3" json:"http_path,omitempty"`
	// Caption of an image. i.e. "Figure 4.3: removal of alternator"
	Caption string `protobuf:"bytes,3,opt,name=caption,proto3" json:"caption,omitempty"`
}

func (x *ImageData) Reset() {
	*x = ImageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageData) ProtoMessage() {}

func (x *ImageData) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageData.ProtoReflect.Descriptor instead.
func (*ImageData) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP(), []int{50}
}

func (x *ImageData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ImageData) GetHttpPath() string {
	if x != nil {
		return x.HttpPath
	}
	return ""
}

func (x *ImageData) GetCaption() string {
	if x != nil {
		return x.Caption
	}
	return ""
}

var File_cobaltspeech_bluehenge_v2_bluehenge_proto protoreflect.FileDescriptor

var file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDesc = []byte{
	0x0a, 0x29, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2f, 0x62,
	0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x62, 0x6c, 0x75, 0x65,
	0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x63, 0x6f, 0x62,
	0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65,
	0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x1a, 0x27, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2f, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2f, 0x76, 0x33,
	0x2f, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x10, 0x0a,
	0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xfe, 0x01, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67,
	0x65, 0x12, 0x65, 0x0a, 0x19, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x17, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x81, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x1c, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65,
	0x6b, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74,
	0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x64, 0x69, 0x61, 0x74, 0x68,
	0x65, 0x6b, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x1d, 0x64,
	0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x1a, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x75, 0x0a, 0x1f, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b,
	0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69,
	0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1c,
	0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x91, 0x01, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x20, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65,
	0x6b, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e,
	0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x1d, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x8d, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x75, 0x0a, 0x1f, 0x64, 0x69, 0x61,
	0x74, 0x68, 0x65, 0x6b, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x1c, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x91, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x20, 0x64, 0x69,
	0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x1d, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x75, 0x0a,
	0x1f, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76,
	0x33, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1c, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78,
	0x0a, 0x20, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65,
	0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x1d, 0x64, 0x69, 0x61, 0x74, 0x68,
	0x65, 0x6b, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x41, 0x53, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x1b,
	0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x61, 0x73, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x41, 0x53, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x18, 0x64,
	0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x73, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x41, 0x53, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a,
	0x1c, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x61, 0x73, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x53, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x19, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x41, 0x73, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x0a, 0x10, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x54, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x69, 0x0a, 0x1b, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x74, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x54, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x18, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x54, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x29, 0x0a, 0x11, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x54, 0x54, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x1b, 0x64,
	0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e,
	0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x64,
	0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6e, 0x0a, 0x1c, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x1a, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x17, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e,
	0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x74, 0x65,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x22, 0x12, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x4e, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x74, 0x72, 0x65, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x52, 0x05, 0x74, 0x72, 0x65, 0x65, 0x73,
	0x22, 0x29, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e,
	0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x62,
	0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65,
	0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73,
	0x6b, 0x22, 0x24, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x72,
	0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67,
	0x65, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x22,
	0xc0, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x74,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x74, 0x65, 0x52, 0x05, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x22, 0x58, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x58, 0x0a, 0x08,
	0x54, 0x72, 0x65, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x65,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x65, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xfa, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c,
	0x0a, 0x1a, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x73, 0x5f,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65,
	0x73, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68,
	0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x73, 0x74,
	0x65, 0x70, 0x73, 0x22, 0xdc, 0x02, 0x0a, 0x08, 0x53, 0x74, 0x65, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x73,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x65, 0x70, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x65, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x62,
	0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65,
	0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x22, 0xf8, 0x01, 0x0a, 0x04, 0x54, 0x72, 0x65, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x72, 0x65, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x65, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x73, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x73, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72,
	0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x8c, 0x02,
	0x0a, 0x08, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x72, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x0e,
	0x54, 0x72, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1a,
	0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3e, 0x0a, 0x0f, 0x53, 0x61,
	0x76, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x65, 0x70, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x61,
	0x76, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x52, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x6a, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x62, 0x61,
	0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e,
	0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd5, 0x01, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67,
	0x65, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xbe, 0x01, 0x0a,
	0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x62, 0x61,
	0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e,
	0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x5a, 0x0a,
	0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68,
	0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x1d, 0x0a, 0x07, 0x4d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x2b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6a, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x52, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xd6, 0x13, 0x0a, 0x10, 0x42, 0x6c, 0x75, 0x65, 0x68, 0x65,
	0x6e, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x79, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x32, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x94, 0x01,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2f, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x94, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x94, 0x01, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x53, 0x52, 0x12,
	0x2b, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x41, 0x53, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41,
	0x53, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x6a,
	0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x54, 0x53, 0x12, 0x2b, 0x2e, 0x63, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68,
	0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x54,
	0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67,
	0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x54, 0x53, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x6f, 0x0a, 0x0a, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67,
	0x65, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x95, 0x01, 0x0a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x12, 0x30,
	0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x65, 0x65,
	0x73, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x72, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x74, 0x72, 0x65, 0x65, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67,
	0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67,
	0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67,
	0x65, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67,
	0x65, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x7c, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32,
	0x2f, 0x67, 0x65, 0x74, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x7c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x67,
	0x65, 0x74, 0x74, 0x72, 0x65, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x4e,
	0x6f, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x61, 0x76, 0x65,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32,
	0x2f, 0x73, 0x61, 0x76, 0x65, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0xc4, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x3b, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65, 0x74, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x12, 0x84, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2b,
	0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68,
	0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0xa4, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34,
	0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f,
	0x67, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x80,
	0x02, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x32,
	0x42, 0x0e, 0x42, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2f, 0x67, 0x6f, 0x2d, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2f, 0x76,
	0x32, 0x3b, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x76, 0x32, 0xa2, 0x02, 0x03,
	0x43, 0x42, 0x58, 0xaa, 0x02, 0x19, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x56, 0x32, 0xca,
	0x02, 0x19, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5c, 0x42,
	0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x25, 0x43, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5c, 0x42, 0x6c, 0x75, 0x65, 0x68,
	0x65, 0x6e, 0x67, 0x65, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x1b, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x3a, 0x3a, 0x42, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x3a, 0x3a, 0x56,
	0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescOnce sync.Once
	file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescData = file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDesc
)

func file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescGZIP() []byte {
	file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescOnce.Do(func() {
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescData = protoimpl.X.CompressGZIP(file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescData)
	})
	return file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDescData
}

var file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_cobaltspeech_bluehenge_v2_bluehenge_proto_goTypes = []interface{}{
	(*VersionRequest)(nil),                    // 0: cobaltspeech.bluehenge.v2.VersionRequest
	(*VersionResponse)(nil),                   // 1: cobaltspeech.bluehenge.v2.VersionResponse
	(*ListModelsRequest)(nil),                 // 2: cobaltspeech.bluehenge.v2.ListModelsRequest
	(*ListModelsResponse)(nil),                // 3: cobaltspeech.bluehenge.v2.ListModelsResponse
	(*CreateSessionRequest)(nil),              // 4: cobaltspeech.bluehenge.v2.CreateSessionRequest
	(*CreateSessionResponse)(nil),             // 5: cobaltspeech.bluehenge.v2.CreateSessionResponse
	(*DeleteSessionRequest)(nil),              // 6: cobaltspeech.bluehenge.v2.DeleteSessionRequest
	(*DeleteSessionResponse)(nil),             // 7: cobaltspeech.bluehenge.v2.DeleteSessionResponse
	(*UpdateSessionRequest)(nil),              // 8: cobaltspeech.bluehenge.v2.UpdateSessionRequest
	(*UpdateSessionResponse)(nil),             // 9: cobaltspeech.bluehenge.v2.UpdateSessionResponse
	(*StreamASRRequest)(nil),                  // 10: cobaltspeech.bluehenge.v2.StreamASRRequest
	(*StreamASRResponse)(nil),                 // 11: cobaltspeech.bluehenge.v2.StreamASRResponse
	(*StreamTTSRequest)(nil),                  // 12: cobaltspeech.bluehenge.v2.StreamTTSRequest
	(*StreamTTSResponse)(nil),                 // 13: cobaltspeech.bluehenge.v2.StreamTTSResponse
	(*TranscribeRequest)(nil),                 // 14: cobaltspeech.bluehenge.v2.TranscribeRequest
	(*TranscribeResponse)(nil),                // 15: cobaltspeech.bluehenge.v2.TranscribeResponse
	(*ListProceduresRequest)(nil),             // 16: cobaltspeech.bluehenge.v2.ListProceduresRequest
	(*ListProceduresResponse)(nil),            // 17: cobaltspeech.bluehenge.v2.ListProceduresResponse
	(*ListTreesRequest)(nil),                  // 18: cobaltspeech.bluehenge.v2.ListTreesRequest
	(*ListTreesResponse)(nil),                 // 19: cobaltspeech.bluehenge.v2.ListTreesResponse
	(*GetProcedureRequest)(nil),               // 20: cobaltspeech.bluehenge.v2.GetProcedureRequest
	(*GetProcedureResponse)(nil),              // 21: cobaltspeech.bluehenge.v2.GetProcedureResponse
	(*GetTaskRequest)(nil),                    // 22: cobaltspeech.bluehenge.v2.GetTaskRequest
	(*GetTaskResponse)(nil),                   // 23: cobaltspeech.bluehenge.v2.GetTaskResponse
	(*GetTreeRequest)(nil),                    // 24: cobaltspeech.bluehenge.v2.GetTreeRequest
	(*GetTreeResponse)(nil),                   // 25: cobaltspeech.bluehenge.v2.GetTreeResponse
	(*ProcedureLite)(nil),                     // 26: cobaltspeech.bluehenge.v2.ProcedureLite
	(*TaskLite)(nil),                          // 27: cobaltspeech.bluehenge.v2.TaskLite
	(*TreeLite)(nil),                          // 28: cobaltspeech.bluehenge.v2.TreeLite
	(*Procedure)(nil),                         // 29: cobaltspeech.bluehenge.v2.Procedure
	(*Task)(nil),                              // 30: cobaltspeech.bluehenge.v2.Task
	(*StepData)(nil),                          // 31: cobaltspeech.bluehenge.v2.StepData
	(*Tree)(nil),                              // 32: cobaltspeech.bluehenge.v2.Tree
	(*TreeNode)(nil),                          // 33: cobaltspeech.bluehenge.v2.TreeNode
	(*TroubleOptions)(nil),                    // 34: cobaltspeech.bluehenge.v2.TroubleOptions
	(*Note)(nil),                              // 35: cobaltspeech.bluehenge.v2.Note
	(*SaveNoteRequest)(nil),                   // 36: cobaltspeech.bluehenge.v2.SaveNoteRequest
	(*SaveNoteResponse)(nil),                  // 37: cobaltspeech.bluehenge.v2.SaveNoteResponse
	(*ListEntitiesRequest)(nil),               // 38: cobaltspeech.bluehenge.v2.ListEntitiesRequest
	(*ListEntitiesResponse)(nil),              // 39: cobaltspeech.bluehenge.v2.ListEntitiesResponse
	(*GetExtractionRelationshipRequest)(nil),  // 40: cobaltspeech.bluehenge.v2.GetExtractionRelationshipRequest
	(*GetExtractionRelationshipResponse)(nil), // 41: cobaltspeech.bluehenge.v2.GetExtractionRelationshipResponse
	(*Extraction)(nil),                        // 42: cobaltspeech.bluehenge.v2.Extraction
	(*GetEntityRequest)(nil),                  // 43: cobaltspeech.bluehenge.v2.GetEntityRequest
	(*GetEntityResponse)(nil),                 // 44: cobaltspeech.bluehenge.v2.GetEntityResponse
	(*Entity)(nil),                            // 45: cobaltspeech.bluehenge.v2.Entity
	(*Relation)(nil),                          // 46: cobaltspeech.bluehenge.v2.Relation
	(*Mention)(nil),                           // 47: cobaltspeech.bluehenge.v2.Mention
	(*GetEntityImageDataRequest)(nil),         // 48: cobaltspeech.bluehenge.v2.GetEntityImageDataRequest
	(*GetEntityImageDataResponse)(nil),        // 49: cobaltspeech.bluehenge.v2.GetEntityImageDataResponse
	(*ImageData)(nil),                         // 50: cobaltspeech.bluehenge.v2.ImageData
	(*v3.VersionResponse)(nil),                // 51: cobaltspeech.diatheke.v3.VersionResponse
	(*v3.ListModelsRequest)(nil),              // 52: cobaltspeech.diatheke.v3.ListModelsRequest
	(*v3.ListModelsResponse)(nil),             // 53: cobaltspeech.diatheke.v3.ListModelsResponse
	(*v3.CreateSessionRequest)(nil),           // 54: cobaltspeech.diatheke.v3.CreateSessionRequest
	(*v3.CreateSessionResponse)(nil),          // 55: cobaltspeech.diatheke.v3.CreateSessionResponse
	(*v3.DeleteSessionRequest)(nil),           // 56: cobaltspeech.diatheke.v3.DeleteSessionRequest
	(*v3.DeleteSessionResponse)(nil),          // 57: cobaltspeech.diatheke.v3.DeleteSessionResponse
	(*v3.UpdateSessionRequest)(nil),           // 58: cobaltspeech.diatheke.v3.UpdateSessionRequest
	(*v3.UpdateSessionResponse)(nil),          // 59: cobaltspeech.diatheke.v3.UpdateSessionResponse
	(*v3.StreamASRRequest)(nil),               // 60: cobaltspeech.diatheke.v3.StreamASRRequest
	(*v3.StreamASRResponse)(nil),              // 61: cobaltspeech.diatheke.v3.StreamASRResponse
	(*v3.StreamTTSRequest)(nil),               // 62: cobaltspeech.diatheke.v3.StreamTTSRequest
	(*v3.TranscribeRequest)(nil),              // 63: cobaltspeech.diatheke.v3.TranscribeRequest
	(*v3.TranscribeResponse)(nil),             // 64: cobaltspeech.diatheke.v3.TranscribeResponse
}
var file_cobaltspeech_bluehenge_v2_bluehenge_proto_depIdxs = []int32{
	51, // 0: cobaltspeech.bluehenge.v2.VersionResponse.diatheke_version_response:type_name -> cobaltspeech.diatheke.v3.VersionResponse
	52, // 1: cobaltspeech.bluehenge.v2.ListModelsRequest.diatheke_list_models_request:type_name -> cobaltspeech.diatheke.v3.ListModelsRequest
	53, // 2: cobaltspeech.bluehenge.v2.ListModelsResponse.diatheke_list_models_response:type_name -> cobaltspeech.diatheke.v3.ListModelsResponse
	54, // 3: cobaltspeech.bluehenge.v2.CreateSessionRequest.diatheke_create_session_request:type_name -> cobaltspeech.diatheke.v3.CreateSessionRequest
	55, // 4: cobaltspeech.bluehenge.v2.CreateSessionResponse.diatheke_create_session_response:type_name -> cobaltspeech.diatheke.v3.CreateSessionResponse
	56, // 5: cobaltspeech.bluehenge.v2.DeleteSessionRequest.diatheke_delete_session_request:type_name -> cobaltspeech.diatheke.v3.DeleteSessionRequest
	57, // 6: cobaltspeech.bluehenge.v2.DeleteSessionResponse.diatheke_delete_session_response:type_name -> cobaltspeech.diatheke.v3.DeleteSessionResponse
	58, // 7: cobaltspeech.bluehenge.v2.UpdateSessionRequest.diatheke_update_session_request:type_name -> cobaltspeech.diatheke.v3.UpdateSessionRequest
	59, // 8: cobaltspeech.bluehenge.v2.UpdateSessionResponse.diatheke_update_session_response:type_name -> cobaltspeech.diatheke.v3.UpdateSessionResponse
	60, // 9: cobaltspeech.bluehenge.v2.StreamASRRequest.diatheke_stream_asr_request:type_name -> cobaltspeech.diatheke.v3.StreamASRRequest
	61, // 10: cobaltspeech.bluehenge.v2.StreamASRResponse.diatheke_stream_asr_response:type_name -> cobaltspeech.diatheke.v3.StreamASRResponse
	62, // 11: cobaltspeech.bluehenge.v2.StreamTTSRequest.diatheke_stream_tts_request:type_name -> cobaltspeech.diatheke.v3.StreamTTSRequest
	63, // 12: cobaltspeech.bluehenge.v2.TranscribeRequest.diatheke_transcribe_request:type_name -> cobaltspeech.diatheke.v3.TranscribeRequest
	64, // 13: cobaltspeech.bluehenge.v2.TranscribeResponse.diatheke_transcribe_response:type_name -> cobaltspeech.diatheke.v3.TranscribeResponse
	26, // 14: cobaltspeech.bluehenge.v2.ListProceduresResponse.procedures:type_name -> cobaltspeech.bluehenge.v2.ProcedureLite
	28, // 15: cobaltspeech.bluehenge.v2.ListTreesResponse.trees:type_name -> cobaltspeech.bluehenge.v2.TreeLite
	29, // 16: cobaltspeech.bluehenge.v2.GetProcedureResponse.procedure:type_name -> cobaltspeech.bluehenge.v2.Procedure
	30, // 17: cobaltspeech.bluehenge.v2.GetTaskResponse.task:type_name -> cobaltspeech.bluehenge.v2.Task
	32, // 18: cobaltspeech.bluehenge.v2.GetTreeResponse.tree:type_name -> cobaltspeech.bluehenge.v2.Tree
	27, // 19: cobaltspeech.bluehenge.v2.ProcedureLite.tasks:type_name -> cobaltspeech.bluehenge.v2.TaskLite
	30, // 20: cobaltspeech.bluehenge.v2.Procedure.tasks:type_name -> cobaltspeech.bluehenge.v2.Task
	31, // 21: cobaltspeech.bluehenge.v2.Task.steps:type_name -> cobaltspeech.bluehenge.v2.StepData
	35, // 22: cobaltspeech.bluehenge.v2.StepData.notes:type_name -> cobaltspeech.bluehenge.v2.Note
	33, // 23: cobaltspeech.bluehenge.v2.Tree.nodes:type_name -> cobaltspeech.bluehenge.v2.TreeNode
	34, // 24: cobaltspeech.bluehenge.v2.TreeNode.options:type_name -> cobaltspeech.bluehenge.v2.TroubleOptions
	35, // 25: cobaltspeech.bluehenge.v2.TreeNode.notes:type_name -> cobaltspeech.bluehenge.v2.Note
	45, // 26: cobaltspeech.bluehenge.v2.ListEntitiesResponse.entities:type_name -> cobaltspeech.bluehenge.v2.Entity
	42, // 27: cobaltspeech.bluehenge.v2.GetExtractionRelationshipResponse.extraction:type_name -> cobaltspeech.bluehenge.v2.Extraction
	45, // 28: cobaltspeech.bluehenge.v2.Extraction.subject:type_name -> cobaltspeech.bluehenge.v2.Entity
	45, // 29: cobaltspeech.bluehenge.v2.Extraction.object:type_name -> cobaltspeech.bluehenge.v2.Entity
	46, // 30: cobaltspeech.bluehenge.v2.Extraction.relation:type_name -> cobaltspeech.bluehenge.v2.Relation
	45, // 31: cobaltspeech.bluehenge.v2.GetEntityResponse.entity:type_name -> cobaltspeech.bluehenge.v2.Entity
	47, // 32: cobaltspeech.bluehenge.v2.Entity.mentions:type_name -> cobaltspeech.bluehenge.v2.Mention
	47, // 33: cobaltspeech.bluehenge.v2.Relation.mentions:type_name -> cobaltspeech.bluehenge.v2.Mention
	50, // 34: cobaltspeech.bluehenge.v2.GetEntityImageDataResponse.image_data_list:type_name -> cobaltspeech.bluehenge.v2.ImageData
	0,  // 35: cobaltspeech.bluehenge.v2.BluehengeService.Version:input_type -> cobaltspeech.bluehenge.v2.VersionRequest
	2,  // 36: cobaltspeech.bluehenge.v2.BluehengeService.ListModels:input_type -> cobaltspeech.bluehenge.v2.ListModelsRequest
	4,  // 37: cobaltspeech.bluehenge.v2.BluehengeService.CreateSession:input_type -> cobaltspeech.bluehenge.v2.CreateSessionRequest
	6,  // 38: cobaltspeech.bluehenge.v2.BluehengeService.DeleteSession:input_type -> cobaltspeech.bluehenge.v2.DeleteSessionRequest
	8,  // 39: cobaltspeech.bluehenge.v2.BluehengeService.UpdateSession:input_type -> cobaltspeech.bluehenge.v2.UpdateSessionRequest
	10, // 40: cobaltspeech.bluehenge.v2.BluehengeService.StreamASR:input_type -> cobaltspeech.bluehenge.v2.StreamASRRequest
	12, // 41: cobaltspeech.bluehenge.v2.BluehengeService.StreamTTS:input_type -> cobaltspeech.bluehenge.v2.StreamTTSRequest
	14, // 42: cobaltspeech.bluehenge.v2.BluehengeService.Transcribe:input_type -> cobaltspeech.bluehenge.v2.TranscribeRequest
	16, // 43: cobaltspeech.bluehenge.v2.BluehengeService.ListProcedures:input_type -> cobaltspeech.bluehenge.v2.ListProceduresRequest
	18, // 44: cobaltspeech.bluehenge.v2.BluehengeService.ListTrees:input_type -> cobaltspeech.bluehenge.v2.ListTreesRequest
	38, // 45: cobaltspeech.bluehenge.v2.BluehengeService.ListEntities:input_type -> cobaltspeech.bluehenge.v2.ListEntitiesRequest
	20, // 46: cobaltspeech.bluehenge.v2.BluehengeService.GetProcedure:input_type -> cobaltspeech.bluehenge.v2.GetProcedureRequest
	22, // 47: cobaltspeech.bluehenge.v2.BluehengeService.GetTask:input_type -> cobaltspeech.bluehenge.v2.GetTaskRequest
	24, // 48: cobaltspeech.bluehenge.v2.BluehengeService.GetTree:input_type -> cobaltspeech.bluehenge.v2.GetTreeRequest
	36, // 49: cobaltspeech.bluehenge.v2.BluehengeService.SaveNote:input_type -> cobaltspeech.bluehenge.v2.SaveNoteRequest
	40, // 50: cobaltspeech.bluehenge.v2.BluehengeService.GetExtractionRelationship:input_type -> cobaltspeech.bluehenge.v2.GetExtractionRelationshipRequest
	43, // 51: cobaltspeech.bluehenge.v2.BluehengeService.GetEntity:input_type -> cobaltspeech.bluehenge.v2.GetEntityRequest
	48, // 52: cobaltspeech.bluehenge.v2.BluehengeService.GetEntityImageData:input_type -> cobaltspeech.bluehenge.v2.GetEntityImageDataRequest
	1,  // 53: cobaltspeech.bluehenge.v2.BluehengeService.Version:output_type -> cobaltspeech.bluehenge.v2.VersionResponse
	3,  // 54: cobaltspeech.bluehenge.v2.BluehengeService.ListModels:output_type -> cobaltspeech.bluehenge.v2.ListModelsResponse
	5,  // 55: cobaltspeech.bluehenge.v2.BluehengeService.CreateSession:output_type -> cobaltspeech.bluehenge.v2.CreateSessionResponse
	7,  // 56: cobaltspeech.bluehenge.v2.BluehengeService.DeleteSession:output_type -> cobaltspeech.bluehenge.v2.DeleteSessionResponse
	9,  // 57: cobaltspeech.bluehenge.v2.BluehengeService.UpdateSession:output_type -> cobaltspeech.bluehenge.v2.UpdateSessionResponse
	11, // 58: cobaltspeech.bluehenge.v2.BluehengeService.StreamASR:output_type -> cobaltspeech.bluehenge.v2.StreamASRResponse
	13, // 59: cobaltspeech.bluehenge.v2.BluehengeService.StreamTTS:output_type -> cobaltspeech.bluehenge.v2.StreamTTSResponse
	15, // 60: cobaltspeech.bluehenge.v2.BluehengeService.Transcribe:output_type -> cobaltspeech.bluehenge.v2.TranscribeResponse
	17, // 61: cobaltspeech.bluehenge.v2.BluehengeService.ListProcedures:output_type -> cobaltspeech.bluehenge.v2.ListProceduresResponse
	19, // 62: cobaltspeech.bluehenge.v2.BluehengeService.ListTrees:output_type -> cobaltspeech.bluehenge.v2.ListTreesResponse
	39, // 63: cobaltspeech.bluehenge.v2.BluehengeService.ListEntities:output_type -> cobaltspeech.bluehenge.v2.ListEntitiesResponse
	21, // 64: cobaltspeech.bluehenge.v2.BluehengeService.GetProcedure:output_type -> cobaltspeech.bluehenge.v2.GetProcedureResponse
	23, // 65: cobaltspeech.bluehenge.v2.BluehengeService.GetTask:output_type -> cobaltspeech.bluehenge.v2.GetTaskResponse
	25, // 66: cobaltspeech.bluehenge.v2.BluehengeService.GetTree:output_type -> cobaltspeech.bluehenge.v2.GetTreeResponse
	37, // 67: cobaltspeech.bluehenge.v2.BluehengeService.SaveNote:output_type -> cobaltspeech.bluehenge.v2.SaveNoteResponse
	41, // 68: cobaltspeech.bluehenge.v2.BluehengeService.GetExtractionRelationship:output_type -> cobaltspeech.bluehenge.v2.GetExtractionRelationshipResponse
	44, // 69: cobaltspeech.bluehenge.v2.BluehengeService.GetEntity:output_type -> cobaltspeech.bluehenge.v2.GetEntityResponse
	49, // 70: cobaltspeech.bluehenge.v2.BluehengeService.GetEntityImageData:output_type -> cobaltspeech.bluehenge.v2.GetEntityImageDataResponse
	53, // [53:71] is the sub-list for method output_type
	35, // [35:53] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_cobaltspeech_bluehenge_v2_bluehenge_proto_init() }
func file_cobaltspeech_bluehenge_v2_bluehenge_proto_init() {
	if File_cobaltspeech_bluehenge_v2_bluehenge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamASRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamASRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamTTSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamTTSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProceduresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProceduresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTreesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTreesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcedureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcedureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTreeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureLite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeLite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Procedure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TroubleOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveNoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveNoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExtractionRelationshipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExtractionRelationshipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extraction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEntityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEntityImageDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEntityImageDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cobaltspeech_bluehenge_v2_bluehenge_proto_goTypes,
		DependencyIndexes: file_cobaltspeech_bluehenge_v2_bluehenge_proto_depIdxs,
		MessageInfos:      file_cobaltspeech_bluehenge_v2_bluehenge_proto_msgTypes,
	}.Build()
	File_cobaltspeech_bluehenge_v2_bluehenge_proto = out.File
	file_cobaltspeech_bluehenge_v2_bluehenge_proto_rawDesc = nil
	file_cobaltspeech_bluehenge_v2_bluehenge_proto_goTypes = nil
	file_cobaltspeech_bluehenge_v2_bluehenge_proto_depIdxs = nil
}
