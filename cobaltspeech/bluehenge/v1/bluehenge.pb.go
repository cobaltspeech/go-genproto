// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        (unknown)
// source: cobaltspeech/bluehenge/v1/bluehenge.proto

package bluehengev1

import (
	v3 "github.com/cobaltspeech/go-genproto/cobaltspeech/diatheke/v3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Empty request for Bluehenge Version
type VersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{0}
}

// Lists the version of Diatheke and the engines it uses.
type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bluehenge engine
	Bluehenge string `protobuf:"bytes,1,opt,name=bluehenge,proto3" json:"bluehenge,omitempty"`
	// Diatheke Version Response
	DiathekeVersionResponse *v3.VersionResponse `protobuf:"bytes,2,opt,name=diatheke_version_response,json=diathekeVersionResponse,proto3" json:"diatheke_version_response,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{1}
}

func (x *VersionResponse) GetBluehenge() string {
	if x != nil {
		return x.Bluehenge
	}
	return ""
}

func (x *VersionResponse) GetDiathekeVersionResponse() *v3.VersionResponse {
	if x != nil {
		return x.DiathekeVersionResponse
	}
	return nil
}

// The top-level message sent by the client for the `ListModels` method.
type ListModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeListModelsRequest *v3.ListModelsRequest `protobuf:"bytes,1,opt,name=diatheke_list_models_request,json=diathekeListModelsRequest,proto3" json:"diatheke_list_models_request,omitempty"`
}

func (x *ListModelsRequest) Reset() {
	*x = ListModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsRequest) ProtoMessage() {}

func (x *ListModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsRequest.ProtoReflect.Descriptor instead.
func (*ListModelsRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{2}
}

func (x *ListModelsRequest) GetDiathekeListModelsRequest() *v3.ListModelsRequest {
	if x != nil {
		return x.DiathekeListModelsRequest
	}
	return nil
}

// A list of models available on the Bluehenge server.
type ListModelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeListModelsResponse *v3.ListModelsResponse `protobuf:"bytes,1,opt,name=diatheke_list_models_response,json=diathekeListModelsResponse,proto3" json:"diatheke_list_models_response,omitempty"`
}

func (x *ListModelsResponse) Reset() {
	*x = ListModelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsResponse) ProtoMessage() {}

func (x *ListModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsResponse.ProtoReflect.Descriptor instead.
func (*ListModelsResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{3}
}

func (x *ListModelsResponse) GetDiathekeListModelsResponse() *v3.ListModelsResponse {
	if x != nil {
		return x.DiathekeListModelsResponse
	}
	return nil
}

// The top-level message sent by the client for the `CreateSession` method.
type CreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeCreateSessionRequest *v3.CreateSessionRequest `protobuf:"bytes,1,opt,name=diatheke_create_session_request,json=diathekeCreateSessionRequest,proto3" json:"diatheke_create_session_request,omitempty"`
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{4}
}

func (x *CreateSessionRequest) GetDiathekeCreateSessionRequest() *v3.CreateSessionRequest {
	if x != nil {
		return x.DiathekeCreateSessionRequest
	}
	return nil
}

// The top-level message sent by the server for the `CreateSession` method.
type CreateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeCreateSessionResponse *v3.CreateSessionResponse `protobuf:"bytes,1,opt,name=diatheke_create_session_response,json=diathekeCreateSessionResponse,proto3" json:"diatheke_create_session_response,omitempty"`
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{5}
}

func (x *CreateSessionResponse) GetDiathekeCreateSessionResponse() *v3.CreateSessionResponse {
	if x != nil {
		return x.DiathekeCreateSessionResponse
	}
	return nil
}

// The top-level message sent by the client for the `DeleteSession` method.
type DeleteSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeDeleteSessionRequest *v3.DeleteSessionRequest `protobuf:"bytes,1,opt,name=diatheke_delete_session_request,json=diathekeDeleteSessionRequest,proto3" json:"diatheke_delete_session_request,omitempty"`
}

func (x *DeleteSessionRequest) Reset() {
	*x = DeleteSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionRequest) ProtoMessage() {}

func (x *DeleteSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSessionRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteSessionRequest) GetDiathekeDeleteSessionRequest() *v3.DeleteSessionRequest {
	if x != nil {
		return x.DiathekeDeleteSessionRequest
	}
	return nil
}

// The top-level message sent by the server for the `DeleteSession` method.
type DeleteSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeDeleteSessionResponse *v3.DeleteSessionResponse `protobuf:"bytes,1,opt,name=diatheke_delete_session_response,json=diathekeDeleteSessionResponse,proto3" json:"diatheke_delete_session_response,omitempty"`
}

func (x *DeleteSessionResponse) Reset() {
	*x = DeleteSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionResponse) ProtoMessage() {}

func (x *DeleteSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionResponse.ProtoReflect.Descriptor instead.
func (*DeleteSessionResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteSessionResponse) GetDiathekeDeleteSessionResponse() *v3.DeleteSessionResponse {
	if x != nil {
		return x.DiathekeDeleteSessionResponse
	}
	return nil
}

// The top-level message sent by the client for the `UpdateSession` method.
type UpdateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeUpdateSessionRequest *v3.UpdateSessionRequest `protobuf:"bytes,1,opt,name=diatheke_update_session_request,json=diathekeUpdateSessionRequest,proto3" json:"diatheke_update_session_request,omitempty"`
}

func (x *UpdateSessionRequest) Reset() {
	*x = UpdateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionRequest) ProtoMessage() {}

func (x *UpdateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSessionRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateSessionRequest) GetDiathekeUpdateSessionRequest() *v3.UpdateSessionRequest {
	if x != nil {
		return x.DiathekeUpdateSessionRequest
	}
	return nil
}

// The top-level message sent by the server for the `UpdateSession` method.
type UpdateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeUpdateSessionResponse *v3.UpdateSessionResponse `protobuf:"bytes,1,opt,name=diatheke_update_session_response,json=diathekeUpdateSessionResponse,proto3" json:"diatheke_update_session_response,omitempty"`
}

func (x *UpdateSessionResponse) Reset() {
	*x = UpdateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionResponse) ProtoMessage() {}

func (x *UpdateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionResponse.ProtoReflect.Descriptor instead.
func (*UpdateSessionResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateSessionResponse) GetDiathekeUpdateSessionResponse() *v3.UpdateSessionResponse {
	if x != nil {
		return x.DiathekeUpdateSessionResponse
	}
	return nil
}

// The top-level message sent by the client for the `StreamASR` method.
type StreamASRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeStreamAsrRequest *v3.StreamASRRequest `protobuf:"bytes,1,opt,name=diatheke_stream_asr_request,json=diathekeStreamAsrRequest,proto3" json:"diatheke_stream_asr_request,omitempty"`
}

func (x *StreamASRRequest) Reset() {
	*x = StreamASRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamASRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamASRRequest) ProtoMessage() {}

func (x *StreamASRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamASRRequest.ProtoReflect.Descriptor instead.
func (*StreamASRRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{10}
}

func (x *StreamASRRequest) GetDiathekeStreamAsrRequest() *v3.StreamASRRequest {
	if x != nil {
		return x.DiathekeStreamAsrRequest
	}
	return nil
}

// The top-level message sent by the server for the `StreamASR` method.
type StreamASRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeStreamAsrResponse *v3.StreamASRResponse `protobuf:"bytes,1,opt,name=diatheke_stream_asr_response,json=diathekeStreamAsrResponse,proto3" json:"diatheke_stream_asr_response,omitempty"`
}

func (x *StreamASRResponse) Reset() {
	*x = StreamASRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamASRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamASRResponse) ProtoMessage() {}

func (x *StreamASRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamASRResponse.ProtoReflect.Descriptor instead.
func (*StreamASRResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{11}
}

func (x *StreamASRResponse) GetDiathekeStreamAsrResponse() *v3.StreamASRResponse {
	if x != nil {
		return x.DiathekeStreamAsrResponse
	}
	return nil
}

// The top-level message sent by the client for the `StreamTTS` method.
type StreamTTSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeStreamTtsRequest *v3.StreamTTSRequest `protobuf:"bytes,1,opt,name=diatheke_stream_tts_request,json=diathekeStreamTtsRequest,proto3" json:"diatheke_stream_tts_request,omitempty"`
}

func (x *StreamTTSRequest) Reset() {
	*x = StreamTTSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTTSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTTSRequest) ProtoMessage() {}

func (x *StreamTTSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTTSRequest.ProtoReflect.Descriptor instead.
func (*StreamTTSRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{12}
}

func (x *StreamTTSRequest) GetDiathekeStreamTtsRequest() *v3.StreamTTSRequest {
	if x != nil {
		return x.DiathekeStreamTtsRequest
	}
	return nil
}

// The top-level message sent by the server for the `StreamTTS` method.
type StreamTTSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeStreamTtsResponse *v3.StreamTTSResponse `protobuf:"bytes,1,opt,name=diatheke_stream_tts_response,json=diathekeStreamTtsResponse,proto3" json:"diatheke_stream_tts_response,omitempty"`
}

func (x *StreamTTSResponse) Reset() {
	*x = StreamTTSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTTSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTTSResponse) ProtoMessage() {}

func (x *StreamTTSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTTSResponse.ProtoReflect.Descriptor instead.
func (*StreamTTSResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{13}
}

func (x *StreamTTSResponse) GetDiathekeStreamTtsResponse() *v3.StreamTTSResponse {
	if x != nil {
		return x.DiathekeStreamTtsResponse
	}
	return nil
}

// The top-level message sent by the client for the `Transcribe` method.
type TranscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeTranscribeRequest *v3.TranscribeRequest `protobuf:"bytes,1,opt,name=diatheke_transcribe_request,json=diathekeTranscribeRequest,proto3" json:"diatheke_transcribe_request,omitempty"`
}

func (x *TranscribeRequest) Reset() {
	*x = TranscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscribeRequest) ProtoMessage() {}

func (x *TranscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscribeRequest.ProtoReflect.Descriptor instead.
func (*TranscribeRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{14}
}

func (x *TranscribeRequest) GetDiathekeTranscribeRequest() *v3.TranscribeRequest {
	if x != nil {
		return x.DiathekeTranscribeRequest
	}
	return nil
}

// The top-level message sent by the server for the `Transcribe` method.
type TranscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiathekeTranscribeResponse *v3.TranscribeResponse `protobuf:"bytes,1,opt,name=diatheke_transcribe_response,json=diathekeTranscribeResponse,proto3" json:"diatheke_transcribe_response,omitempty"`
}

func (x *TranscribeResponse) Reset() {
	*x = TranscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscribeResponse) ProtoMessage() {}

func (x *TranscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscribeResponse.ProtoReflect.Descriptor instead.
func (*TranscribeResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{15}
}

func (x *TranscribeResponse) GetDiathekeTranscribeResponse() *v3.TranscribeResponse {
	if x != nil {
		return x.DiathekeTranscribeResponse
	}
	return nil
}

// Input of the image required
type GetImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path of the image
	RelativePath string `protobuf:"bytes,1,opt,name=relative_path,json=relativePath,proto3" json:"relative_path,omitempty"`
}

func (x *GetImageRequest) Reset() {
	*x = GetImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageRequest) ProtoMessage() {}

func (x *GetImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageRequest.ProtoReflect.Descriptor instead.
func (*GetImageRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{16}
}

func (x *GetImageRequest) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

// Output of the image required
type GetImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Image given by chunks of bytes
	FileChunk []byte `protobuf:"bytes,1,opt,name=file_chunk,json=fileChunk,proto3" json:"file_chunk,omitempty"`
}

func (x *GetImageResponse) Reset() {
	*x = GetImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageResponse) ProtoMessage() {}

func (x *GetImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageResponse.ProtoReflect.Descriptor instead.
func (*GetImageResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{17}
}

func (x *GetImageResponse) GetFileChunk() []byte {
	if x != nil {
		return x.FileChunk
	}
	return nil
}

// Empty request to get the procedures stored in the knowledge graph
type ListProceduresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListProceduresRequest) Reset() {
	*x = ListProceduresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProceduresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProceduresRequest) ProtoMessage() {}

func (x *ListProceduresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProceduresRequest.ProtoReflect.Descriptor instead.
func (*ListProceduresRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{18}
}

// List of procedures from Gremlin
type ListProceduresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Repeated (list) procedures from Gremlin/knowledge graph
	Procedures []*GetProceduresResponse `protobuf:"bytes,1,rep,name=procedures,proto3" json:"procedures,omitempty"`
}

func (x *ListProceduresResponse) Reset() {
	*x = ListProceduresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProceduresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProceduresResponse) ProtoMessage() {}

func (x *ListProceduresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProceduresResponse.ProtoReflect.Descriptor instead.
func (*ListProceduresResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{19}
}

func (x *ListProceduresResponse) GetProcedures() []*GetProceduresResponse {
	if x != nil {
		return x.Procedures
	}
	return nil
}

// Input to get a single procedure by its id
type GetProceduresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id to identify a single procedure
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetProceduresRequest) Reset() {
	*x = GetProceduresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProceduresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProceduresRequest) ProtoMessage() {}

func (x *GetProceduresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProceduresRequest.ProtoReflect.Descriptor instead.
func (*GetProceduresRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{20}
}

func (x *GetProceduresRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Procedure from Gremlin
type GetProceduresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the procedure
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the procedure
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Number of the procedure
	ProcedureNumber string `protobuf:"bytes,3,opt,name=procedure_number,json=procedureNumber,proto3" json:"procedure_number,omitempty"`
	// AdditionalNames of the task
	AdditionalNames string `protobuf:"bytes,4,opt,name=additional_names,json=additionalNames,proto3" json:"additional_names,omitempty"` // This will be repeated
	// InputConditions text of the procedure
	InputConditions string `protobuf:"bytes,5,opt,name=input_conditions,json=inputConditions,proto3" json:"input_conditions,omitempty"` // This will be inputConditions
	// Prerequisites of the procedure
	PrerequisitesWarningText string `protobuf:"bytes,6,opt,name=prerequisites_warning_text,json=prerequisitesWarningText,proto3" json:"prerequisites_warning_text,omitempty"`
	// List of Task data of the procedure
	Tasks []*TaskData `protobuf:"bytes,7,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *GetProceduresResponse) Reset() {
	*x = GetProceduresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProceduresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProceduresResponse) ProtoMessage() {}

func (x *GetProceduresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProceduresResponse.ProtoReflect.Descriptor instead.
func (*GetProceduresResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{21}
}

func (x *GetProceduresResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetProceduresResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetProceduresResponse) GetProcedureNumber() string {
	if x != nil {
		return x.ProcedureNumber
	}
	return ""
}

func (x *GetProceduresResponse) GetAdditionalNames() string {
	if x != nil {
		return x.AdditionalNames
	}
	return ""
}

func (x *GetProceduresResponse) GetInputConditions() string {
	if x != nil {
		return x.InputConditions
	}
	return ""
}

func (x *GetProceduresResponse) GetPrerequisitesWarningText() string {
	if x != nil {
		return x.PrerequisitesWarningText
	}
	return ""
}

func (x *GetProceduresResponse) GetTasks() []*TaskData {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// Data of InputConditions within a procedure
type InputConditionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the task
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Applicability of the task
	Applicability string `protobuf:"bytes,2,opt,name=applicability,proto3" json:"applicability,omitempty"`
	// RequiredConditions of the task
	RequiredConditions string `protobuf:"bytes,3,opt,name=required_conditions,json=requiredConditions,proto3" json:"required_conditions,omitempty"`
	// List of personnel of the task
	Personnel string `protobuf:"bytes,4,opt,name=personnel,proto3" json:"personnel,omitempty"` // This will be repeated
	// List of supportEquipment of the task
	SupportEquipment string `protobuf:"bytes,5,opt,name=support_equipment,json=supportEquipment,proto3" json:"support_equipment,omitempty"` // This will be repeated
	// List of additionalData of the task
	AdditionalData string `protobuf:"bytes,6,opt,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty"` // This will be repeated
}

func (x *InputConditionData) Reset() {
	*x = InputConditionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputConditionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputConditionData) ProtoMessage() {}

func (x *InputConditionData) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputConditionData.ProtoReflect.Descriptor instead.
func (*InputConditionData) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{22}
}

func (x *InputConditionData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InputConditionData) GetApplicability() string {
	if x != nil {
		return x.Applicability
	}
	return ""
}

func (x *InputConditionData) GetRequiredConditions() string {
	if x != nil {
		return x.RequiredConditions
	}
	return ""
}

func (x *InputConditionData) GetPersonnel() string {
	if x != nil {
		return x.Personnel
	}
	return ""
}

func (x *InputConditionData) GetSupportEquipment() string {
	if x != nil {
		return x.SupportEquipment
	}
	return ""
}

func (x *InputConditionData) GetAdditionalData() string {
	if x != nil {
		return x.AdditionalData
	}
	return ""
}

// Data of tasks within a procedure
type TaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the task
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// TaskName of the task
	TaskName string `protobuf:"bytes,2,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	// TaskNumber of the task
	TaskNumber string `protobuf:"bytes,3,opt,name=task_number,json=taskNumber,proto3" json:"task_number,omitempty"`
	// AdditionalNames of the task
	AdditionalNames string `protobuf:"bytes,4,opt,name=additional_names,json=additionalNames,proto3" json:"additional_names,omitempty"` // This will be repeated
	// WarningText of the task
	WarningText string `protobuf:"bytes,5,opt,name=warning_text,json=warningText,proto3" json:"warning_text,omitempty"`
	// List of steps of the task
	Steps []*StepData `protobuf:"bytes,6,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (x *TaskData) Reset() {
	*x = TaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskData) ProtoMessage() {}

func (x *TaskData) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskData.ProtoReflect.Descriptor instead.
func (*TaskData) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{23}
}

func (x *TaskData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskData) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskData) GetTaskNumber() string {
	if x != nil {
		return x.TaskNumber
	}
	return ""
}

func (x *TaskData) GetAdditionalNames() string {
	if x != nil {
		return x.AdditionalNames
	}
	return ""
}

func (x *TaskData) GetWarningText() string {
	if x != nil {
		return x.WarningText
	}
	return ""
}

func (x *TaskData) GetSteps() []*StepData {
	if x != nil {
		return x.Steps
	}
	return nil
}

// Data of steps within a task
type StepData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the step
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Instructions of the step
	InstructionText string `protobuf:"bytes,2,opt,name=instruction_text,json=instructionText,proto3" json:"instruction_text,omitempty"`
	// Summary of the step
	SummaryText string `protobuf:"bytes,3,opt,name=summary_text,json=summaryText,proto3" json:"summary_text,omitempty"`
	// DisplayLabelText of the step
	Person string `protobuf:"bytes,4,opt,name=person,proto3" json:"person,omitempty"`
	// TaskNumber of the step
	TaskNumber string `protobuf:"bytes,5,opt,name=task_number,json=taskNumber,proto3" json:"task_number,omitempty"`
	// StepNumber of the step
	StepNumber string `protobuf:"bytes,6,opt,name=step_number,json=stepNumber,proto3" json:"step_number,omitempty"`
	// Image of the step
	Image string `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`
	// List of notes of the step
	Notes []*Notes `protobuf:"bytes,8,rep,name=notes,proto3" json:"notes,omitempty"`
}

func (x *StepData) Reset() {
	*x = StepData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepData) ProtoMessage() {}

func (x *StepData) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepData.ProtoReflect.Descriptor instead.
func (*StepData) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{24}
}

func (x *StepData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StepData) GetInstructionText() string {
	if x != nil {
		return x.InstructionText
	}
	return ""
}

func (x *StepData) GetSummaryText() string {
	if x != nil {
		return x.SummaryText
	}
	return ""
}

func (x *StepData) GetPerson() string {
	if x != nil {
		return x.Person
	}
	return ""
}

func (x *StepData) GetTaskNumber() string {
	if x != nil {
		return x.TaskNumber
	}
	return ""
}

func (x *StepData) GetStepNumber() string {
	if x != nil {
		return x.StepNumber
	}
	return ""
}

func (x *StepData) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *StepData) GetNotes() []*Notes {
	if x != nil {
		return x.Notes
	}
	return nil
}

// Notes of a step
type Notes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text of the note
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Notes) Reset() {
	*x = Notes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notes) ProtoMessage() {}

func (x *Notes) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notes.ProtoReflect.Descriptor instead.
func (*Notes) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{25}
}

func (x *Notes) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Input to save a note
type SaveNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text of a note to save
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// Step id of a note to save
	StepId string `protobuf:"bytes,2,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
}

func (x *SaveNoteRequest) Reset() {
	*x = SaveNoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveNoteRequest) ProtoMessage() {}

func (x *SaveNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveNoteRequest.ProtoReflect.Descriptor instead.
func (*SaveNoteRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{26}
}

func (x *SaveNoteRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SaveNoteRequest) GetStepId() string {
	if x != nil {
		return x.StepId
	}
	return ""
}

// Empty response once the note is saved
type SaveNoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveNoteResponse) Reset() {
	*x = SaveNoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveNoteResponse) ProtoMessage() {}

func (x *SaveNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveNoteResponse.ProtoReflect.Descriptor instead.
func (*SaveNoteResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{27}
}

// Input to get the entity of an image
type GetEntityImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of an entity image
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetEntityImageRequest) Reset() {
	*x = GetEntityImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntityImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntityImageRequest) ProtoMessage() {}

func (x *GetEntityImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntityImageRequest.ProtoReflect.Descriptor instead.
func (*GetEntityImageRequest) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{28}
}

func (x *GetEntityImageRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Output of get entity image
type GetEntityImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of images data
	ImageDataList []*ImageData `protobuf:"bytes,1,rep,name=image_data_list,json=imageDataList,proto3" json:"image_data_list,omitempty"`
}

func (x *GetEntityImageResponse) Reset() {
	*x = GetEntityImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntityImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntityImageResponse) ProtoMessage() {}

func (x *GetEntityImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntityImageResponse.ProtoReflect.Descriptor instead.
func (*GetEntityImageResponse) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{29}
}

func (x *GetEntityImageResponse) GetImageDataList() []*ImageData {
	if x != nil {
		return x.ImageDataList
	}
	return nil
}

// Data from an image
type ImageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of an image
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// File path of an image
	FilePath string `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// Caption of an image
	Caption string `protobuf:"bytes,3,opt,name=caption,proto3" json:"caption,omitempty"`
}

func (x *ImageData) Reset() {
	*x = ImageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageData) ProtoMessage() {}

func (x *ImageData) ProtoReflect() protoreflect.Message {
	mi := &file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageData.ProtoReflect.Descriptor instead.
func (*ImageData) Descriptor() ([]byte, []int) {
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP(), []int{30}
}

func (x *ImageData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ImageData) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *ImageData) GetCaption() string {
	if x != nil {
		return x.Caption
	}
	return ""
}

var File_cobaltspeech_bluehenge_v1_bluehenge_proto protoreflect.FileDescriptor

var file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDesc = []byte{
	0x0a, 0x29, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2f, 0x62,
	0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x75, 0x65,
	0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x63, 0x6f, 0x62,
	0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65,
	0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x27, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2f, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2f, 0x76, 0x33,
	0x2f, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x10, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65,
	0x6e, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x19, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76,
	0x33, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x17, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x6c, 0x0a, 0x1c, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76,
	0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x19, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x85,
	0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x1d, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74,
	0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x1a, 0x64, 0x69, 0x61, 0x74,
	0x68, 0x65, 0x6b, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x75, 0x0a, 0x1f, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65,
	0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1c, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65,
	0x6b, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x78, 0x0a, 0x20, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x62,
	0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65,
	0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x1d, 0x64, 0x69, 0x61,
	0x74, 0x68, 0x65, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x75, 0x0a, 0x1f, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74,
	0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1c, 0x64, 0x69,
	0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x20, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69,
	0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x1d, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d,
	0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x75, 0x0a, 0x1f, 0x64, 0x69, 0x61, 0x74, 0x68,
	0x65, 0x6b, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e,
	0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x1c, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x91,
	0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x20, 0x64, 0x69, 0x61, 0x74,
	0x68, 0x65, 0x6b, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x1d, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x7d, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x53, 0x52, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x1b, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65,
	0x6b, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x73, 0x72, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68,
	0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x53, 0x52,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x18, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x73, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x53, 0x52, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x1c, 0x64, 0x69, 0x61, 0x74, 0x68,
	0x65, 0x6b, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x73, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61,
	0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41,
	0x53, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x19, 0x64, 0x69, 0x61, 0x74,
	0x68, 0x65, 0x6b, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x73, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54,
	0x54, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x1b, 0x64, 0x69, 0x61,
	0x74, 0x68, 0x65, 0x6b, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69,
	0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x54, 0x54, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x18, 0x64, 0x69, 0x61, 0x74,
	0x68, 0x65, 0x6b, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54,
	0x54, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x1c, 0x64, 0x69,
	0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x74,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e,
	0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x54, 0x54, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x19, 0x64,
	0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6b,
	0x0a, 0x1b, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x19, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x12,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6e, 0x0a, 0x1c, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65,
	0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x1a, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x36, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x31, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x17, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6a, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x50, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x73, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb5, 0x02, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x72, 0x65,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70,
	0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x73, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x2f, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xe1, 0x01, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x39, 0x0a,
	0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x08, 0x53, 0x74, 0x65,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x65, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x1b, 0x0a, 0x05, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3e, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x65, 0x70, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x61, 0x76, 0x65,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x66, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4c, 0x0a, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x52, 0x0a,
	0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x32, 0xc6, 0x0b, 0x0a, 0x10, 0x42, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0a, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x62, 0x61,
	0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f,
	0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x09, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x41, 0x53, 0x52, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x53, 0x52, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x53, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x6a, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54,
	0x54, 0x53, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x54, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x54, 0x54, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x6f, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x2c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x77, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x65, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x2a, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4e, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x62, 0x61,
	0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30, 0x2e, 0x63, 0x6f, 0x62,
	0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65,
	0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x67, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x62, 0x61,
	0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x80, 0x02, 0x0a, 0x1d, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x42, 0x6c,
	0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x49,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x2f, 0x62, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x6c,
	0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x42, 0x58, 0xaa,
	0x02, 0x19, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x42,
	0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x19, 0x43, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5c, 0x42, 0x6c, 0x75, 0x65, 0x68,
	0x65, 0x6e, 0x67, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x25, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5c, 0x42, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x1b, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x3a, 0x3a,
	0x42, 0x6c, 0x75, 0x65, 0x68, 0x65, 0x6e, 0x67, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescOnce sync.Once
	file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescData = file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDesc
)

func file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescGZIP() []byte {
	file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescOnce.Do(func() {
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescData = protoimpl.X.CompressGZIP(file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescData)
	})
	return file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDescData
}

var file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_cobaltspeech_bluehenge_v1_bluehenge_proto_goTypes = []interface{}{
	(*VersionRequest)(nil),           // 0: cobaltspeech.bluehenge.v1.VersionRequest
	(*VersionResponse)(nil),          // 1: cobaltspeech.bluehenge.v1.VersionResponse
	(*ListModelsRequest)(nil),        // 2: cobaltspeech.bluehenge.v1.ListModelsRequest
	(*ListModelsResponse)(nil),       // 3: cobaltspeech.bluehenge.v1.ListModelsResponse
	(*CreateSessionRequest)(nil),     // 4: cobaltspeech.bluehenge.v1.CreateSessionRequest
	(*CreateSessionResponse)(nil),    // 5: cobaltspeech.bluehenge.v1.CreateSessionResponse
	(*DeleteSessionRequest)(nil),     // 6: cobaltspeech.bluehenge.v1.DeleteSessionRequest
	(*DeleteSessionResponse)(nil),    // 7: cobaltspeech.bluehenge.v1.DeleteSessionResponse
	(*UpdateSessionRequest)(nil),     // 8: cobaltspeech.bluehenge.v1.UpdateSessionRequest
	(*UpdateSessionResponse)(nil),    // 9: cobaltspeech.bluehenge.v1.UpdateSessionResponse
	(*StreamASRRequest)(nil),         // 10: cobaltspeech.bluehenge.v1.StreamASRRequest
	(*StreamASRResponse)(nil),        // 11: cobaltspeech.bluehenge.v1.StreamASRResponse
	(*StreamTTSRequest)(nil),         // 12: cobaltspeech.bluehenge.v1.StreamTTSRequest
	(*StreamTTSResponse)(nil),        // 13: cobaltspeech.bluehenge.v1.StreamTTSResponse
	(*TranscribeRequest)(nil),        // 14: cobaltspeech.bluehenge.v1.TranscribeRequest
	(*TranscribeResponse)(nil),       // 15: cobaltspeech.bluehenge.v1.TranscribeResponse
	(*GetImageRequest)(nil),          // 16: cobaltspeech.bluehenge.v1.GetImageRequest
	(*GetImageResponse)(nil),         // 17: cobaltspeech.bluehenge.v1.GetImageResponse
	(*ListProceduresRequest)(nil),    // 18: cobaltspeech.bluehenge.v1.ListProceduresRequest
	(*ListProceduresResponse)(nil),   // 19: cobaltspeech.bluehenge.v1.ListProceduresResponse
	(*GetProceduresRequest)(nil),     // 20: cobaltspeech.bluehenge.v1.GetProceduresRequest
	(*GetProceduresResponse)(nil),    // 21: cobaltspeech.bluehenge.v1.GetProceduresResponse
	(*InputConditionData)(nil),       // 22: cobaltspeech.bluehenge.v1.InputConditionData
	(*TaskData)(nil),                 // 23: cobaltspeech.bluehenge.v1.TaskData
	(*StepData)(nil),                 // 24: cobaltspeech.bluehenge.v1.StepData
	(*Notes)(nil),                    // 25: cobaltspeech.bluehenge.v1.Notes
	(*SaveNoteRequest)(nil),          // 26: cobaltspeech.bluehenge.v1.SaveNoteRequest
	(*SaveNoteResponse)(nil),         // 27: cobaltspeech.bluehenge.v1.SaveNoteResponse
	(*GetEntityImageRequest)(nil),    // 28: cobaltspeech.bluehenge.v1.GetEntityImageRequest
	(*GetEntityImageResponse)(nil),   // 29: cobaltspeech.bluehenge.v1.GetEntityImageResponse
	(*ImageData)(nil),                // 30: cobaltspeech.bluehenge.v1.ImageData
	(*v3.VersionResponse)(nil),       // 31: cobaltspeech.diatheke.v3.VersionResponse
	(*v3.ListModelsRequest)(nil),     // 32: cobaltspeech.diatheke.v3.ListModelsRequest
	(*v3.ListModelsResponse)(nil),    // 33: cobaltspeech.diatheke.v3.ListModelsResponse
	(*v3.CreateSessionRequest)(nil),  // 34: cobaltspeech.diatheke.v3.CreateSessionRequest
	(*v3.CreateSessionResponse)(nil), // 35: cobaltspeech.diatheke.v3.CreateSessionResponse
	(*v3.DeleteSessionRequest)(nil),  // 36: cobaltspeech.diatheke.v3.DeleteSessionRequest
	(*v3.DeleteSessionResponse)(nil), // 37: cobaltspeech.diatheke.v3.DeleteSessionResponse
	(*v3.UpdateSessionRequest)(nil),  // 38: cobaltspeech.diatheke.v3.UpdateSessionRequest
	(*v3.UpdateSessionResponse)(nil), // 39: cobaltspeech.diatheke.v3.UpdateSessionResponse
	(*v3.StreamASRRequest)(nil),      // 40: cobaltspeech.diatheke.v3.StreamASRRequest
	(*v3.StreamASRResponse)(nil),     // 41: cobaltspeech.diatheke.v3.StreamASRResponse
	(*v3.StreamTTSRequest)(nil),      // 42: cobaltspeech.diatheke.v3.StreamTTSRequest
	(*v3.StreamTTSResponse)(nil),     // 43: cobaltspeech.diatheke.v3.StreamTTSResponse
	(*v3.TranscribeRequest)(nil),     // 44: cobaltspeech.diatheke.v3.TranscribeRequest
	(*v3.TranscribeResponse)(nil),    // 45: cobaltspeech.diatheke.v3.TranscribeResponse
}
var file_cobaltspeech_bluehenge_v1_bluehenge_proto_depIdxs = []int32{
	31, // 0: cobaltspeech.bluehenge.v1.VersionResponse.diatheke_version_response:type_name -> cobaltspeech.diatheke.v3.VersionResponse
	32, // 1: cobaltspeech.bluehenge.v1.ListModelsRequest.diatheke_list_models_request:type_name -> cobaltspeech.diatheke.v3.ListModelsRequest
	33, // 2: cobaltspeech.bluehenge.v1.ListModelsResponse.diatheke_list_models_response:type_name -> cobaltspeech.diatheke.v3.ListModelsResponse
	34, // 3: cobaltspeech.bluehenge.v1.CreateSessionRequest.diatheke_create_session_request:type_name -> cobaltspeech.diatheke.v3.CreateSessionRequest
	35, // 4: cobaltspeech.bluehenge.v1.CreateSessionResponse.diatheke_create_session_response:type_name -> cobaltspeech.diatheke.v3.CreateSessionResponse
	36, // 5: cobaltspeech.bluehenge.v1.DeleteSessionRequest.diatheke_delete_session_request:type_name -> cobaltspeech.diatheke.v3.DeleteSessionRequest
	37, // 6: cobaltspeech.bluehenge.v1.DeleteSessionResponse.diatheke_delete_session_response:type_name -> cobaltspeech.diatheke.v3.DeleteSessionResponse
	38, // 7: cobaltspeech.bluehenge.v1.UpdateSessionRequest.diatheke_update_session_request:type_name -> cobaltspeech.diatheke.v3.UpdateSessionRequest
	39, // 8: cobaltspeech.bluehenge.v1.UpdateSessionResponse.diatheke_update_session_response:type_name -> cobaltspeech.diatheke.v3.UpdateSessionResponse
	40, // 9: cobaltspeech.bluehenge.v1.StreamASRRequest.diatheke_stream_asr_request:type_name -> cobaltspeech.diatheke.v3.StreamASRRequest
	41, // 10: cobaltspeech.bluehenge.v1.StreamASRResponse.diatheke_stream_asr_response:type_name -> cobaltspeech.diatheke.v3.StreamASRResponse
	42, // 11: cobaltspeech.bluehenge.v1.StreamTTSRequest.diatheke_stream_tts_request:type_name -> cobaltspeech.diatheke.v3.StreamTTSRequest
	43, // 12: cobaltspeech.bluehenge.v1.StreamTTSResponse.diatheke_stream_tts_response:type_name -> cobaltspeech.diatheke.v3.StreamTTSResponse
	44, // 13: cobaltspeech.bluehenge.v1.TranscribeRequest.diatheke_transcribe_request:type_name -> cobaltspeech.diatheke.v3.TranscribeRequest
	45, // 14: cobaltspeech.bluehenge.v1.TranscribeResponse.diatheke_transcribe_response:type_name -> cobaltspeech.diatheke.v3.TranscribeResponse
	21, // 15: cobaltspeech.bluehenge.v1.ListProceduresResponse.procedures:type_name -> cobaltspeech.bluehenge.v1.GetProceduresResponse
	23, // 16: cobaltspeech.bluehenge.v1.GetProceduresResponse.tasks:type_name -> cobaltspeech.bluehenge.v1.TaskData
	24, // 17: cobaltspeech.bluehenge.v1.TaskData.steps:type_name -> cobaltspeech.bluehenge.v1.StepData
	25, // 18: cobaltspeech.bluehenge.v1.StepData.notes:type_name -> cobaltspeech.bluehenge.v1.Notes
	30, // 19: cobaltspeech.bluehenge.v1.GetEntityImageResponse.image_data_list:type_name -> cobaltspeech.bluehenge.v1.ImageData
	0,  // 20: cobaltspeech.bluehenge.v1.BluehengeService.Version:input_type -> cobaltspeech.bluehenge.v1.VersionRequest
	2,  // 21: cobaltspeech.bluehenge.v1.BluehengeService.ListModels:input_type -> cobaltspeech.bluehenge.v1.ListModelsRequest
	4,  // 22: cobaltspeech.bluehenge.v1.BluehengeService.CreateSession:input_type -> cobaltspeech.bluehenge.v1.CreateSessionRequest
	6,  // 23: cobaltspeech.bluehenge.v1.BluehengeService.DeleteSession:input_type -> cobaltspeech.bluehenge.v1.DeleteSessionRequest
	8,  // 24: cobaltspeech.bluehenge.v1.BluehengeService.UpdateSession:input_type -> cobaltspeech.bluehenge.v1.UpdateSessionRequest
	10, // 25: cobaltspeech.bluehenge.v1.BluehengeService.StreamASR:input_type -> cobaltspeech.bluehenge.v1.StreamASRRequest
	12, // 26: cobaltspeech.bluehenge.v1.BluehengeService.StreamTTS:input_type -> cobaltspeech.bluehenge.v1.StreamTTSRequest
	14, // 27: cobaltspeech.bluehenge.v1.BluehengeService.Transcribe:input_type -> cobaltspeech.bluehenge.v1.TranscribeRequest
	18, // 28: cobaltspeech.bluehenge.v1.BluehengeService.ListProcedures:input_type -> cobaltspeech.bluehenge.v1.ListProceduresRequest
	20, // 29: cobaltspeech.bluehenge.v1.BluehengeService.GetProcedures:input_type -> cobaltspeech.bluehenge.v1.GetProceduresRequest
	26, // 30: cobaltspeech.bluehenge.v1.BluehengeService.SaveNote:input_type -> cobaltspeech.bluehenge.v1.SaveNoteRequest
	28, // 31: cobaltspeech.bluehenge.v1.BluehengeService.GetEntityImage:input_type -> cobaltspeech.bluehenge.v1.GetEntityImageRequest
	16, // 32: cobaltspeech.bluehenge.v1.BluehengeService.GetImage:input_type -> cobaltspeech.bluehenge.v1.GetImageRequest
	1,  // 33: cobaltspeech.bluehenge.v1.BluehengeService.Version:output_type -> cobaltspeech.bluehenge.v1.VersionResponse
	3,  // 34: cobaltspeech.bluehenge.v1.BluehengeService.ListModels:output_type -> cobaltspeech.bluehenge.v1.ListModelsResponse
	5,  // 35: cobaltspeech.bluehenge.v1.BluehengeService.CreateSession:output_type -> cobaltspeech.bluehenge.v1.CreateSessionResponse
	7,  // 36: cobaltspeech.bluehenge.v1.BluehengeService.DeleteSession:output_type -> cobaltspeech.bluehenge.v1.DeleteSessionResponse
	9,  // 37: cobaltspeech.bluehenge.v1.BluehengeService.UpdateSession:output_type -> cobaltspeech.bluehenge.v1.UpdateSessionResponse
	11, // 38: cobaltspeech.bluehenge.v1.BluehengeService.StreamASR:output_type -> cobaltspeech.bluehenge.v1.StreamASRResponse
	13, // 39: cobaltspeech.bluehenge.v1.BluehengeService.StreamTTS:output_type -> cobaltspeech.bluehenge.v1.StreamTTSResponse
	15, // 40: cobaltspeech.bluehenge.v1.BluehengeService.Transcribe:output_type -> cobaltspeech.bluehenge.v1.TranscribeResponse
	19, // 41: cobaltspeech.bluehenge.v1.BluehengeService.ListProcedures:output_type -> cobaltspeech.bluehenge.v1.ListProceduresResponse
	21, // 42: cobaltspeech.bluehenge.v1.BluehengeService.GetProcedures:output_type -> cobaltspeech.bluehenge.v1.GetProceduresResponse
	27, // 43: cobaltspeech.bluehenge.v1.BluehengeService.SaveNote:output_type -> cobaltspeech.bluehenge.v1.SaveNoteResponse
	29, // 44: cobaltspeech.bluehenge.v1.BluehengeService.GetEntityImage:output_type -> cobaltspeech.bluehenge.v1.GetEntityImageResponse
	17, // 45: cobaltspeech.bluehenge.v1.BluehengeService.GetImage:output_type -> cobaltspeech.bluehenge.v1.GetImageResponse
	33, // [33:46] is the sub-list for method output_type
	20, // [20:33] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_cobaltspeech_bluehenge_v1_bluehenge_proto_init() }
func file_cobaltspeech_bluehenge_v1_bluehenge_proto_init() {
	if File_cobaltspeech_bluehenge_v1_bluehenge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamASRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamASRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamTTSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamTTSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProceduresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProceduresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProceduresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProceduresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputConditionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveNoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveNoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEntityImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEntityImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cobaltspeech_bluehenge_v1_bluehenge_proto_goTypes,
		DependencyIndexes: file_cobaltspeech_bluehenge_v1_bluehenge_proto_depIdxs,
		MessageInfos:      file_cobaltspeech_bluehenge_v1_bluehenge_proto_msgTypes,
	}.Build()
	File_cobaltspeech_bluehenge_v1_bluehenge_proto = out.File
	file_cobaltspeech_bluehenge_v1_bluehenge_proto_rawDesc = nil
	file_cobaltspeech_bluehenge_v1_bluehenge_proto_goTypes = nil
	file_cobaltspeech_bluehenge_v1_bluehenge_proto_depIdxs = nil
}
